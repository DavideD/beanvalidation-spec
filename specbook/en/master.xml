<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <title>JSR 303: Bean Validation</title>

  <bookinfo>
    <title>JSR 303: Bean Validation</title>

    <releaseinfo>1.0.Betax</releaseinfo>

    <pubdate>2008-09-29</pubdate>

    <copyright>
      <year>2007, 2008</year>

      <holder>Red Hat Middleware, LLC and Steve Peterson</holder>
    </copyright>

    <authorgroup>
      <corpauthor>Bean Validation Expert Group</corpauthor>

      <author>
        <firstname>Emmanuel</firstname>

        <surname>Bernard</surname>

        <affiliation>
          <orgname>Red Hat Middleware, LLC</orgname>
        </affiliation>
      </author>

      <author>
        <firstname>Steve</firstname>

        <surname>Peterson</surname>
      </author>
    </authorgroup>
  </bookinfo>

  <preface>
    <title>Disclaimer</title>

    <para>This specification is a work in progress. The content of this
    specification is highly subject to change. Specific areas currently at
    work include:</para>

    <itemizedlist>
      <listitem>
        <para><classname>StandardConstraint</classname> extension (feedback
        from presentation frameworks)</para>
      </listitem>

      <listitem>
        <para>Message resolution and localization</para>
      </listitem>

      <listitem>
        <para>Bootstrap strategy (including validation provider
        resolution)</para>
      </listitem>

      <listitem>
        <para>Constraint metadata request API (feedback from consumer
        frameworks including presentation, tools and so on)</para>
      </listitem>

      <listitem>
        <para>Built-in constraint definitions</para>
      </listitem>

      <listitem>
        <para>XML deployment descriptor</para>
      </listitem>

      <listitem>
        <para>Extension for method parameters validation</para>
      </listitem>
    </itemizedlist>

    <para>The JSR 303 expert group is seeking for feedbacks from the community
    on this specification and will update it accordingly. Direct feedbacks to
    jsr-303-comments@jcp.org.</para>
  </preface>

  <chapter>
    <title>Introduction</title>

    <para>This document is the specification of the Java API for JavaBean
    validation in Java EE and Java SE. The technical objective of this work is
    to provide a class level constraint declaration and validation facility
    for the Java application developer, as well as a constraint metadata
    repository and query API.</para>

    <section>
      <title>Expert group</title>

      <para>This work is being conducted as part of JSR-303 under the Java
      Community Process Program. This specification is the result of the
      collaborative work of the members of the JSR 303 Expert Group. These
      include the following present and former expert group members:</para>

      <itemizedlist>
        <listitem>
          <para>Geert Bevin</para>
        </listitem>

        <listitem>
          <para>Emmanuel Bernard (Red Hat Middleware LLC)</para>
        </listitem>

        <listitem>
          <para>Uri Boness</para>
        </listitem>

        <listitem>
          <para>Erik Brakkee (Ericsson AB)</para>
        </listitem>

        <listitem>
          <para>Ed Burns (Sun Microsystems, Inc.)</para>
        </listitem>

        <listitem>
          <para>Jason Carreira</para>
        </listitem>

        <listitem>
          <para>Robert Clevenger</para>
        </listitem>

        <listitem>
          <para>Linda DeMichiel (Sun Microsystems, Inc.)</para>
        </listitem>

        <listitem>
          <para>Tim Fennel</para>
        </listitem>

        <listitem>
          <para>Romain Guy (Google Inc.)</para>
        </listitem>

        <listitem>
          <para>Robert Harrop</para>
        </listitem>

        <listitem>
          <para>Jacob J. Hookom</para>
        </listitem>

        <listitem>
          <para>Bob Lee (Google Inc.)</para>
        </listitem>

        <listitem>
          <para>Craig R. McClanahan</para>
        </listitem>

        <listitem>
          <para>Niall K. Pemberton</para>
        </listitem>

        <listitem>
          <para>Steve Peterson</para>
        </listitem>

        <listitem>
          <para>Dhanji R. Prasanna</para>
        </listitem>

        <listitem>
          <para>Matt Raible</para>
        </listitem>

        <listitem>
          <para>Michael Nascimento Santos</para>
        </listitem>

        <listitem>
          <para>Jon Wetherbee (Oracle)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Specification goals</title>

      <para>Validating data is a common task that occurs throughout an
      application, from the presentation layer to the persistence layer. Often
      the same validation logic is implemented in each layer, proving time
      consuming and error-prone. To avoid duplication of these validations in
      each layer, developers often bundle validation logic directly into the
      domain model, cluttering domain classes with validation code that is, in
      fact, metadata about the class itself.</para>

      <para>This JSR defines a metadata model and API for JavaBean validation.
      The default metadata source is annotations, with the ability to override
      and extend the meta-data through the use of XML validation
      descriptors.</para>

      <para>The validation API developed by this JSR is not intended for use
      in any one tier or programming model. It is specifically not tied to
      either the web tier or the persistence tier, and is available for both
      server-side application programming, as well as rich client Swing
      application developers. This API is seen as a general extension to the
      JavaBeans object model, and as such is expected to be used as a core
      component in other specifications. Ease of use and flexibility are
      influencing the design of this specification.</para>
    </section>

    <section>
      <title>How this document is organized</title>

      <para>This document describes each aspect of the bean validation
      specification in a separate chapter. One should remember that the
      specification is a consistent whole.</para>

      <para><xref linkend="constraintsdefinitionimplementation" /> describes
      how constraints are defined.</para>

      <para><xref linkend="constraintdeclarationvalidationprocess" />
      describes how a JavaBean class is decorated with annotations to describe
      constraints on the contents of an instance of the class.</para>

      <para><xref linkend="validationapi" /> describes how to programmatically
      validate a JavaBean.</para>

      <para><xref linkend="constraintmetadata" /> describes how the metadata
      query API works.</para>

      <para>A <xref linkend="terminology" /> section summarize key concepts.
      Some reviewers have found that reading the terminology section first
      helps to better understand the specification.</para>
    </section>

    <section>
      <title>How to comment</title>

      <para>The expert group is eager to receive feedbacks from readers. Feel
      free to email us at jsr-303-comments@jcp.org.</para>
    </section>
  </chapter>

  <chapter id="constraintsdefinitionimplementation">
    <title>Constraint Definition</title>

    <!--[SCP: "declaration" is creating a new kind of constraint; "definition" is applying a constraint to a class, method, or field.]
EBE I started a thread on the ML => I don't think I like the move.-->

    <!--[SCP: consider moving this chapter after the next one] // EBE:I tried earlier but this order make more sense-->

    <para>Constraints are defined through a combination of a constraint
    annotation and a constraint validation implementation. The constraint
    annotation is applied to a type, method, or field target.</para>

    <para>Unless stated otherwise the default package name for the Bean
    Validation APIs is <classname>javax.validation</classname>.</para>

    <section id="constraintsdefinitionimplementation-constraintdefinition">
      <title>Constraint annotation</title>

      <para>A constraint on a JavaBean is expressed through one or more
      annotations. An annotation is considered a constraint definition if its
      retention policy contains <literal>RUNTIME</literal> and if the
      annotation itself is annotated with
      <literal>javax.validation.ConstraintValidator</literal>.</para>

      <programlisting>/**
 * Link between an constraint annotation and its constraint validation implementation
 *
 * A given constraint annotation should be annotated by a @ConstraintValidator
 * annotation to refer to its constraint validation implementation
 *<!--TODO SCP:  Do we want to just call this Validator? 
EBE thread started on the ML but validator is the name of the main API, maybe ConstraintValidator-->
 */
@Documented
@Target({ANNOTATION_TYPE})
@Retention(RUNTIME)
public @interface ConstraintValidator {
    /**
     * Constraint validation implementation
     */
    Class&lt;? extends Constraint&gt; value();
}</programlisting>

      <para>Constraint annotations can be defined on <literal>FIELD</literal>,
      <literal>METHOD</literal>, or <literal>TYPE</literal> targets.</para>

      <para>Since a given constraint definition applies to one or more
      specific types, the JavaDoc for the constraint annotation should clearly
      state which types are supported. Applying a constraint annotation to an
      incompatible type is a runtime error.</para>

      <section>
        <title>Constraint definition properties</title>

        <para>A constraint definition may have properties that can be
        specified at the time the constraint is applied to a JavaBean. The
        properties are mapped as annotation elements. The annotation element
        names <literal>message</literal> and <literal>groups</literal> are
        considered reserved names; a constraint may use any other element name
        for its parameters.<!--[SCP: reserve a prefix for future use?] EBE: I think I have a smarter approach check the "Constraint definition elements" email from 2007/11/26--></para>

        <section id="constraintsdefinitionimplementation-constraintdefinition-parameters-message">
          <title>message</title>

          <para>Every constraint annotation must define a
          <literal>message</literal> element of type
          <literal>String</literal>.</para>

          <programlisting>String message() default "{validator.myConstraintFailure}";</programlisting>

          <para>The <methodname>message</methodname> element value is used to
          create the error message. See <xref
          linkend="validationapi-message" /> for a detailed
          explanation.</para>
        </section>

        <section id="constraintsdefinitionimplementation-constraintdefinition-groups">
          <title>groups</title>

          <para><literal>groups</literal> is a required element that specifies
          which processing groups the constraint definition is associated
          with.</para>

          <programlisting>    String[] groups() default {};</programlisting>

          <para>The default value must be an empty array.</para>

          <para>When using the constraint declaration, if no group is
          specified, the <literal>default</literal> group is considered
          declared. The validation will be evaluated if</para>

          <itemizedlist>
            <listitem>
              <para>no group was specified at validation time (which defaults
              to the <literal>default</literal> group) and the annotation is a
              member of the <literal>default</literal> group</para>
            </listitem>

            <listitem>
              <para>or if one of the groups specified at validation time
              matches one of the groups specified on the constraint annotation
              declaration</para>
            </listitem>
          </itemizedlist>

          <para>See <xref linkend="validationapi-validatorapi-groups" /> for
          more information. It is required that all constraint definitions
          support this element.</para>

          <para>Groups are typically used to control the order of validator
          evaluation, or perform partial validation of a JavaBean.</para>
        </section>

        <section>
          <title>Constraint specific parameter</title>

          <para>The constraint annotation definitions may define additional
          elements needed to parameterize the constraint definition. For
          example, a constraint that validates the length of a string can use
          an annotation element named <literal>length</literal> to specify the
          maximum length at the time the constraint is declared.</para>
        </section>
      </section>

      <section>
        <title>Examples</title>

        <example>
          <title>NotNull constraint definition</title>

          <programlisting>@Documented
@ConstraintValidator(NotNullConstraint.class)
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface NotNull {
    String message() default "{validator.notNull}";
    String[] groups() default {};
}</programlisting>
        </example>

        <para>Defines a not null constraint with a specific default message.
        The constraint validator is implemented by
        <classname>NotNullConstraint</classname>.</para>

        <example>
          <title>Length constraint definition</title>

          <programlisting>@Documented
@ConstraintValidator(LengthConstraint.class)
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface Length {
    int min() default 0;
    int max() default Integer.MAX_VALUE;
    String message() default "{validator.length}";
    String[] groups() default {};
}</programlisting>
        </example>

        <para>Defines a length constraint. The constraint definition includes
        two optional properties that may be specified when the constraint is
        applied.</para>

        <example>
          <title>Min constraint definition</title>

          <programlisting>@Documented
@ConstraintValidator(MinConstraint.class)
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface Min {
    int value();
    String message() default "{validator.min}";
    String[] groups() default {};
}</programlisting>
        </example>

        <para>Defines a min constraint with a constraint property that must be
        specified when the constraint is applied.</para>
      </section>
    </section>

    <section>
      <title>Applying multiple constraints of the same type</title>

      <para>It is often useful to apply the same constraint more than once to
      the same target, with different properties. A common example is the
      <literal>@Pattern</literal> constraint, which validates that its target
      matches a specified regular expression.</para>

      <para>To support this, the bean validation provider treats non
      constraint annotations (an annotation not annotated by
      <classname>@ConstraintValidator</classname>) with a
      <literal>value</literal> element having a return type of an array of
      constraint annotations as a list of annotations that are processed by
      the Bean Validation implementation. This means that each constraint
      specified in the value element is applied to the target. The annotation
      must have a retention and can be applied on a type, field or
      property.</para>

      <para>Each constraint annotation should be coupled with its
      corresponding multi-valued annotation.</para>

      <programlisting>@Documented
@ConstraintValidator(PatternValidator.class)
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface Pattern {
    /** regular expression */
    String regex();

    /** Flags parameter for Pattern.compile() */
    int flags() default 0;

    String message() default "{validator.pattern}";
    String[] groups() default {};
}

@Documented
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface Patterns {
    Pattern[] value();<!--SCP:  will we ever need to distinguish this type of annotation from other arrays of constraints?
EBE anything specific in mind?--><!--SCP:  what order are these evaluated in? 
EBE: this is not specified, I don't think there is a need for-->}</programlisting>

      <example>
        <title>Multi-valued constraint</title>

        <programlisting>public class Engine {
    @Patterns( {
            @Pattern(regex = "^[A-Z0-9-]+$", 
                message = "must contain alphabetical characters only"),
            @Pattern(regex = "^....-....-....$", message="must match ....-....-....")
            } )
    private String serialNumber;
}</programlisting>
      </example>

      <para>In this example, both constraints (<literal>^[A-Z0-9-]+$</literal>
      and <literal>^....-....-....$</literal>) will be applied on the
      <literal>serialNumber</literal> field.</para>
    </section>

    <section id="constraintsdefinitionimplementation-validationimplementation">
      <title>Constraint validation implementation</title>

      <para>A constraint validation implementation performs the validation of
      a target class, field, or method. It is specified by the value element
      of the <classname>ConstraintValidator</classname> annotation that
      decorates the constraint definition. The constaint validation
      implementation implements the <classname>Constraint</classname>
      interface.</para>

      <!--[SCP: consider naming this ConstraintValidator] EBE naming proposal circulating-->

      <programlisting>/**
 * Define the logic to validate a given constraint
 */
public interface Constraint&lt;A extends Annotation&gt; {
    /**
     * Initialize the constraint validator.
     *
     * This method is guaranteed to be called once right after the constraint is retrieved 
     * from the &lt;code&gt;ConstraintFactory&lt;/code&gt; and before the Bean Validation provider 
     * starts using it.
     *
     * @param constraintAnnotation The constraint declaration
     */
    void initialize(A constraintAnnotation);
    /**
     * Evaluates the constraint against a value.  This method
     * must be thread safe.
     *
     * @param value The object to validate
     * @return false if the value is not valid, true otherwise
     * @exception IllegalArgumentException The value's type isn't understood 
     *            by the constraint validator
     */
    boolean isValid(Object value);    <!--TODO SCP: What happens to other exceptions inside isValid()?-->
}</programlisting>

      <para>The lifetime of a constraint validation implementation instance is
      undefined.</para>

      <!--EBE should we make explicit that instances cannot be shared if the annotations attributes are not the same?-->

      <para><methodname>initialize</methodname> is called by the Bean
      validation provider prior to any use of the constraint
      implementation.</para>

      <para>The <methodname>isValid</methodname> method is evaluated by the
      Bean Validation provider each time a given value is validated. It
      returns <literal>false</literal> if the value is not valid,
      <literal>true</literal> otherwise. <literal>isValid</literal>
      implementations must be thread-safe.</para>

      <note>
        <para>While not mandatory, it is considered a good practice to split
        the core constraint validation from the not null constraint validation
        (for example, an <classname>@Email</classname> constraint will return
        true on a null object, i.e. will not take care of the
        <classname>@NotNull</classname> validation)</para>

        <para><code>null</code> can have multiple meanings but is commonly
        used to express that a value does not make sense, is not available or
        is simply unknown. Those constraints on the value are orthogonal in
        most cases to other constraints. For example a String, if present,
        must be an email but can be null. Separating both concerns is a good
        practice.</para>

        <!--[SCP: I think this should be mandatory.] I don't think you can: for once, it would prevent from implementing @NotNull or @NotEmpty-->
      </note>

      <para>If the value parameter references an object with an unanticipated
      type, an <literal>IllegalArgumentException</literal> should be
      raised.</para>
    </section>

    <section id="constraintsdefinitionimplementation-constraintfactory">
      <title>The ConstraintFactory</title>

      <para>Constraint validation implementation instances are created by a
      <classname>ConstraintFactory</classname>.</para>

      <programlisting>/**
 * This class manages the creation of constraint validators.
 */
public interface ConstraintFactory {
    /**
     * Instantiate a Constraint.
     *
     * @return Returns a new Constraint instance
     * The ConstraintFactory is &lt;b&gt;not&lt;/b&gt; responsible for calling Constraint#initialize
     */
    &lt;T extends Constraint&gt; T getInstance(Class&lt;T&gt; constraintClass);
}</programlisting>

      <para>The default <classname>ConstraintFactory</classname> provided by
      the bean provider implementation uses the public constraint no-arg
      constructor. A custom constraint factory can be provided for example to
      benefit from a dependency injection control in constraint
      implementations. Any constraint implementation relying on
      <classname>ConstraintFactory</classname> behaviors specific to an
      implementation (dependency injection, no no-arg constructor and so on)
      are not considered portable, hence great care should be given before
      walking that path.</para>

      <!--[SCP: I think supporting dependency injection here violates the javadoc comment on Constraint.initialize() above]
EBE fixed this by rewordingthe JavaDoc-->

      <section id="constraintsdefinitionimplementation-validationimplementation-example">
        <title>Example</title>

        <example>
          <title>Length constraint validator</title>

          <programlisting>/**
 * Check that a string length is between min and max
 *
 */
public class LengthConstraint implements Constraint&lt;Length&gt; {
    private int min;
    private int max;
<!--SCP: does this take a Map as its input to support XML descriptor, or do we map the XML descriptor into a Length instance?
EBE: The second option-->
    /**
     * Configure the constraint validator based on the elements
     * specified at the time it was defined.
     * @param constraint the constraint definition
     */
    public void initialize(Length constraint) {
        min = constraint.min();
        max = constraint.max();
<!--SCP: is best practice here to just keep a reference to the Length? Since there will be one LengthConstraint for each Length instance
EBE in real life, I expect some preprocessing anyway, so keeping the annotations as a data container probably does not make a lot of sense generally speaking
Note that generally speaking one "LengthConstraint for each Length instance" is not guaranteed. -->
    }

    /**
     * Validate a specified value.
     * returns false if the specified value does not conform to the definition
     * @exception IllegalArgumentException if the object is not of type String
     */
    public boolean isValid(Object value) {
        if ( value == null ) return true;
        if ( !( value instanceof String ) ) {
            throw new IllegalArgumentException("Expected String type");
        }
        String string = (String) value;
        int length = string.length();
        return length &gt;= min &amp;&amp; length &lt;= max;
    }
}</programlisting>
        </example>

        <para>This constraint validator checks that the string's length is
        between min and max. It also demonstrates some best practices:</para>

        <itemizedlist>
          <listitem>
            <para>raises an <classname>IllegalArgumentException</classname> in
            case of type mismatch</para>
          </listitem>

          <listitem>
            <para>returns <literal>true</literal> on a null parameter</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section id="constraintsdefinition-standardconstraint">
      <title>StandardConstraint description</title>

      <para>Constraint metadata can be consumed through the <xref
      linkend="constraintmetadata" />. In addition to their
      <classname>Constraint</classname> implementation, built-in and custom
      constraint definitions can describe the constraint through static and
      standard dimensions (such as nullability, length for a String etc). This
      metadata is particularly useful for third-party metadata consumers like
      persistence frameworks generating database schemas (such as Java
      Persistence) or presentation frameworks.</para>

      <para>Any constraint definition can implement the
      <classname>StandardConstraint</classname> interface to expose this
      metadata.</para>

      <programlisting>/**
 * Indicates the availability of standard constraint metadata.
 *
 */
public interface StandardConstraint {
    /**
     * @return A StandardConstraintDescriptor containing metadata
     * for this constraint definition.
     */
<!--SCP change method name here-->    StandardConstraintDescriptor getStandardConstraintDescriptor();
}

/**
 * Describe how the current constraint influences the standard constraints
 *
 * @author Emmanuel Bernard
 */
public class StandardConstraintDescriptor {
    /**
     * Defines the object nullability.
     * TRUE means the object is nullable,
     * FALSE means the object is not nullable,
     * NULL means does not apply.
     */
<!--// SCP does unaffected here mean "immaterial" or "does not apply"?
EBE not sure what immaterial means. unaffected means that the nullability dimansion does not apply for this constraint: I've changed the JavaDoc-->
    public Boolean getNullability() {
        return null;
    }

    /**
     * Defines the precision if the validated object is a number.
     * NULL means does not apply.
     */
    public Integer getPrecision() {
        return null;
    }

    /**
     * Defines the scale if the validated object is a number.
     * NULL means does not apply.
     */
    public Integer getScale() {
        return null;
    }

    /**
     * Defines the length if the validated object is a string.
     * NULL means does not apply.
     */
    public Integer getLength() {
        return null;
    }
}</programlisting>

      <para>Clients can then access this information through the <xref
      linkend="constraintmetadata" /> and more specifically through the
      <methodname>getConstraintImplementation</methodname> method of
      <classname>ConstraintDescriptor</classname>.</para>

      <section>
        <title>Standard Constraint metadata examples</title>

        <para>The following example extends <xref
        linkend="constraintsdefinitionimplementation-validationimplementation-example" />.</para>

        <example>
          <title>Standard constraint metadata</title>

          <programlisting>/**
 * Check that a string length is between min and max
 * and expose the information through the standard constraint model
 *
 */
public class LengthConstraint implements Constraint&lt;Length&gt;, <emphasis
              role="bold">StandardConstraint</emphasis> {
    private int min;
    private int max;

    /**
     * retrieve parameters from the annotation for later use
     */
    public void initialize(Length constraint) {
        min = constraint.min();
        max = constraint.max();
    }

    /**
     * return true if the object is null
     * returns false if the value object is out of boundaries
     * rause an IllegalArgumentException if the object is not of type String
     */
    public boolean isValid(Object value) {
        if ( value == null ) return true;
        if ( !( value instanceof String ) ) {
            throw new IllegalArgumentException("Expected String type");
        }
        String string = (String) value;
        int length = string.length();
        return length &gt;= min &amp;&amp; length &lt;= max;
    }

    /**
     * Returns the standard constraint descriptor in accordance with the max constraint
     */
    <emphasis role="bold">public StandardConstraintDescriptor getStandardConstraints() {
        return new StandardConstraintDescriptor() {
            public Integer getLength() {
                if ( max == Integer.MAX_VALUE ) {
                    return null;
                }
                else {
                    return max;
                }
            }
        };
    }</emphasis>
}</programlisting>
        </example>

        <para>In this example, the only standard constraint metadata value
        provided by this constraint definition is length.</para>
      </section>
    </section>
  </chapter>

  <chapter id="constraintdeclarationvalidationprocess">
    <title>Constraint declaration and validation process</title>

    <para>The Bean Validation specification defines a framework for declaring
    constraints on JavaBean classes, fields and properties.</para>

    <para>Constraints are declared for classes, and evaluated against
    instances or graphs of instances.</para>

    <section id="constraintdeclarationvalidationprocess-requirements">
      <title>Requirements on classes to be validated</title>

      <para>Objects that are to be validated must fulfill the following
      requirements.</para>

      <para>Properties to be validated must follow the method signature
      conventions for JavaBeans read properties, as defined by the JavaBeans
      specification.</para>

      <para>Constraints can be applied to interfaces and superclasses.</para>

      <para>The target of an annotation definition can be a field, property,
      or type, provided that:</para>

      <itemizedlist>
        <listitem>
          <para>the constraint definition supports the specified target</para>
        </listitem>

        <listitem>
          <para>the constraint validator supports the type of the target
          object</para>
        </listitem>
      </itemizedlist>

      <section id="constraintdeclarationvalidationprocess-requirements-object">
        <title>Object validation</title>

        <para>Constraint declarations can be applied to a class or an
        interface. Applying a constraint to a class or interface expresses a
        validation over the state of the class or interface.</para>
      </section>

      <section id="constraintdeclarationvalidationprocess-requirements-property">
        <title>Field and property validation</title>

        <para>Constraint declarations can be applied on both fields and
        properties for the same object type. The same constraint should
        however not be duplicated between a field and its associated property
        (the constraint validation would be applied twice). It is recommended
        for objects holding constraint declarations to adhere a single state
        access strategy (either annotated fields or properties).</para>

        <!--EBE steve, constraints can be applied on fields of primitive types. We use boxing.-->

        <para>When a field is annotated with a constraint declaration, field
        access strategy is used to access the state validated by such
        constraint.</para>

        <para>When a property is annotated with a constraint declaration,
        property access strategy is used to access the state validated by such
        constraint.</para>

        <para>When using field access strategy, the bean validation provider
        accesses the instance variable directly. When using the property
        access strategy, the bean validation provider accesses the state via
        the property accessor method. It is required that the class follow the
        method signature conventions for JavaBeans read properties (as defined
        by the JavaBeans <classname>Introspector</classname> class) for
        constrained properties when constrained properties are used. In this
        case, for every constraint property of type T, there is a getter
        method, <methodname>get&lt;Property-name&gt;</methodname>. For
        <code>boolean</code> properties,
        <methodname>is&lt;Property-name&gt;</methodname> is an alternative
        name for the getter method. Specifically, if
        <methodname>getX</methodname> is the name of the getter method, where
        X is a string, the name of the persistent property is defined by the
        result of <code>java.beans.Introspector.decapitalize(X)</code>.</para>

        <para>The fields or methods visibility are not constrained.</para>
      </section>

      <section>
        <title>Graph validation</title>

        <para>In addition to supporting instance validation, validation of
        graphs of object is also supported. The result of graph validation is
        a unified list of invalid values.</para>

        <para>Consider the situation where bean X contains a field of type Y.
        By annotating field Y with the @Valid annotation, the Validator will
        validate the contents of Y when X is validated. The exact type of the
        field of type Y (subclass, implementation) is determined at runtime.
        The constrain definitions for this particular subtype are used. This
        ensure proper polymorphism behavior. </para>

        <para>Collection-valued or array-valued fields and properties may also
        be decorated with the <classname>@Valid</classname> annotation. This
        causes the contents of the collection or array to be validated. The
        following types are supported:</para>

        <itemizedlist>
          <listitem>
            <para>any array of object</para>
          </listitem>

          <listitem>
            <para><classname>java.util.Collection</classname></para>
          </listitem>

          <listitem>
            <para><classname>java.util.Set</classname></para>
          </listitem>

          <listitem>
            <para><classname>java.util.List</classname></para>
          </listitem>

          <listitem>
            <para><classname>java.util.Map</classname></para>
          </listitem>
        </itemizedlist>

        <para>Each object stored in the array or collection is validated. Like
        regular references, it's type is determined at runtime and the
        constraint definitions for this particular type are used. </para>

        <para>The <classname>@Valid</classname> annotation is applied
        recursively. A conforming implementation avoids infinite loops by
        validating an object the first time it is encountered in the graph,
        and ignores it if it is encountered through at different path.</para>
      </section>
    </section>

    <section>
      <title>Constraint declaration</title>

      <para>Constraint declarations are placed on classes or interfaces
      primarily through annotations. A constraint annotation (see <xref
      linkend="constraintsdefinitionimplementation-constraintdefinition" />),
      can be applied to a type, on any of the type's fields or on any of the
      JavaBeans-compliant properties.</para>

      <para>When a constraint is defined on a type, the type instance being
      validated is passed to the constraint validator. When a constraint is
      defined on a field, the value of the field is passed to the constraint
      validator. When a constraint is defined on a getter, the result of the
      getter invocation is passed to the validation routine.</para>
    </section>

    <section id="constraintdeclarationvalidationprocess-inheritance">
      <title>Inheritance (interface and superclass)</title>

      <para>A constraint declaration can be placed on an interface. Constraint
      declarations held on superclasses as well as interfaces are evaluated by
      the Validator.</para>

      <para>The effect of constraint declarations is cumulative. Constraints
      declared on a superclass getter will be validated along with any
      constraints defined on an overridden version of the getter.</para>
    </section>

    <section id="constraintdeclarationvalidationprocess-groupsequence">
      <title>Group and group sequence</title>

      <para>Groups are useful to define subsets of constraints for validation
      purposes. Assigning constraints to groups provides the ability to do
      partial validation of the group. The <methodname>groups</methodname>
      element of the constraint annotation specifies the groups in which the
      constraint participates. At validation time, an optional parameter can
      be specified that narrows the set of groups to be validated.</para>

      <para>One important application for grouping is to control the order of
      evaluation of constraints. There are often scenarios where a preliminary
      set of constraints should be evaluated prior to other constraints. This
      is useful in two scenarios:</para>

      <itemizedlist>
        <listitem>
          <para>the second group depends on a stable state to run
          properly</para>
        </listitem>

        <listitem>
          <para>the second group is a heavy consumer of time, CPU or memory
          and should be avoided if possible</para>
        </listitem>
      </itemizedlist>

      <para>To implement such ordering, one or more
      <classname>@GroupSequence</classname> annotations can be added.</para>

      <programlisting>@Target({TYPE})
@Retention(RUNTIME)
public @interface GroupSequence {
    String name();
    String[] sequence();
}

@Target({TYPE})
@Retention(RUNTIME)
public @interface GroupSequences {
    GroupSequence[] value();
}</programlisting>

      <para><classname>@GroupSequence</classname> and
      <classname>@GroupSequences</classname> are placed on the validated class
      they should be applied on.</para>

      <para>Each group of a group sequence must be processed sequentially in
      the order defined by <methodname>@GroupSequence.sequence</methodname>
      when the group <methodname>@GroupSequence.name</methodname> is requested
      ; processing a group is defined in <xref
      linkend="constraintdeclarationvalidationprocess-validationroutine" /> ;
      if one of the groups processed in the sequence leads to one or more
      validation failures, the groups following in the sequence must not be
      processed. Group sequences are recursively resolved: the user must make
      sure no circular graph is defined by the group sequence definitions. For
      a given class, the group sequences taken into account are the ones
      placed on the class itself as well as the ones on all its superclasses
      and all its interfaces. When an object graph is validated (through the
      use of <literal>@Valid</literal>), the children elements of the graph
      inherit the sequence definitions of their parent. Two group sequences
      must not share the same group name in a given object graph (including
      superclasses and interfaces). Group sequences must not use constraint
      declaration group names as a name. In other words, constraint definition
      groups cannot contain one of the group sequence names.</para>

      <para>Unless constrained by a group sequence, the order in which groups
      are validated is undefined.</para>

      <!--Make explicit what happens if a group is part of a group sequence and also explicitly called in validator.validate()-->
    </section>

    <section id="constraintdeclarationvalidationprocess-validationroutine">
      <title>Validation routine</title>

      <para>For a given group to validate, the validation routine applied on a
      given bean instance is expected to execute the constraint
      validations:</para>

      <itemizedlist>
        <listitem>
          <para>execute all field level validations (including the one
          expressed in interfaces and superclasses) matching the targeted
          group unless the given validation constraint has already been
          processed during this validation routine (as part of a previous
          group match)</para>
        </listitem>

        <listitem>
          <para>execute all method level validations (including the one
          expressed in interfaces and superclasses) matching the targeted
          group unless the given validation constraint has already been
          processed during this validation routine (as part of a previous
          group match)</para>
        </listitem>

        <listitem>
          <para>execute all bean level validations (including the one
          expressed in interfaces and superclasses) matching the targeted
          group unless the given validation constraint has already been
          processed during this validation routine (as part of a previous
          group match)</para>
        </listitem>

        <listitem>
          <para>execute all cascading validations (see <xref
          linkend="constraintdeclarationvalidationprocess-validationroutine-graphvalidation" />)
          including the one expressed in interfaces and superclasses</para>
        </listitem>
      </itemizedlist>

      <para>Note that it implies that a given validation constraint will not
      be processed more than once per validation.</para>

      <!--SCP: note that grouping, as currently defined cannot control depth of search in the graph
EBE: correct, so far I don't think it's useful-->

      <para>The object validation routine is described as such. For each
      constraint declaration and in the previously defined order:</para>

      <itemizedlist>
        <listitem>
          <para>execute the <methodname>isValid</methodname> operation (from
          the constraint validation implementation) on the appropriate data
          (see <xref
          linkend="constraintsdefinitionimplementation-validationimplementation" />)</para>
        </listitem>

        <listitem>
          <para>if <methodname>isValid</methodname> returns true, continue to
          the next constraint,</para>
        </listitem>

        <listitem>
          <para>if <methodname>isValid</methodname> returns false, the Bean
          Validation provider populate an
          <classname>InvalidConstraint</classname> object and append it to the
          list of returned values</para>

          <!--SCP: note that this implies that validation issues are returned in the order they are discovered
EBE: is that a problem?-->
        </listitem>
      </itemizedlist>

      <para>Bean Validation is a fully polymorphic framework. Constraints are
      gathered according to the object type determined at runtime.</para>

      <section id="constraintdeclarationvalidationprocess-validationroutine-graphvalidation">
        <title>Object graph validation</title>

        <para>The <classname>@Valid</classname> annotation on a given
        association (i.e. object reference or collection / array of objects),
        dictates the Bean Validator implementation to apply recursively the
        bean validation routine on (each of) the associated object(s). This
        mechanism is recursive: an associated object can itself contains
        cascaded references. The Bean Validation implementation must ignore
        the cascading operation if the associated object instance has already
        been validated by the current validation routine, thus preventing
        infinite loops.</para>

        <para>The <classname>InvalidConstraint</classname> objects, built when
        a failing constraint on an associated object is found, reflects the
        path to reach the object from the root validated object (See <xref
        linkend="validationapi-invalidconstraint" />).</para>
      </section>
    </section>

    <section>
      <title>Examples</title>

      <para>The first example demonstrate how beans, fields and getters are
      annotated to express some constraints.</para>

      <programlisting>@ZipCodeCityCoherenceChecker
public class Address {
    @NotNull @Length(max=30)
    private String addressline1;

    @Length(max=30)
    private String addressline2;

    private String zipCode;

    private String city;

    public String getAddressline1() {
        return addressline1;
    }

    public void setAddressline1(String addressline1) {
        this.addressline1 = addressline1;
    }

    public String getAddressline2() {
        return addressline2;
    }

    public void setAddressline2(String addressline2) {
        this.addressline2 = addressline2;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    @Length(max=30) @NotNull
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}</programlisting>

      <para>During the validation routine execution on an
      <classname>Address</classname> object,</para>

      <itemizedlist>
        <listitem>
          <para><methodname>addressline1</methodname> field value is passed to
          the <classname>NotNull</classname> as well as
          <classname>Length</classname> constraint validation
          implementation.</para>
        </listitem>

        <listitem>
          <para><methodname>addressline2</methodname> field value is passed to
          the <classname>Length</classname> constraint validation
          implementations.</para>
        </listitem>

        <listitem>
          <para><methodname>getCity</methodname> value is passed to the
          <classname>Length</classname> and <classname>NotNull</classname>
          constraint validation implementations</para>
        </listitem>

        <listitem>
          <para><classname>ZipCodeCohereceChecker</classname> is a constraint
          whose validation implementation's <methodname>isValid</methodname>
          method receives the <classname>Address</classname> object</para>
        </listitem>
      </itemizedlist>

      <para>The second example demonstrates object graph validation</para>

      <programlisting>public class Country {
    @NotNull
    private String name;
    @Length(max=2) private String ISO2Code;
    @Length(max=3) private String ISO3Code;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getISO2Code() {
        return ISO2Code;
    }

    public void setISO2Code(String ISO2Code) {
        this.ISO2Code = ISO2Code;
    }

    public String getISO3Code() {
        return ISO3Code;
    }

    public void setISO3Code(String ISO3Code) {
        this.ISO3Code = ISO3Code;
    }
}

public class Address {
    @NotNull @Length(max=30)
    private String addressline1;
    @Length(max=30)
    private String addressline2;
    @Length(max=11)
    private String zipCode;
    <emphasis role="bold">@NotNull @Valid</emphasis>
    private Country country;

    private String city;

    public String getAddressline1() {
        return addressline1;
    }

    public void setAddressline1(String addressline1) {
        this.addressline1 = addressline1;
    }

    public String getAddressline2() {
        return addressline2;
    }

    public void setAddressline2(String addressline2) {
        this.addressline2 = addressline2;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    @Length(max=30) @NotNull
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public Country getCountry() {
        return country;
    }

    public void setCountry(Country country) {
        this.country = country;
    }
}</programlisting>

      <para>During the validation routine execution on an
      <classname>Address</classname> object, constraints on
      <methodname>addressLine1</methodname>,
      <methodname>addressLine2</methodname>, <methodname>zipCode</methodname>
      and <methodname>country</methodname> are processed as well as the
      validation of the <classname>Country</classname> object itself, more
      specifically <methodname>country.name</methodname> is checked for
      <classname>NotNull</classname>, <methodname>ISO2Code</methodname> and
      <methodname>ISO3Code</methodname> are checked for
      <classname>Length</classname>.</para>

      <para>The third example demonstrates superclass and inheritance.</para>

      <programlisting>public interface Person {
    @NotEmpty
    String getFirstName();

    String getMiddleName();
    
    @NotEmpty
    String getLastName();
}

public class Customer implements Person {
    private String firstName;
    private String middleName;
    private String lastName;
    @NotNull
    private String customerId;
    @Password(robustness=5)
    private String password;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getMiddleName() {
        return middleName;
    }

    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

public class PreferredGuest extends Customer {
    @CreditCard
    private String guestCreditCardNumber;

    public String getGuestCreditCardNumber() {
        return guestCreditCardNumber;
    }

    public void setGuestCreditCardNumber(String guestCreditCardNumber) {
        this.guestCreditCardNumber = guestCreditCardNumber;
    }
}</programlisting>

      <para>When validating a PreferredGuest the following constraints are
      processed:</para>

      <itemizedlist>
        <listitem>
          <para>NotEmpty on firstName, NotEmpty on lastName</para>
        </listitem>

        <listitem>
          <para>NotNull on customerId, Password on password</para>
        </listitem>

        <listitem>
          <para>CreditCard on guestCreditCardNumber</para>
        </listitem>
      </itemizedlist>

      <para>The fourth example demonstrates the influence of group
      sequence.</para>

      <programlisting>public class Author {
    @NotEmpty(groups="last")
    private String firstName;
    
    @NotEmpty(groups="first")
    private String lastName;

    @Length(max=30, groups="last")
    private String company;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        this.company = company;
    }
}

<emphasis role="bold">@GroupSequence(name="default", sequence={"first", "second", "last"})</emphasis>
public class Book {
    <emphasis role="bold">@NotEmpty(groups="first")</emphasis>
    private String title;

    @Length(max=30, groups="second")
    private String subtitle;

    @Valid
    @NotNull(groups="first")
    private Author author;

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getSubtitle() {
        return subtitle;
    }

    public void setSubtitle(String subtitle) {
        this.subtitle = subtitle;
    }

    public Author getAuthor() {
        return author;
    }

    public void setAuthor(Author author) {
        this.author = author;
    }
}</programlisting>

      <para>Assuming the validation process of the following book
      instance:</para>

      <programlisting>Author author = new Author();
author.setLastName( "Baudelaire" );
author.setFirstName( "" );
Book book = new Book();
book.setAuthor( author );</programlisting>

      <para>the validation routine will return the following failure:</para>

      <itemizedlist>
        <listitem>
          <para><classname>NotEmpty</classname> failure on the title
          field</para>
        </listitem>
      </itemizedlist>

      <para>As both <methodname>title</methodname> and
      <methodname>author.lastname</methodname> are checked as part of the
      <literal>first</literal> group. If the instance is updated:</para>

      <programlisting>book.setTitle( "Les fleurs du mal" );
author.setCompany("Some random publisher with a very very very long name");</programlisting>

      <para>the validation routine will return the following failures:</para>

      <itemizedlist>
        <listitem>
          <para><methodname>author.firstName</methodname> fails to pass the
          <classname>NotEmpty</classname> constraint</para>
        </listitem>

        <listitem>
          <para><methodname>author.company</methodname> fails to pass the
          <classname>Length</classname> constraint</para>
        </listitem>
      </itemizedlist>

      <para>As the <literal>first</literal> and <literal>second</literal>
      groups pass without failure, the <literal>last</literal> group is going
      through validation.</para>
    </section>
  </chapter>

  <chapter id="validationapi">
    <title>Validation APIs</title>

    <para>The default package for the Bean Validation APIs is
    <classname>javax.validation</classname></para>

    <section id="validationapi-validatorapi">
      <title>Validator&lt;T&gt; API</title>

      <para>The main Bean Validation API is the
      <classname>javax.validation.Validator&lt;T&gt;</classname>
      interface.</para>

      <para>A <classname>Validator&lt;T&gt;</classname> instance is able to
      validate instances of <classname>T</classname> classes, all its
      subclasses and the associated objects if any.</para>

      <programlisting>/**
 * Validate a given object type
 * 
 * @author Emmanuel Bernard
 */
public interface Validator&lt;T&gt; {
    /**
     * validate all constraints on object
     *
     * @param object object to validate
     * @param groups group name(s) targeted for validation (default to &lt;code&gt;default&lt;/code&gt;)
     * @return invalid constrains or an empty Set if none
     * @throws IllegalArgumentException e if object is null<!--TODO should it just be ignored?-->
     */
    Set&lt;InvalidConstraint&lt;T&gt;&gt; validate(T object, String... groups);

    /**
     * validate all constraints on &lt;code&gt;propertyName&lt;/code&gt; property of object
     *
     *
     * @param object object to validate
     * @param propertyName property to validate
     * @param groups group name(s) targeted for validation (default to &lt;code&gt;default&lt;/code&gt;)
     * @return invalid constrains or an empty Set if none
     * @throws IllegalArgumentException e if object is null<!--TODO should it just be ignored?-->
     */
    Set&lt;InvalidConstraint&lt;T&gt;&gt; validateProperty(T object, 
                                               String propertyName, 
                                               String... groups);

    /**
     * validate all constraints on &lt;code&gt;propertyName&lt;/code&gt; property 
     * if the property value is &lt;code&gt;value&lt;/code&gt;
     *
     * TODO express limitations of InvalidConstraint in this case
     *
     * @param propertyName property to validate
     * @param value property value to validate
     * @param groups group name(s) targeted for validation (default to &lt;code&gt;default&lt;/code&gt;)
     * @return invalid constrains or an empty Set if none
     */
    Set&lt;InvalidConstraint&lt;T&gt;&gt; validateValue(String propertyName, 
                                            Object value, 
                                            String... groups);

    [...]

}</programlisting>

      <para></para>

      <section id="validationapi-validatorapi-validationmethods">
        <title>Validation methods</title>

        <para><methodname>Set&lt;InvalidConstraint&gt; validate(T object,
        String... groups)</methodname> is used to validate a given object of
        type <classname>T</classname> or any of its subtype from a
        <classname>Validator&lt;T&gt;</classname> instance. This method
        implements the logic described in <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine" />.
        A Set containing all <classname>InvalidConstraint</classname> objects
        representing the failing constraints is returned, an empty
        <classname>Set</classname> is returned otherwise.</para>

        <note>
          <para>Calling the validation methods on an instance of U a subtype
          of T is functionally equivalent (but not type wise) to call the same
          method on <classname>Validator&lt;U&gt;</classname>.</para>
        </note>

        <para><methodname>Set&lt;InvalidConstraint&gt; validateProperty(T
        object, String propertyName, String... groups)</methodname> validates
        a given field or property of an object. The property name is the
        JavaBeans property name (as defined by the JavaBeans Introspector
        class). This method implements the logic described in <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine" />
        and apply it only to the given property. <literal>@Valid</literal> is
        not honored by this method. This method is useful for partial object
        validation.</para>

        <para><methodname>Set&lt;InvalidConstraint&gt; validateValue(String
        propertyName, Object value, String... groups)</methodname> validates
        the property referenced by <parameter>propertyName</parameter>, if the
        property value were <parameter>value</parameter>. This method
        implements the logic described in <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine" />
        and apply it only to the given property and the given value.
        <literal>@Valid</literal> is not honored by this method. This method
        is useful for ahead of time validation.</para>

        <!--SCP: what values come back in InvalidConstraint for the validateValue() case?
EBE the value passed as a parameter. I think the JavaDoc is clear, should it be made explicit?-->

        <section>
          <title>Examples</title>

          <para>All the examples will be based on the following class
          definition, constraint declarations and address instance.</para>

          <programlisting>public class Address {
    <emphasis role="bold">@NotNull @Length(max=30)</emphasis>
    private String addressline1;

    <emphasis role="bold">@Length(max=30)</emphasis>
    private String addressline2;

    private String zipCode;

    private String city;

    public String getAddressline1() {
        return addressline1;
    }

    public void setAddressline1(String addressline1) {
        this.addressline1 = addressline1;
    }

    public String getAddressline2() {
        return addressline2;
    }

    public void setAddressline2(String addressline2) {
        this.addressline2 = addressline2;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    <emphasis role="bold">@Length(max=30) @NotNull</emphasis>
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}

Address address = new Address();
address.setAddressline1( null );
address.setAddressline2( null );
address.setCity("Llanfairpwllgwyngyllgogerychwyrndrobwyll-llantysiliogogogoch");
//town in North Wales</programlisting>

          <para>Assuming a <classname>Validator&lt;Address&gt;</classname>,
          the following code will return three
          <classname>InvalidConstraint</classname> objects. One for
          <literal>addressline1</literal> violating
          <literal>NotNull</literal>, one for <literal>addressline2</literal>
          violating <literal>NotNull</literal> and one for
          <literal>city</literal> violating <literal>Length</literal>.</para>

          <programlisting>validator.validate(address).size() == 3</programlisting>

          <para>The following code will return one
          <classname>Invalid</classname>Constraint since
          <literal>city</literal> violates <literal>Length</literal> and only
          <literal>city</literal> is validated.</para>

          <programlisting>validator.validateProperty(address, "city").size() == 1</programlisting>

          <para>The following code will return no
          <classname>InvalidConstraint</classname> object because the value
          <literal>Paris</literal> for <literal>city</literal> would not raise
          any constraint failure.</para>

          <programlisting>validator.validateValue("city", "Paris").size() == 0</programlisting>
        </section>
      </section>

      <section id="validationapi-validatorapi-groups">
        <title>groups</title>

        <para>The (list of) group(s) restricts the set of constraints applied.
        Only the constraint declarations targeting (see <xref
        linkend="constraintsdefinitionimplementation-constraintdefinition-groups" />)
        one or more of the group(s) passed as a parameter to the
        <methodname>validate</methodname>,
        <methodname>validateProperty</methodname> and
        <methodname>validateValue</methodname> methods will be applied during
        the <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine" />.
        If no group is passed, the <literal>default</literal> group is
        assumed.</para>

        <section>
          <title>Examples</title>

          <programlisting>public class Address {
    @NotEmpty(groups = "minimal")
    @Length(max=50)
    private String street1;
    
    @NotEmpty
    private String city;

    @NotEmpty(groups = {"minimal", "default"})
    private String zipCode;
    ...
}</programlisting>

          <para>In the previous example, <classname>@NotEmpty</classname> on
          <methodname>street1</methodname> applies to the group
          <literal>minimal</literal>, <classname>@Length</classname> on
          <methodname>street1</methodname> applies to the group
          <literal>default</literal> and <classname>@NotEmpty </classname>on
          <methodname>zipCode</methodname> applies to the groups
          <literal>default</literal> and <literal>minimal</literal>.</para>

          <programlisting>validator.validate(address);</programlisting>

          <para>applies <classname>@Length</classname> on
          <methodname>street1</methodname>, <classname>@NotEmpty</classname>
          on <methodname>city</methodname>, <classname>@NotEmpty</classname>
          on <methodname>zipCode</methodname>. Particularly,
          <classname>@NotEmpty</classname> on <methodname>street1</methodname>
          is not applied.</para>

          <programlisting>validator.validate(address, "minimal");</programlisting>

          <para>applies <classname>@NotEmpty</classname> on
          <methodname>street1</methodname> and
          <classname>@NotEmpty</classname> on
          <methodname>zipCode</methodname></para>

          <programlisting>validator.validate(address, "minimal", "default");</programlisting>

          <para>applies <classname>@NotEmpty</classname> and
          <classname>@Length</classname> on <methodname>street1</methodname>,
          <classname>@NotEmpty</classname> on <methodname>city</methodname>,
          <classname>@NotEmpty</classname> on
          <methodname>zipCode</methodname>. Note that if
          <methodname>zipCode</methodname> is indeed not empty, only one
          <classname>InvalidConstraint</classname> object will represent the
          failure and the not empty validation will only be executed
          once.</para>

          <para>Let's look at a more complex example involving group
          sequence.</para>

          <programlisting>@GroupSequence(name="total", sequence={"firststep", "secondstep"})
public class Address {
    @NotEmpty(groups = "minimal")
    @Length(max=50, groups="firststep")
    private String street1;
    
    @NotEmpty(groups="secondstep")
    private String city;

    @NotEmpty(groups = {"minimal", "secondstep"})
    private String zipCode;
    ...
}</programlisting>

          <para>When running:</para>

          <programlisting>validator.validate(address, "minimal", "total");</programlisting>

          <para>the validation process will process
          <classname>NotEmpty</classname> and <classname>Length</classname>
          from <methodname>street1</methodname> and
          <classname>NotEmpty</classname> from
          <methodname>zipCode</methodname>. If <classname>Length</classname>
          from <methodname>street1</methodname> does not generate a failure,
          then <classname>NotEmpty</classname> from
          <methodname>city</methodname> will be processed. Note that
          <classname>NotEmpty</classname> from
          <methodname>zipCode</methodname> is not reprocessed as it has
          already been processed before.</para>

          <para>When running:</para>

          <programlisting>validator.validate(address, "total", "secondstep");</programlisting>

          <para><classname>NotEmpty</classname> from
          <methodname>city</methodname> and <classname>NotEmpty</classname>
          from <methodname>zipCode</methodname> will be processed even if
          <classname>Length</classname> from <methodname>street1</methodname>
          fails: while <literal>secondstep</literal> is in the
          <literal>total</literal> group sequence and hence should not be
          triggered if <literal>firststep</literal> has a failure, it also has
          been requested outside the sequence (in this case
          explicitly).</para>
        </section>
      </section>
    </section>

    <section id="validationapi-invalidconstraint">
      <title>InvalidConstraint</title>

      <para><classname>InvalidConstraint</classname> is the class describing a
      single constraint failure. An array of
      <classname>InvalidConstraint</classname> is returned from an object
      validation.</para>

      <programlisting>/**
 * Describe a constraint validation defect
 *
 * TODO add pointers to the metadata?
 *
 * @author Emmanuel Bernard
 */
public interface InvalidConstraint&lt;T&gt; {
    
    /**
     * Error message
     */
    String getMessage();

    /**
     * Root bean being validated
     */
<!--SCP perhaps getRootValue()?-->    T getRootBean();

    /**
     * Bean type being validated
     */
    Class getBeanClass();

    /**
     * The value failing to pass the constraint
     */
    Object getValue();

    /**
     * the property path to the value from &lt;code&gt;rootBean&lt;/code&gt;
     * Null if the value is the rootBean itself
     */
    String getPropertyPath();

    /**
     * return the list of groups that the triggered constraint applies on and which also are
     * within the list of groups requested for validation 
     * (directly or through a group sequence)
     * TODO: considering removal, if you think it's important, speak up
     */
    String[] getGroups();
}</programlisting>

      <para>The <methodname>getMessage</methodname> method returns the
      expanded (localized) message for the failing constraint (See <xref
      linkend="validationapi-message" /> for more information on message
      expansion).</para>

      <para>The <methodname>getRootBean</methodname> method returns the root
      object being validated that leaded to the failing constraint (i.e. the
      object the client code passed to the
      <methodname>Validator.validate</methodname> method.</para>

      <para>The <methodname>getBeanClass</methodname> method returns the type
      of the current bean being validated and leading to the failure.</para>

      <para>The <methodname>getValue</methodname> method returns the value
      (field, property or validated object) being passed to
      <methodname>isValid</methodname> and returning false.</para>

      <para>The <methodname>getPropertyPath</methodname> is defined by the
      following rules:</para>

      <itemizedlist>
        <listitem>
          <para>if the constraint is a class level constraint, then the empty
          string is used</para>
        </listitem>

        <listitem>
          <para>if the constraint is a field level constraint, the field name
          is the propertyPath</para>
        </listitem>

        <listitem>
          <para>if the constraint is a property, the JavaBeans property name
          (as defined by the JavaBeans Introspector class) is the
          propertyPath</para>
        </listitem>

        <listitem>
          <para>if an associated object is validated, add the association
          field or JavaBeans property name and a dot ('.') as a prefix to the
          previous rules. This rule is recursive.</para>

          <!--SCP: Need to decide what to do here when terminal is class. Trailing dot?
EBE rule #1 addresses that or am I off base?-->
        </listitem>
      </itemizedlist>

      <note>
        <para>From <methodname>rootBean</methodname> and
        <methodname>propertyPath</methodname>, it is possible to rebuild the
        context of the failure</para>
      </note>

      <para><methodname>groups</methodname> returns the intersection of the
      groups the triggered constraint applies on and the groups requested for
      validation.</para>

      <!--EBE: this notion is quite vague with the recursive group sequence-->

      <section>
        <title>Example</title>

        <programlisting>public class Author {
    private String firstName;
    
    @NotEmpty(message="lastname must not be null")
    private String lastName;

    @Length(max=30)
    private String company;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        this.company = company;
    }
}

public class Book {
    @NotEmpty(groups={"firstlevelcheck", "default"})
    private String title;

    @Valid
    @NotNull
    private Author author;

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Author getAuthor() {
        return author;
    }

    public void setAuthor(Author author) {
        this.author = author;
    }
}

Author author = new Author();
author.setCompany("ACME");
Book book = new Book();
book.setTitle("");
book.setAuthor(author);

Set&lt;InvalidConstraint&gt; invalidConstraints = validator.validate(book);</programlisting>

        <para><classname>invalidConstraints</classname> is a set of size 2.
        One of the entries represents the failure of
        <literal>NotEmpty</literal> on the <literal>title</literal>
        property.</para>

        <para>The <classname>invalidConstraint</classname> object for this
        failure passes the following assertions:</para>

        <programlisting>//assuming an english locale, the interpolated message is returned
assert "may not be null or empty".equals( invalidConstraint.getMessage() );
assert book == invalidConstraint.getRootBean();
assert Book.class == invalidConstraint.getBeanClass();
//the offending value
assert book.getTitle().equals( invalidConstraint.getValue() );
//the offending property
assert "title".equals( invalidConstraint.getPropertyPath() );
assert invalidConstraint.getGroups().length == 1

List expectedGroups = new ArrayList(1);
expectedGroups.add("default");
for ( String group : invalidConstraint.getGroups() ) {
    assert expectedGroups.contains(group);
}</programlisting>

        <para>The second failure, <literal>NotEmpty</literal> on the author's
        <methodname>lastname</methodname>, will produce the following
        <classname>InvalidConstraint</classname> object:</para>

        <programlisting>assert "lastname must not be null".equals( invalidConstraint.getMessage() );
assert book == invalidConstraint.getRootBean();
assert Author.class == invalidConstraint.getBeanClass();
//the offending value
assert book.getAuthor().getLastName() == invalidConstraint.getValue();
//the offending property
assert "author.lastName".equals( invalidConstraint.getPropertyPath() );
assert invalidConstraint.getGroups().length == 0</programlisting>
      </section>
    </section>

    <section id="validationapi-message">
      <title>Message resolution</title>

      <section id="default-messageresolver">
        <title>Default message resolution</title>

        <para>A conforming implementation includes a default message resolver.
        This message resolver shall use the algorithm defined here to resolve
        message descriptors into human-readable messages.</para>

        <para>Each constraint defines a message descriptor via its
        <methodname>message</methodname> property. Every constraint definition
        shall define a default message descriptor for that constraint. A
        particular use of a constraint can override the default message
        descriptor of the constraint by setting the
        <methodname>message</methodname> property on the constraint.</para>

        <para>The message descriptor is a string literal and may contain one
        or more message parameters. Message parameters are string literals
        enclosed in braces.<!--SCP need to define the string literal here--></para>

        <section id="default-resolution-algorithm">
          <title>Algorithm</title>

          <para>The default message resolver begins by retrieving the message
          descriptor from the constraint. Message parameters are then replaced
          by repeatedly executing the steps listed below until no replacements
          are performed.</para>

          <!--SCP: Do we want to allow MessageFormat style formatting here?-->

          <orderedlist>
            <listitem>
              <para>A message parameter that matches the name of a property of
              the constraint declaration is replaced by the value of that
              property.</para>

              <!--SCP: The {value} message parameter is replaced by the value being validated, using the result of invoking the toString method onvalue. 
If the value being valudated is null, the string 'null' is used as a replacement string
EBE: hummm, relying on toString sucks. Not sure I like the {value} idea. and it conflicts with value the default annotation name-->
            </listitem>

            <listitem>
              <para>The message parameter is used as a key to search the
              <classname>ResourceBundle</classname> named
              <literal>ValidationMessage</literal> (often materialized as the
              property file
              <filename>/ValidationMessages.properties</filename> and its
              locale variations). If a property is found, the message
              parameter is replaced with the property.</para>
            </listitem>

            <listitem>
              <para>The message parameter is used as a key to search the
              default message resolver's built-in message properties. If a
              property is found, the message parameter is replaced with the
              property.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>

      <section id="custom-message-resolution">
        <title>Custom message resolution</title>

        <para>A custom message resolver may be provided (e.g., to resolve
        contextual data, or to adjust the Locale used). A message resolver
        implements the <classname>MessageResolver</classname>
        interface.</para>

        <programlisting>/**
* Interpolate a given validation message
*
* @author Emmanuel Bernard
*/
public interface MessageResolver {
    /**
     * Generate a display message based on the constraint and its parameters.
     */
    String interpolate(String message, 
                       ConstraintDescriptor constraintDescriptor, 
                       Object value);
}</programlisting>

        <para><parameter>message</parameter> is the message descriptor as seen
        in <literal>@Annotation.message</literal></para>

        <para><parameter>constraintDescriptor</parameter> is the
        <classname>ConstraintDescriptor</classname> object representing the
        metadata of the failing constraint (see <xref
        linkend="constraintmetadata" />).</para>

        <para><parameter>value</parameter> is the value being
        validated.</para>

        <para><methodname>MessageResolver.interpolate()</methodname> is
        invoked once for each constraint whose isValid() method returns
        false.</para>

        <para>A message resolver implementation shall be threadsafe.</para>

        <para>The message resolver is injected to the validator instance
        through
        <methodname>validator.setMessageResolver(MessageResolver)</methodname>.</para>

        <!--SCP: should we support per-invocation message resolver override?-->
      </section>

      <section>
        <title>Examples</title>

        <para>These examples describe message interpolation based on the
        default message resolver's built-in messages (see <xref
        linkend="standard-resolver-messages" />), and the
        <filename>ValidationMessages.properties</filename> file shown in table
        . The current locale is assumed English.</para>

        <programlisting>//ValidationMessages.properties
myapp.creditcard.error=Your credit card number is not valid</programlisting>

        <para></para>

        <table>
          <title>message interpolation</title>

          <tgroup cols="2">
            <colspec align="center" />

            <tbody>
              <row>
                <entry>Failing constraint declaration</entry>

                <entry>interpolated message</entry>
              </row>

              <row>
                <entry>@NotNull</entry>

                <entry>may not be null</entry>
              </row>

              <row>
                <entry>@Max(30)</entry>

                <entry>must be less than or equal to 30</entry>
              </row>

              <row>
                <entry>@Length(min=5, max=15, message="Key must have between
                {min} and {max} characters")</entry>

                <entry>Key must have between 5 and 15 characters</entry>
              </row>

              <row>
                <entry>@Range(min=4, max=40)</entry>

                <entry>must be between 4 and 40</entry>
              </row>

              <row>
                <entry>@CreditCard(message={myapp.creditcard.error})</entry>

                <entry>Your credit card number is not valid</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <!--SCP: add example of {value} here. Add use of MessageFormat style formatting-->
      </section>
    </section>

    <section>
      <title>Bootstrapping</title>

      <para>The bootstrapping API aims at providing a
      <classname>ValidatorFactory</classname> object which is used to create
      <classname>Validator</classname> instances. The bootstrap process is
      decoupled from the provider implementation initialization: a bootstrap
      implementation must be able to bootstrap any Bean Validation provider
      implementation. The bootstrap sequence has been designed to achieve
      several goals:</para>

      <itemizedlist>
        <listitem>
          <para>plug multiple implementations</para>
        </listitem>

        <listitem>
          <para>choose a specific implementation</para>
        </listitem>

        <listitem>
          <para>extensibility: an application using a specific provider
          implementation can use specific configurations</para>
        </listitem>

        <listitem>
          <para>share and reuse of metadata across validators</para>
        </listitem>

        <listitem>
          <para>leave as much freedom as possible to implementations</para>
        </listitem>

        <listitem>
          <para>provide integration mechanisms to Java EE 5 and other
          containers</para>
        </listitem>

        <listitem>
          <para>type safety</para>
        </listitem>
      </itemizedlist>

      <para>The main artifacts involved in the bootstrap process are:</para>

      <itemizedlist>
        <listitem>
          <para><classname>Validation</classname>: API entry point. Let's you
          optionally define the Bean Validation provider targeted as well as a
          provider resolution strategy. Validation generates
          <classname>ValidatorBuilder</classname> objects and can bootstrap
          any provider implementation.</para>
        </listitem>

        <listitem>
          <para><classname>ValidationProvider</classname>: contract between
          the bootstrap procedure and a Bean Validation provider
          implementation.</para>
        </listitem>

        <listitem>
          <para><classname>ValidationProviderResolver</classname>: returns a
          list of all Bean Validation providers available in the execution
          context (generally the classpath).</para>
        </listitem>

        <listitem>
          <para><classname>ValidatorBuilder</classname>: collects the
          configuration details that will be used to build
          <classname>ValidatorFactory</classname>. A specific sub interface of
          <classname>ValidatorBuilder</classname> must be provided by Bean
          Validation providers as a unique identifier. This sub interface
          typically hosts provider specific configurations.</para>
        </listitem>

        <listitem>
          <para><classname>ValidatorFactory</classname>: result of the
          bootstrap process. Build <classname>Validator</classname> instances
          from a given Bean Validation provider.</para>
        </listitem>
      </itemizedlist>

      <para>Let's first see the API in action through some examples before
      diving into the concrete definitions.</para>

      <section>
        <title>Examples</title>

        <para>The most simple approach is to use the default Bean Validation
        provider or the one defined in the XML configuration file. The
        bootstrap entry point returns a generic
        <classname>ValidationBuilder</classname> instance on which we apply
        the build operation. The <classname>ValidatorFactory</classname> is
        then ready to provide <classname>Validator</classname>
        instances.</para>

        <example>
          <title>Simple Bean Validation bootstrap sequence</title>

          <programlisting>ValidatorFactory factory = Validation.getValidatorBuilder().build();

//cache the factory somewhere
Validator&lt;Address&gt; addressValidator = factory.getValidator(Address.class);</programlisting>
        </example>

        <para>The <classname>ValidatorFactory</classname> object is
        thread-safe contrary to individual <classname>Validator</classname>s.
        Building <classname>Validator</classname> instances is typically a
        cheap operation. Building a <classname>ValidatorFactory</classname> is
        typically more expensive. Make sure to check your Bean Validation
        implementation documentation for more accurate details.</para>

        <para>The second example shows how a container can customize some Bean
        Validator resource handling to match its own behavior.</para>

        <example>
          <title>Customize message resolution and constraint factory
          implementation</title>

          <programlisting>//some customization from a container like Web Beans
ValidatorFactory factory = Validation
       .getValidatorBuilder()
          .messageResolver( new WBMessageResolver() )
          .constraintFactory( new WBComponentConstraintFactory() )
          .build();

//cache the factory somewhere
Validator&lt;Address&gt; addressValidator = factory.getValidator(Address.class);</programlisting>
        </example>

        <para>The third example shows how to bootstrap Bean Validation in an
        environment not following the traditional Java classloader strategies
        (such as tools or alternative service containers like OSGi). They can
        provider some alternative provider resolution strategy to discover
        Bean Validation providers.</para>

        <example>
          <title>Customize the Bean Validation provider resolution
          mechanism</title>

          <programlisting>//osgi environment
ValidatorFactory factory = Validation
       .defineBootstrapState()
          .providerResolver( new OSGiServiceDiscoverer() )
          .build();

//cache the factory somewhere
Validator&lt;Address&gt; addressValidator = factory.getValidator(Address.class);</programlisting>
        </example>

        <para>The last example shows how a client can choose a specific Bean
        Validation provider and configure provider specific properties
        programmatically in a type-safe way.</para>

        <example>
          <title>Use a specific provider and add specific
          configuration</title>

          <programlisting>ValidatorFactory factory = Validation
       .builderType( ACMEValidatorBuilder.class )
       .getValidatorBuilder()
          .messageResolver( new ACMEMessageResolver() ) //default configuration option
          .addConstaint(Address.class, customConstraintDescriptor) //specific configuration option
          .build();

//same initialization breaking the chaining method use
ACMEValidatorBuilder acmeBuilder = Validation
       .builderType( ACMEValidatorBuilder.class )
       .getValidatorBuilder();

ValidatorFactory factory = acmeBuilder
          .messageResolver( new ACMEMessageResolver() ) //default configuration option
          .addConstaint(Address.class, customConstraintDescriptor) //specific configuration option
          .build();</programlisting>
        </example>

        <para>We will now explore the various interfaces, their constraints
        and usage. We will go from the <classname>ValidatorFactory</classname>
        to the <classname>Validation</classname> class walking up the
        bootstrap chain.</para>
      </section>

      <section>
        <title>ValidatorFactory</title>

        <para><classname>ValidatorFactory</classname> objects build and
        provide initialized instances of
        <classname>Validator&lt;T&gt;</classname> to Bean Validation clients.
        Clients should cache <classname>ValidatorFactory</classname> objects
        and reuse them for optimal performances. The API is designed to allow
        implementors to share constraint metadata in
        <classname>ValidatorFactory</classname>.</para>

        <para><classname>ValidatorFactory</classname> implementations must be
        thread-safe (which is not the case of
        <classname>Validator</classname>).
        <classname>ValidatorFactory</classname> implementations are allowed to
        cache and return the same <classname>Validator</classname> instances.
        Thread safety must be guaranteed to Bean Validation clients as long as
        they use <classname>Validator</classname> instances coming from the
        same <methodname>ValidatorFactory.getValidator(Class)</methodname>
        call in a non concurrent way.</para>

        <example>
          <title>ValidatorFactory interface</title>

          <programlisting>/**
 * Factory returning initialized Validator instances.
 * Implementations are thread-safe
 * This object is typically cached and reused.
 *
 * @author Emmanuel Bernard
 */
public interface ValidatorFactory {
    /**
     * return an initialized Validator instance for the specific class.
     * Validator instances can be pooled and shared by the implementation
     * In this scenario, the implementation must return thread-safe Validator implementations
     *
     */
    &lt;T&gt; Validator&lt;T&gt; getValidator(Class&lt;T&gt; clazz);
}</programlisting>
        </example>

        <para>A <classname>ValidatorFactory</classname> is provided by a
        <classname>ValidatorBuilder</classname>.</para>
      </section>

      <section>
        <title>ValidatorBuilder</title>

        <para><classname>ValidatorBuilder</classname> collects configuration
        informations, determines the correct provider implementation and
        delegates it the <classname>ValidatorFactory</classname> creation.
        This class lets you define:</para>

        <itemizedlist>
          <listitem>
            <para>the message resolver strategy instance</para>
          </listitem>

          <listitem>
            <para>the constraint factory instance</para>
          </listitem>

          <listitem>
            <para>the configuration <classname>InputStream</classname></para>
          </listitem>
        </itemizedlist>

        <para>Clients call <methodname>ValidatorBuilder.build()</methodname>
        to retrieve the initialized <classname>ValidatorFactory</classname>
        instance.</para>

        <example>
          <title>ValidatorBuilder interface</title>

          <programlisting>/**
 * Receives configuration information, selects the appropriate
 * Bean Validation provider and build the appropriate
 * ValidatorFactory.
 *
 * The provider is selected in the following way:
 *  - if a specific ValidatorBuilder subclass is requested programmatically using Validation.builderType(), 
 * find the first provider matching it
 *  - if a specific ValidatorBuilder subclass is defined in META-INF/validation.xml, 
 * find the first provider matching it/**
 * Receives configuration information, selects the appropriate
 * Bean Validation provider and build the appropriate
 * ValidatorFactory.
 *
 * Usage:
 * &lt;pre&gt;
 * ValidatorBuilder&lt;?&gt; validatorBuilder = //provided by one of the Validation bootstrap methods
 * ValidatorFactory = validatorBuilder
 *         .messageResolver( new CustomMessageResolver() )
 *         .build();
 * &lt;/pre&gt;
 *
 * The ValidationProviderResolver is specified at ValidatorBuilder time (see {@link javax.validation.spi.ValidationProvider}).
 * If none is explicitely requested, the default ValidationProviderResolver is used.
 *
 * The provider is selected in the following way:
 *  - if a specific ValidatorBuilder subclass is requested programmatically using Validation.builderType(),
 * find the first provider matching it
 *  - if a specific ValidatorBuilder subclass is defined in META-INF/validation.xml,
 * find the first provider matching it
 *  - otherwise, use the first provider returned by the ValidationProviderResolver
 *
 * Implementations are not meant to be thread safe
 *
 * @author Emmanuel Bernard
 */
public interface ValidatorBuilder&lt;T extends ValidatorBuilder&gt; {
    /**
     * Defines the message resolver used. Has priority over the configuration based message resolver.
     *
     * @param resolver message resolver implementation.
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern.
     */
    T messageResolver(MessageResolver resolver);

    /**
     * Defines the constraint factory. Has priority over the configuration based constraint factory.
     *
     * @param constraintFactory constraint factory inmplementation.
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern.
     */
    T constraintFactory(ConstraintFactory constraintFactory);

    /**
     * Configure the ValidatorFactory based on &lt;code&gt;stream&lt;/code&gt;
     * If not specified, META-INF/validation.xml is used
     *
     * The stream should be closed by the client API after the ValidatorFactory has been returned
     *
     * @param stream configuration stream.
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern.
     */
    T configure(InputStream stream);

    /**
     * Build a ValidatorFactory implementation.
     *
     * @return ValidatorFactory
     */
    ValidatorFactory build();
}</programlisting>
        </example>

        <para>A Bean Validation provider must define a sub interface of
        <classname>ValidatorBuilder</classname> uniquely identifying the
        provider. Its <classname>ValidationProvider</classname> implementation
        must return true when this sub interface type is passed as a
        parameter, false otherwise. The
        <classname>ValidatorBuilder</classname> sub interface typically hosts
        provider specific configuration methods.</para>

        <para>To facilitate the use of provider specific configuration
        methods, <classname>ValidatorBuilder</classname> uses generics:
        <classname>ValidatorBuilder&lt;T extends
        ValidatorBuilder&lt;T&gt;&gt;</classname> ; the generic return type
        <classname>T</classname> is returned by chaining methods. The provider
        specific sub interface must resolve the generic T as itself as shown
        in the following example.</para>

        <example>
          <title>Example of provider specific ValidatorBuilder sub
          interface</title>

          <programlisting>/**
 * Unique identifier of the ACME provider
 * also host some provider specific configuration methods
 *
 * @author Emmanuel Bernard
 */
public interface ACMEValidatorBuilder 
    extends ValidatorBuilder&lt;ACMEValidatorBuilder&gt; {

    /**
     * Enables contraints implementation dynamic reloading when using ACME
     * default to false
     */
    ACMEValidatorBuilder enableDynamicReloading(boolean);

}</programlisting>
        </example>

        <para>When <methodname>ValidatorBuilder.build()</methodname> is
        called, the requested Bean Validation provider is determined and the
        the result of
        <code>validationProvider.buildValidatorFactory(ValidatorBuilderImplementor)</code>
        is returned. <classname>ValidatorBuilderImplementor</classname> gives
        access to the configuration artifacts passed to
        <classname>ValidatorBuilder</classname>. A typical implementation of
        <classname>ValidatorBuilder</classname> also implements
        <classname>ValidatorBuilderImplementor</classname>, hence
        <code>this</code> can be passed to
        <methodname>buildValidatorFactory(ValidatorBuilderImplementor)</methodname>.<!--talk about extensibility--></para>

        <example>
          <title>ValidatorBuilderImplementor interface</title>

          <programlisting>/**
 * Contract between a &lt;code&gt;ValidationBuilder&lt;/code&gt; and a &lt;/code&gt;ValidatorProvider&lt;/code&gt; to create
 * a &lt;code&gt;ValidatorFactory&lt;/code&gt;.
 * The configuration artifacts provided to the &lt;code&gt;ValidationBuilder&lt;/code&gt; are passed along.
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface ValidatorBuilderImplementor {
    /**
     * Message resolver as defined by the client programmatically
     * or null if undefined.
     *
     * @return message provider instance or null if not defined
     */
    MessageResolver getMessageResolver();

    /**
     * Returns the configuration stream defined by the client programmatically
     * or null if undefined.
     *
     * @return the configuration input stream or null
     */
    InputStream getConfigurationStream();

    /**
     * Defines the constraint implementation factory as defined by the client programmatically
     * or null if undefined
     *
     * @return factory instance or null if not defined
     */
    ConstraintFactory getConstraintFactory();
}</programlisting>
        </example>

        <para>The correct provider implementation is resolved according to the
        following rules in the following order:</para>

        <itemizedlist>
          <listitem>
            <para>Use the provider implementation requested if
            <classname>ValidatorBuilder</classname> has been created from
            <classname>Validation.builderType(Class).build()</classname>.</para>
          </listitem>

          <listitem>
            <para>Use the provider implementation associated with the
            <classname>ValidatorBuilder</classname> implementation described
            in the XML configuration (under
            <literal>validation.provider</literal>) if defined: the value of
            this element is the fully qualified class name of the
            <classname>ValidationBuilder</classname> sub interface uniquely
            identifying the provider.</para>
          </listitem>

          <listitem>
            <para>Use the first provider implementation returned by
            <classname>validationProviderResolver.getValidationProviders()</classname>.</para>
          </listitem>
        </itemizedlist>

        <para>The <classname>ValidationProviderResolver</classname> is
        specified when <classname>ValidatorBuilder</classname> are created
        (see <classname>ValidationProvider</classname>). If no
        <classname>ValidationProviderResolver</classname> instance has been
        specified, the default
        <classname>ValidationProviderResolver</classname> is used.</para>

        <para><classname>ValidatorBuilder</classname> instances are provided
        to the Bean Validation client through one of
        <classname>Validation</classname> methods.
        <classname>ValidatorBuilder</classname> instances are created by
        <classname>ValidationProvider</classname>.</para>

        <warning>
          <para>Should we add a ignore XML method? to bypass the XMl file
          configuration?</para>
        </warning>
      </section>

      <section>
        <title>ValidationProvider and ValidationProviderResolver</title>

        <para><classname>ValidationProvider</classname> is the contract
        between the bootstrap process and a Bean Validation provider.
        <classname>ValidationProviderResolver</classname> can be implemented
        by any Bean Validation client but is typically implemented by
        containers having specific classloader structures and
        restrictions.</para>

        <section>
          <title>ValidationProviderResolver</title>

          <para><classname>ValidationProviderResolver</classname> returns the
          list of Bean Validation providers available at runtime and more
          specifically a <classname>ValidationProvider</classname> instance
          for each provider available in the context. This service can be
          customized by implementing
          <classname>ValidationProviderResolver</classname>. Implementations
          must be thread-safe.</para>

          <example>
            <title>ValidationProviderResolver</title>

            <programlisting>/**
 * Determine the list of Bean Validation providers available in the runtime environment
 * &lt;p&gt;
 * Bean Validation providers are identified by the presence of META-INF/services/javax.validation.spi.ValidationProvider
 * files following the Service Provider pattern described
 * &lt;a href="http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider"&gt;here&lt;/a&gt;
 * &lt;p/&gt;
 * Each META-INF/services/javax.validation.spi.ValidationProvider file contains the list of
 * ValidationProvider implementations each of them representing a provider.
 *
 * Implementations must be thread-safe.
 *
 * @author Emmanuel Bernard
 */
public interface ValidationProviderResolver {
    /**
     * Returns a list of ValidationProviders available in the runtime environment.
     *
     * @return list of validation providers.
     */
    List&lt;ValidationProvider&gt; getValidationProviders();
}</programlisting>
          </example>

          <para>By default, providers are resolved using the Service Provider
          pattern described in <ulink
          url="http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider">http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider</ulink>.
          Each Bean Validation provider should supply a service provider
          configuration file by creating a text file name
          <filename>javax.validation.spi.ValidationProvider</filename> and
          placing it in the <filename>META-INF/services</filename> directory
          of one of its jar files. The content of the the file should be the
          name of the provider implementation class of the
          <classname>javax.validation.spi.ValidationProvider</classname>
          interface.</para>

          <para>Persistence provider jars may be installed or made available
          in the same ways as other service providers, e.g. as extensions or
          added to the application classpath according to the guidelines in
          the JAR file speciﬁcation.</para>

          <para>The default <classname>ValidationProviderResolver</classname>
          implementation will locate all the Bean Validation providers by
          their provider configuration files visible in the classpath. The
          default <classname>ValidationProviderResolver</classname>
          implementation is recommended and custom
          <classname>ValidationProviderResolver</classname> implementations
          should be rarely used. A typical use of a custom resolution is
          resolving providers in a classloader constrained container like OSGi
          or in a tool environment (IDE).</para>

          <para>The default implementation of
          <classname>ValidationProviderResolver</classname> must be available
          at
          <classname>javax.validation.bootstrap.DefaultValidationProviderResolver</classname>.
          It must contain a public no-arg constructor and must not have any
          other non private attribute or method besides the method described
          by <classname>ValidationProviderResolver</classname>.</para>
        </section>

        <section>
          <title>ValidationProvider</title>

          <para><classname>ValidationProvider</classname> represents the SPI
          (Service Provider Interface) defining the contract between the
          provider discovery mechanism and initialization and the provider. A
          <classname>ValidationProvider</classname> does:</para>

          <itemizedlist>
            <listitem>
              <para>Determine if a provider matches a given
              <classname>ValidatorBuilder</classname> sub interface. One
              <classname>ValidatorBuilder</classname> sub interface
              specifically represent one Bean Validation provider.</para>
            </listitem>

            <listitem>
              <para>Provide a provider specific
              <classname>ValidatorBuilder</classname> implementation. This
              <classname>ValidatorBuilder</classname> will specifically build
              <classname>ValidatorFactory</classname> though the provider it
              comes from.</para>
            </listitem>

            <listitem>
              <para>Build a <classname>ValidatorFactory</classname> object
              from the configuration provided by
              <classname>ValidatorBuilder</classname>.</para>
            </listitem>
          </itemizedlist>

          <example>
            <title>ValidationProvider</title>

            <programlisting>/**
 * Contract between the validation bootstrap mechanism and the provider engine.
 *
 * Implementations must have a public no-arg constructor. The construction of a provider should be
 * as "lightweight" as possible. 
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface ValidationProvider {
    /**
     * @param builderClass targeted builder class.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;builderClass&lt;/code&gt; is the 
     *         Bean Validation Provider sub interface for ValidatorBuilder
     *         This sub interface uniquely identify a provider.
     */
    boolean isSuitable(Class&lt;? extends ValidatorBuilder&lt;?&gt;&gt; builderClass);

    /**
     * Returns a ValidatorBuilder instance implementing the &lt;code&gt;builderType&lt;/code&gt; interface.
     * The ValidatorBuilder instance uses the current provider to build
     * the ValidatorFactory instance.
     *
     * @param builderClass the Builder class type
     *
     * @param state bootstrap state
     * @return specific validator builder implementation
     */
    &lt;T extends ValidatorBuilder&lt;T&gt;&gt; T createSpecializedValidatorBuilder(BootstrapState state, Class&lt;T&gt; builderClass);

    /**
     * Returns a ValidatorBuilder instance. This instance is not bound to
     * use the current provider. The choice of provider follows the algorithm described
     * in {@link javax.validation.ValidatorBuilder}
     * The ValidationProviderResolver used is provided by &lt;code&gt;state&lt;/code&gt;.
     * If null, the default ValidationProviderResolver is used.
     *
     * @param state bootstrap state
     *
     * @return validator builder implementation
     */
    ValidatorBuilder&lt;?&gt; createGenericValidatorBuilder(BootstrapState state);

    /**
     * Build a ValidatorFactory using the current provider implementation. The ValidationFactory
     * is assembled and follow the configuration passed using ValidatorBuilderImplementor.
     * &lt;p&gt;
     * The returned ValidatorFactory is properly initialized and ready for use.
     * &lt;/p&gt;
     *
     * @param configuration the configuration descriptor
     *
     * @return the instanciated ValidatorFactory
     */
    ValidatorFactory buildValidatorFactory(ValidatorBuilderImplementor configuration);
}</programlisting>
          </example>

          <example>
            <title>BootstrapState interface</title>

            <programlisting>/**
 * Defines the state used to bootstrap the ValidationBuilder
 *
 * @author Emmanuel Bernard
 */
public interface BootstrapState {
    /**
     * returns the user defined ValidationProviderResolver strategy instance or null if undefined
     *
     * @return ValidationProviderResolver instance or null
     */
    ValidationProviderResolver getValidationProviderResolver();
}</programlisting>
          </example>

          <para>A client can request a specific Bean Validation provider by
          using <classname>Validation.builderType(Class&lt;T exptends
          ValidatorBuilder&lt;T&gt;&gt;)</classname> or by defining the
          provider in the XML configuration file. The key uniquely identifying
          a Bean Validation provider is a provider specific sub interface of
          <classname>ValidatorBuilder</classname>. The sub interface does not
          have to add any new method but is the natural holder of provider
          specific methods.</para>

          <example>
            <title>Example of provider specific ValidationBuilder sub
            interface</title>

            <programlisting>/**
 * Unique identifier of the ACME provider
 * also host some provider specific configuration methods
 *
 * @author Emmanuel Bernard
 */
public interface ACMEValidatorBuilder 
    extends ValidatorBuilder&lt;ACMEValidatorBuilder&gt; {

    /**
     * Enables contraints implementation dynamic reloading when using ACME
     * default to false
     */
    ACMEValidatorBuilder enableDynamicReloading(boolean);

}</programlisting>
          </example>

          <note>
            <para><classname>ACMEValidatorBuilder</classname> references
            itself in the generic definition. Methods of
            <classname>ValidatorBuilder</classname> will return the
            <classname>ACMEValidatorBuilder</classname> making the API easy to
            use even for vendor specific extensions.</para>
          </note>

          <para>The provider discovery mechanism uses the following
          algorithm:</para>

          <itemizedlist>
            <listitem>
              <para>Retrieve available providers using
              <methodname>ValidationProviderResolver.getValidationProviders()</methodname>.</para>
            </listitem>

            <listitem>
              <para>The first <classname>ValidationProvider</classname>
              matching the requested provider is returned. Providers are
              evaluated in the order they are provided by
              <classname>ValidationProviderResolver</classname>. A provider is
              considered matching if
              <methodname>ValidationProvider.isSuitable(Class&lt;T extends
              ValidatorBuilder&lt;T&gt;&gt;)</methodname> returns true when
              the requested provider specific
              <classname>ValidationBuilder</classname> sub interface is passed
              as a parameter.</para>
            </listitem>
          </itemizedlist>

          <para>When the default Bean Validation provider is requested, the
          first <classname>ValidationProvider</classname> returned by the
          <classname>ValidationProviderResolver</classname> strategy is
          returned.</para>

          <para>Every Bean Validation provider must provide a
          <classname>ValidationProvider</classname> implementation containing
          a public no-arg constructor and add the corresponding
          <filename>META-INF/services/javax.validation.spi.ValidationProvider</filename>
          file descriptor in one of its jars.</para>
        </section>
      </section>

      <section>
        <title>Validation</title>

        <para>The <classname>Validation</classname> class is the entry point
        used to bootstrap Bean Validation providers. The first entry point,
        <methodname>getValidatorBuilder()</methodname>, returns a
        <classname>ValidatorBuilder</classname> not tied to any provider
        implementation. The first provider returned by the default
        <classname>ValidationProviderResolver</classname> is used to build the
        <classname>ValidationBuilder</classname>.
        <code>Validation.getValidatorBuilder()</code> is equivalent to
        <code>Validation.defineBootstrapState().getValidatorBuilder()</code>.</para>

        <warning>
          <para>Should the resolver strategy be configurable by XML</para>
        </warning>

        <example>
          <title>Validation methods available</title>

          <programlisting>/**
 * Bean Validation bootstrap class. This class has two bootstrap strategies.
 *
 * The firt bootstrap approach selects programmatically the specific provider
 * requested and build the corresponding ValidatorFactory.
 *
 * The second bootstrap approach does not select any provider. The chosen provider is then
 * either the one defined in the Validation XML configuration file or the default
 * Validation Provider.
 *
 * The ValidatorFactory object built by the bootstrap process should be cached and shared amongst
 * Validator consumers.
 *
 * This class is thread-safe.
 *
 * @author Emmanuel Bernard
 * @author Hardy Feretnschik
 */
public class Validation {
    public class Validation {

    /**
     * Build a ValidatorBuilder defering the provider choice for later
     * (XML configuration file or default provider)
     *
     * The provider list is resolved using the default strategy.
     *
     * @return ValidatorBuilder instance
     */
    public static ValidatorBuilder&lt;?&gt; getValidatorBuilder() { ... }

    /**
     * Build a generic ValidatorBuilder deferring the provider choice for later
     * (XML configuration file or default provider)
     *
     * &lt;pre&gt;
     * ValidatorBuilder&lt;?&gt; builder = Validation.builderType(ACMEValidatorBuilder.class)
     *     .providerResolver( new MyResolverStrategy() )
     *     .build();
     * &lt;/pre&gt;
     *
     * The provider list is resolved using the strategy provided to the bootstrap state.
     *
     * @return instance building a generic ValidatorBuilder compliant with the bootstrap state provided.
     */
    public static GenericBuilderFactory defineBootstrapState() { ... }

    /**
     * Build a &lt;code&gt;ValidatorBuilder&lt;/code&gt; for a particular provider implementation.
     * Optionally override the provider resolution strategy used to determine the provider.
     * &lt;p/&gt;
     * Used by applications targeting a specific provider programmatically.
     * &lt;p/&gt;
     * &lt;pre&gt;
     * ACMEValidatorBuilder builder = Validation.builderType(ACMEValidatorBuilder.class)
     *     .providerResolver( new MyResolverStrategy() )
     *     .build();
     * &lt;/pre&gt;
     *
     * Where &lt;code&gt;ACMEValidatorBuilder&lt;/code&gt; is the &lt;code&gt;ValidatorBuiler&lt;/code&gt; sub interface uniquely identifying
     * the ACME Bean Validation provider.
     *
     * @param builderType the ValidatorBuilder sub interface uniquely defining the targeted provider.
     *
     * @return instance building a provider specific ValidatorBuilder sub interface implementation.
     *
     * @see #getValidatorBuilder()
     */
    public static &lt;T extends ValidatorBuilder&lt;T&gt;&gt; SpecializedBuilderFactory&lt;T&gt; 
            builderType(Class&lt;T&gt; builderType) { ... }
}</programlisting>
        </example>

        <para>The second entry point lets the client provide a custom
        <classname>ValidationProviderResolution</classname> instance. This
        instance is passed to <classname>GenericBuilderFactory</classname>.
        <classname>GenericBuilderFactory</classname> builds a generic
        <classname>ValidatorBuilder</classname> using the first
        <classname>ValidationProvider</classname> returned by
        <classname>ValidationProviderResolution</classname> and calling
        <code>ValidatorBuilder&lt;?&gt;
        createGenericValidatorBuilder(BootstrapState state)</code>.
        <classname>BootstrapState</classname> holds the
        <classname>ValidationProviderResolution</classname> instance passed to
        <classname>GenericBuilderFactory</classname> and will be used by the
        <classname>ValidatorBuilder</classname> instance when resolving the
        provider to use.</para>

        <example>
          <title>GenericBuilderFactory interface</title>

          <programlisting>/**
 * Defines the state used to bootstrap Bean Validation and create an appropriate
 * ValidatorBuilder
 *
 * @author Emmanuel Bernard
 */
public interface GenericBuilderFactory {
    /**
     * Defines the provider resolution strategy.
     * This resolver returns the list of providers evaluated
     * to build the ValidationBuilder
     *
     * If no resolver is defined, the default ValidationProviderResolver
     * implementation is used.
     *
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern
     */
    GenericBuilderFactory providerResolver(ValidationProviderResolver resolver);

    /**
     * Returns a generic ValidatorBuilder implementation.
     * At this stage the provider used to build the ValidationFactory is not defined.
     *
     * The ValidatorBuilder implementation is provided by the first provider returned
     * by the ValidationProviderResolver strategy.
     *
     * @return a ValidatorBuilder implementation compliant with the bootstrap state
     */
    ValidatorBuilder&lt;?&gt; getValidatorBuilder();
}</programlisting>
        </example>

        <para>The last entry point lets the client define the specific Bean
        Validation provider requested as well as a custom
        <classname>ValidationProviderResolver</classname> implementation if
        needed. The entry point method, <methodname>builderType(Class&lt;T&gt;
        builderType)</methodname>, takes the provider specific
        <classname>ValidationBuilder</classname> sub interface type and
        returns a <classname>SpecializedBuilderFactory</classname> object that
        guarantees to return an instance of the specific
        <classname>ValidationBuilder</classname> sub interface. Thanks to the
        use of generics, the client API does not have to cast to the
        <classname>ValidatorBuilder</classname> sub interface.</para>

        <para>A <classname>SpecializedBuilderFactory</classname> object can
        optionally receive a <classname>ValidationProviderResolver</classname>
        instance.</para>

        <example>
          <title>SpecializedBuilderFactory interface</title>

          <programlisting>/**
 * Build implementations of builderType, the specific ValidationBuilder sub interface uniquely identifying
 * a provider.
 *
 * The requested provider is the first provider suitable for T (as defined in
 * {@link javax.validation.spi.ValidationProvider#isSuitable(Class)}). The list of providers evaluated is
 * returned by {@link ValidationProviderResolver}. If no ValidationProviderResolver is defined, the
 * default ValidationProviderResolver strategy is used. 
 *
 *
 * @author Emmanuel Bernard
 */
public interface SpecializedBuilderFactory&lt;T extends ValidatorBuilder&lt;T&gt;&gt; {

    /**
     * Optionally define the provider resolver implementation used.
     * If not defined, use the default ValidationProviderResolver
     *
     * @param resolver ValidationProviderResolver implementation used
     * @return self
     */
    public SpecializedBuilderFactory&lt;T&gt; providerResolver(ValidationProviderResolver resolver);

    /**
     * Determine the provider implementation suitable for builderType and delegate the creation
     * of this specific ValidatorBuilder subclass to the provider.
     *
     * @return a ValidatorBuilder sub interface implementation
     */
    public T getValidatorBuilder();
}</programlisting>
        </example>

        <para><methodname>SpecializedBuilderFactory.getValidatorBuilder()</methodname>
        must return the result of
        <methodname>ValidationProvider.createSpecializedValidatorBuilder(BootstrapState
        state, Class&lt;T extends ValidatorBuilder&lt;T&gt;&gt;)</methodname>.
        The state parameter holds the
        <classname>ValidationProviderResolver</classname> passed to
        <classname>SpecializedBuilderFactory</classname>. The builder type
        passed as a parameter is the builder type passed to
        <methodname>Validation.builderType(Class)</methodname>. The validation
        provider is selected from the builder type according to the algorithm
        described in (XX).</para>

        <para>The <classname>Validation</classname> implementation provided by
        the Bean Validation provider must not contain any non private
        attribute or method aside from the three public static bootstrap
        methods:</para>

        <itemizedlist>
          <listitem>
            <para><methodname>public static ValidatorBuilder&lt;?&gt;
            getValidatorBuilder()</methodname></para>
          </listitem>

          <listitem>
            <para><methodname>public static GenericBuilderFactory
            defineBootstrapState()</methodname></para>
          </listitem>

          <listitem>
            <para><methodname>public static &lt;T extends
            ValidatorBuilder&lt;T&gt;&gt; SpecializedBuilderFactory&lt;T&gt;
            builderType(Class&lt;T&gt; builderType)</methodname></para>
          </listitem>
        </itemizedlist>

        <para>The bootstrap API is designed to allow complete portability
        amongst Bean Validation provider implementations. The bootstrap
        implementation must ensure it can bootstrap third party
        providers.</para>
      </section>

      <section>
        <title>Usage</title>

        <para>The Bean Validation bootstrap API can be used directly by the
        application, through the use of a container or by framework in need
        for validation. In all cases, the following rules apply:</para>

        <itemizedlist>
          <listitem>
            <para><classname>ValidatorFactory</classname> is a thread-safe
            object that should be built once per deployment unit</para>
          </listitem>

          <listitem>
            <para><classname>Validator</classname> is not thread-safe and
            should not be short lived</para>
          </listitem>
        </itemizedlist>

        <para>Containers such as Java EE, Web Bean, dependency injection
        frameworks, component frameworks are encouraged to propose access to
        <classname>ValidatorFactory</classname> and
        <classname>Validator</classname> objects in a way that respects the
        following rules. For example, injection of
        <classname>Validator&lt;T&gt;</classname> should be possible.</para>
      </section>
    </section>
  </chapter>

  <chapter id="constraintmetadata" xreflabel="Constraint metadata request API">
    <title>Constraint metadata request APIs</title>

    <para>The Bean Validation specification provides a way to query the
    constraint repository. This API is expected to be used for tooling support
    as well as integration with other frameworks, libraries and JSRs. The Bean
    Validation specification aims to provide both a validation engine and a
    metadata repository for object constraints. Frameworks (EE or SE) in need
    for constraint definition, validation and metadata will be able to rely on
    the Bean Validation specification for these services avoiding any
    unnecessary duplication work from an application and infrastructure point
    of view.</para>

    <section>
      <title>Validator&lt;T&gt;</title>

      <para>The main API to access all metadata related to a given object is
      <classname>Validator&lt;T&gt;</classname> (see XX for more information
      on how to retrieve a <classname>Validator</classname> instance).</para>

      <para>A <classname>Validator&lt;T&gt;</classname> instance is the
      metadata repository for <parameter>T</parameter> classes. It is
      recommended to cache <classname>Validator&lt;T&gt;</classname>
      instances. The Bean Validation provider has to guarantee that
      concurrent, multi-threaded access to a
      <classname>Validator&lt;T&gt;</classname> implementation is safe.</para>

      <programlisting>/**
 * Validate a given object type
 * 
 * @author Emmanuel Bernard
 */
public interface Validator&lt;T&gt; {

    [...] //See 4.1

    /**
     * return true if at least one constraint declaration is present for the given bean
     * or if one property is marked for validation cascade
     */
    boolean hasConstraints();

    /**
     * return the class level constraints
     */
    ElementDescriptor getBeanConstraints();

    /**
     * return the property level constraints for a given propertyName
     * or null if either the property does not exist or has no constraint
     */
    ElementDescriptor getConstraintsForProperty(String propertyName);

    /**
     * return the property names having at least a constraint defined
     */
    Set&lt;String&gt; getValidatedProperties();<!--Add a method to return the GroupSequences-->
}</programlisting>

      <para><methodname>hasConstraints</methodname> returns true if the given
      <parameter>T</parameter> class has at least one constraint
      declared.</para>

      <para><methodname>getBeanConstraints</methodname> returns an
      <classname>ElementDescriptor</classname> object describing the bean
      level constraints (see <xref
      linkend="constraintdeclarationvalidationprocess-requirements-object" />).</para>

      <para><methodname>getConstraintsForProperty</methodname> returns an
      <classname>ElementDescriptor</classname> object describing the property
      level constraints (See <xref
      linkend="constraintdeclarationvalidationprocess-requirements-property" />).
      The property is uniquely identified by its name as per the JavaBeans
      convention: field level and getter level constraints of the given name
      are all returned.</para>

      <para><methodname>getValidatedProperties</methodname> returns the names
      of the bean properties having at least one constraint or being cascaded
      (<classname>@Valid</classname> annotation).</para>
    </section>

    <section>
      <title>ElementDescriptor</title>

      <para><classname>ElementDescriptor</classname> is the object used to
      describe the list of constraints for a given element (whether it be a
      field, a method or a class).</para>

      <programlisting>/**
 * Describes a validated element (class, field or property)
 * 
 * @author Emmanuel Bernard
 */
public interface ElementDescriptor {
    /**
     * Element type
     */
    ElementType getElementType();

    /**
     * statically defined returned type
     * //TODO should it be Type or even completly removed
     */
    Class getReturnType();

    /**
     * is the association cascaded
     */
    boolean isCascaded();

    /**
     * all the constraint descriptors for the given element
     */
    Set&lt;ConstraintDescriptor&gt; getConstraintDescriptors();

    /**
     * Property path from the root entity validated.
     * //FIXME there is a problem in describing cyclic dependencies
     */
    String getPropertyPath();

}</programlisting>

      <para><methodname>getElementType</methodname> returns the
      <classname>java.lang.annotations.ElementType</classname> the constraint
      is declared on. The expected types for the current version of the Bean
      Validation specification are:</para>

      <itemizedlist>
        <listitem>
          <para>TYPE</para>
        </listitem>

        <listitem>
          <para>FIELD</para>
        </listitem>

        <listitem>
          <para>METHOD</para>
        </listitem>
      </itemizedlist>

      <para><methodname>getReturnType</methodname> returns either the object
      type for a class, or the returned type for a property (TODO problem of
      generics resolution).</para>

      <para>The <methodname>isCascaded</methodname> method returns
      <literal>true</literal> of the property is marked with
      <classname>@Valid</classname>. Class level element descriptors always
      return <literal>false</literal>.</para>

      <para><methodname>getPropertyPath</methodname> returns the property path
      as described in <xref
      linkend="validationapi-invalidconstraint" />.</para>

      <para><classname>getConstraintDescriptors</classname> returns the
      <classname>ConstraintDescriptor</classname>s (see <xref
      linkend="constraintmetadata-constraintdescriptor" />), each
      <classname>ConstraintDescriptor</classname> describing one of the
      constraints declared on the given element.</para>
    </section>

    <section id="constraintmetadata-constraintdescriptor">
      <title>ConstraintDescriptor</title>

      <para>A <classname>ConstraintDescriptor</classname> object describes a
      given constraint declaration (i.e. a constraint annotation).</para>

      <programlisting>/**
 * describes a single constraint
 *
 * @author Emmanuel Bernard
 */
public interface ConstraintDescriptor {
    /**
     * Constraint declaration annotation
     */
    Annotation getAnnotation();

    /**
     * constraint parameters
     */
    Map&lt;String, Object&gt; getParameters();

    /**
     * What are the groups the constraint is applied on
     */<!--EBE: Should it be List<String> as the groups comes from an array??-->
    Set&lt;String&gt; getGroups();

    /**
     * Return the constraint implementation routine
     */
    Constraint getConstraintImplementation();
}</programlisting>

      <para><methodname>getAnnotation</methodname> returns the annotation
      instance (or an annotation instance representing the given constraint
      declaration)</para>

      <para><methodname>getParameters</methodname> returns a map containing
      the annotation parameter names as a key, and the annotation parameter
      values as a value (this API is anticipated to be simpler to use by tools
      that reflection over the annotation instance).</para>

      <para><methodname>getGroups</methodname> returns the group names, the
      constraint is supposed to be applied upon.</para>

      <para><methodname>getConstraintImplementation</methodname> returns the
      initialized and ready to use
      <classname>javax.validator.Constraint</classname> implementation for the
      given constraint declaration. Specifically, the
      <classname>StandardConstraintDescriptor</classname> is available if the
      constraint validator implements
      <classname>StandardConstraint</classname> (see <xref
      linkend="constraintsdefinition-standardconstraint" />).</para>
    </section>

    <section>
      <title>Example</title>

      <programlisting>public class Author {
    private String firstName;
    
    @NotEmpty(message="lastname must not be null")
    private String lastName;

    @Length(max=30)
    private String company;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        this.company = company;
    }
}

public class Book {
    private String title;
    private String description;

    @Valid
    @NotNull
    private Author author;

    @NotEmpty(groups={"firstlevelcheck", "default"})
    @Length(max=30)
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Author getAuthor() {
        return author;
    }

    public void setAuthor(Author author) {
        this.author = author;
    }

    public String getDescription() {
        return description;
    }

    public void setAuthor(String description) {
        this.description = description;
    }
}

assert bookValidator.hasConstraints();

ElementDescriptor bookBeanDescriptor = bookValidator.getBeanConstraints();
assert bookBeanDescriptor.getElementType() == ElementType.TYPE;
assert bookBeanDescriptor.getConstraintDescriptors().size() == 0 //no constraint
assert "".equals( bookBeanDescriptor.getPropertyPath() ); //root element

//more specifically "author" and "title"
assert bookValidator.getValidatedProperties().size() == 2;

//not a property
assert bookValidator.getConstraintsForProperty("doesNotExist") == null; 
//property with no constraint
assert bookValidator.getConstraintsForProperty("description") == null; 

ElementDescriptor propertyDescriptor = bookValidator.getConstraintsForProperty("title");
assert propertyDescriptor.getElementType() == ElementType.METHOD;
assert propertyDescriptor.getConstraintDescriptors().size() == 2
assert "title".equals( propertyDescriptor.getPropertyPath() );

//assuming the implementation returns the NotEmpty constraint first
ConstraintDescriptor constraintDescriptor = propertyDescriptor.getConstraintDescriptors()
                                                              .iterator().next();
assert constraintDescriptor.getAnnotation().getAnnotationType().equals( NotEmpty.class );
assert constraintDescriptor.getGroups().size() == 2; //"firstlevelcheck" and "default"
assert constraintDescriptor.getConstraintImplementation() instanceof StandardConstraint;
StandardConstraint standardConstraint = 
        (StandardConstraint) constraintDescriptor.getConstraintImplementation();
//@NotEmpty cannot be null
assert ! standardConstraint.getStandardConstraints().getNullability(); 

//assuming the implementation returns the Length constraint second
constraintDescriptor = bookBeanDescriptor.getConstraintDescriptors().iterator().next().next();
assert constraintDescriptor.getAnnotation().getAnnotationType().equals( Length.class );
assert constraintDescriptor.getParameters().get("max") == 30; 
assert constraintDescriptor.getGroups().length == 0;

propertyDescriptor = bookValidator.getConstraintsForProperty("author");
assert propertyDescriptor.getConstraintDescriptors().size() == 1
assert propertyDescriptor.isCascaded()</programlisting>
    </section>
  </chapter>

  <chapter>
    <title>Built-in Constraint definitions</title>

    <para>Some basic constraint definitions will be included later in the
    specification.</para>
  </chapter>

  <chapter>
    <title>XML deployment descriptor</title>

    <section>
      <title></title>

      <para></para>
    </section>
  </chapter>

  <appendix id="terminology">
    <title>Terminology</title>

    <para>This appendix aims at giving an overview on the different specific
    terms used through this specification. There are not to be considered
    formal definitions. Formal definitions are to be inferred from the core
    specification.</para>

    <table>
      <title>terminology</title>

      <tgroup cols="2">
        <colspec align="center" colnum="3" />

        <thead>
          <row>
            <entry>Term</entry>

            <entry colsep="" spanname="">Definition</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Constraint</entry>

            <entry>A restriction on a bean instance, the value of a field or
            the value of a JavaBean property</entry>
          </row>

          <row>
            <entry>Constraint declaration</entry>

            <entry>Assignment of a constraint on a target (bean, field,
            property) for a specific class. Typically by declaring an
            annotation on the target but can also be done through a deployment
            descriptor in XML</entry>
          </row>

          <row>
            <entry>Validation routine</entry>

            <entry><para>Implementation of the validation algorithm associated
            to a given constraint </para><para>also means, sequence of
            operations executed by the Bean Validation provider to validate a
            given object</para></entry>
          </row>

          <row>
            <entry>Constraint definition</entry>

            <entry>Defines a type of constraint, it's attributes and the
            actual constraint implementation. Usually done through
            annotations, this definition can also be done through XML</entry>
          </row>

          <row>
            <entry>group</entry>

            <entry>Constraints can belong to one or more group or context.
            Useful to apply a subset of the constraints for a given use case.
            By default, the <literal>default</literal> group is used.</entry>
          </row>

          <row>
            <entry>group sequence</entry>

            <entry>Define a group ordering in the validation process. If a
            given ordered group contains one or more failure, the following
            ones in the sequence must be ignored.</entry>
          </row>

          <row>
            <entry>Constraint validation</entry>

            <entry>constraint logic algorithm used to determine whether a
            given value pass a constraint or not.</entry>
          </row>

          <row>
            <entry>Constraint validation implementation</entry>

            <entry>Class implementing the constraint logic and used to
            determine whether a given value pass a constraint or not.</entry>
          </row>

          <row>
            <entry>Validation API</entry>

            <entry>Main API used to validate a given type of bean</entry>
          </row>

          <row>
            <entry>Bean validation provider</entry>

            <entry>Implementation of the specification</entry>
          </row>

          <row>
            <entry>Message resolver</entry>

            <entry>Algorithm used to build the end user message associated to
            a constraint failure. Typically useful for i18n</entry>
          </row>

          <row>
            <entry>Constraint repository API</entry>

            <entry>API exposing the constraints applied to a given bean type.
            Also considered one of the integration points with other JSR or
            frameworks.</entry>
          </row>

          <row>
            <entry>javax.validation.Constraint</entry>

            <entry>interface implemented by a constraint validation
            implementation</entry>
          </row>

          <row>
            <entry>javax.validation.StandardConstraint</entry>

            <entry>optional interface implemented by a constraint validation
            implementation. Used to express standard constraint
            dimensions</entry>
          </row>

          <row>
            <entry>javax.validation.Validator</entry>

            <entry>Main interface for the validation API</entry>
          </row>

          <row>
            <entry>javax.validation.InvalidConstraint</entry>

            <entry>interface describing a given constraint failure on a given
            bean</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para></para>
  </appendix>

  <appendix id="standard-resolver-messages">
    <title>Standard resolver messages</title>

    <para>The properties listed below are resolved by the default message
    resolver.</para>

    <programlisting>validator.length=length must be between {min} and {max}
validator.max=must be less than or equal to {value}
validator.min=must be greater than or equal to {value}
validator.notNull=may not be null
validator.range=must be between {min} and {max}
validator.size=size must be between {min} and {max}
validator.email=not a well-formed email address
validator.notEmpty=may not be null or empty</programlisting>
  </appendix>
</book>