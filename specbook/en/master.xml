<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <title>JSR 303: Bean Validation</title>

  <bookinfo>
    <title>JSR 303: Bean Validation</title>

    <releaseinfo>1.0.20091005</releaseinfo>

    <pubdate>2009-10-05</pubdate>

    <copyright>
      <year>2007-2009</year>

      <holder>Red Hat, Inc</holder>
    </copyright>

    <authorgroup>
      <corpauthor>Bean Validation Expert Group</corpauthor>

      <author>
        <firstname>Emmanuel</firstname>

        <surname>Bernard</surname>

        <affiliation>
          <orgname>Red Hat, Inc.</orgname>
        </affiliation>
      </author>

      <author>
        <firstname>Steve</firstname>

        <surname>Peterson</surname>
      </author>
    </authorgroup>
  </bookinfo>

  <chapter>
    <title>Introduction</title>

    <para>This document is the specification of the Java API for JavaBean
    validation in Java EE and Java SE. The technical objective of this work is
    to provide a class level constraint declaration and validation facility
    for the Java application developer, as well as a constraint metadata
    repository and query API.</para>

    <section>
      <title>Expert group</title>

      <para>This work is being conducted as part of JSR 303 under the Java
      Community Process Program. This specification is the result of the
      collaborative work of the members of the JSR 303 Expert Group. These
      include the following present and former expert group members in
      alphabetical order:</para>

      <itemizedlist>
        <listitem>
          <para>Geert Bevin</para>
        </listitem>

        <listitem>
          <para>Emmanuel Bernard (Red Hat, Inc.) - Specification Lead</para>
        </listitem>

        <listitem>
          <para>Uri Boness</para>
        </listitem>

        <listitem>
          <para>Erik Brakkee (Ericsson AB)</para>
        </listitem>

        <listitem>
          <para>Ed Burns (Sun Microsystems, Inc.)</para>
        </listitem>

        <listitem>
          <para>Jason Carreira</para>
        </listitem>

        <listitem>
          <para>Robert Clevenger (Oracle - retired)</para>
        </listitem>

        <listitem>
          <para>Linda DeMichiel (Sun Microsystems, Inc.)</para>
        </listitem>

        <listitem>
          <para>Tim Fennel</para>
        </listitem>

        <listitem>
          <para>Bharath Ganesh (Pramati Technologies)</para>
        </listitem>

        <listitem>
          <para>Romain Guy (Google Inc.)</para>
        </listitem>

        <listitem>
          <para>Robert Harrop</para>
        </listitem>

        <listitem>
          <para>Jacob J. Hookom</para>
        </listitem>

        <listitem>
          <para>Bob Lee (Google Inc.)</para>
        </listitem>

        <listitem>
          <para>Craig R. McClanahan (Sun Microsystems, Inc.)</para>
        </listitem>

        <listitem>
          <para>Niall K. Pemberton</para>
        </listitem>

        <listitem>
          <para>Steve Peterson</para>
        </listitem>

        <listitem>
          <para>Dhanji R. Prasanna (Google Inc., formerly individual)</para>
        </listitem>

        <listitem>
          <para>Gerhard Petracek</para>
        </listitem>

        <listitem>
          <para>Matt Raible</para>
        </listitem>

        <listitem>
          <para>Michael Nascimento Santos</para>
        </listitem>

        <listitem>
          <para>Sebastian Thomschke</para>
        </listitem>

        <listitem>
          <para>Jon Wetherbee (Oracle)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Specification goals</title>

      <para>Validating data is a common task that occurs throughout an
      application, from the presentation layer to the persistence layer. Often
      the same validation logic is implemented in each layer, proving to be
      time consuming and error-prone. To avoid duplication of these
      validations in each layer, developers often bundle validation logic
      directly into the domain model, cluttering domain classes with
      validation code that is, in fact, metadata about the class
      itself.</para>

      <para>This JSR defines a metadata model and API for JavaBean validation.
      The default metadata source is annotations, with the ability to override
      and extend the meta-data through the use of XML validation
      descriptors.</para>

      <para>The validation API developed by this JSR is not intended for use
      in any one tier or programming model. It is specifically not tied to
      either the web tier or the persistence tier, and is available for both
      server-side application programming, as well as rich client Swing
      application developers. This API is seen as a general extension to the
      JavaBeans object model, and as such is expected to be used as a core
      component in other specifications. Ease of use and flexibility have
      influenced the design of this specification.</para>
    </section>

    <section>
      <title>How this document is organized</title>

      <para>This document describes each aspect of the bean validation
      specification in a separate chapter. One should remember that the
      specification is a consistent whole.</para>

      <para><xref linkend="constraintsdefinitionimplementation" /> describes
      how constraints are defined.</para>

      <para><xref linkend="constraintdeclarationvalidationprocess" />
      describes how a JavaBean class is decorated with annotations to describe
      constraints.</para>

      <para><xref linkend="validationapi" /> describes how to programmatically
      validate a JavaBean.</para>

      <para><xref linkend="constraintmetadata" /> describes how the metadata
      query API works.</para>

      <para>In <xref linkend="terminology" />, key concepts are summarized.
      Some reviewers have found that reading the terminology section first
      helps to better understand the specification.</para>

      <para>JPA, JSF and EE integration are present at <xref
      linkend="appendix-jpa" />, <xref linkend="appendix-jsf" /> and <xref
      linkend="appendix-ee" /> for archive purposes, one should refer to the
      respective specifications for the up-to-date integration rules.</para>

      <para>The changelog can be found at <xref linkend="changelog" />.</para>
    </section>

    <section>
      <title>How to comment</title>

      <para>The expert group is eager to receive feedback from readers. Feel
      free to contact us or use jsr-303-comments@jcp.org.</para>
    </section>
  </chapter>

  <chapter id="constraintsdefinitionimplementation">
    <title>Constraint Definition</title>

    <para>Constraints are defined by the combination of a constraint
    annotation and a list of constraint validation implementations. The
    constraint annotation is applied on types, methods, fields or other
    constraint annotations in case of composition.</para>

    <para>Unless stated otherwise the default package name for the Bean
    Validation APIs is <classname>javax.validation</classname>.</para>

    <section id="constraintsdefinitionimplementation-constraintdefinition">
      <title>Constraint annotation</title>

      <para>A constraint on a JavaBean is expressed through one or more
      annotations. An annotation is considered a constraint definition if its
      retention policy contains <literal>RUNTIME</literal> and if the
      annotation itself is annotated with
      <literal>javax.validation.Constraint</literal>.</para>

      <programlisting>/**
 * Link between a constraint annotation and its constraint validation implementations.
 * &lt;p/&gt;
 * A given constraint annotation should be annotated by a &lt;code&gt;@Constraint&lt;/code&gt;
 * annotation which refers to its list of constraint validation implementations.
 *
 * @author Emmanuel Bernard
 * @author Gavin King
 * @author Hardy Ferentschik
 */
@Documented
@Target({ ANNOTATION_TYPE })
@Retention(RUNTIME)
public @interface Constraint {
    /**
     * &lt;code&gt;ConstraintValidator&lt;/code&gt; classes must reference distinct target types.
     * If two &lt;code&gt;ConstraintValidator&lt;/code&gt; refer to the same type,
     * an exception will occur.
     *
     * @return array of ConstraintValidator classes implementing the constraint
     */
    public Class&lt;? extends ConstraintValidator&lt;?, ?&gt;&gt;[] validatedBy();
}</programlisting>

      <para>Constraint annotations can target any of the following
      <classname>ElementType</classname>s:</para>

      <itemizedlist>
        <listitem>
          <para><literal>FIELD</literal> for constrained attributes</para>
        </listitem>

        <listitem>
          <para><literal>METHOD</literal> for constrained getters</para>
        </listitem>

        <listitem>
          <para><literal>TYPE</literal> for constrained beans</para>
        </listitem>

        <listitem>
          <para><literal>ANNOTATION_TYPE</literal> for constraints composing
          other constraints</para>
        </listitem>
      </itemizedlist>

      <para>While other <classname>ElementType</classname>s are not forbidden,
      the provider does not have to recognize and process constraints placed
      on such types. Built-in types do support <literal>PARAMETER</literal>
      and <literal>CONSTRUCTOR</literal> to allow Bean Validation provider
      specific extensions. It is considered good practice to follow the same
      approach for custom annotations.</para>

      <para>Since a given constraint definition applies to one or more
      specific Java types, the JavaDoc for the constraint annotation should
      clearly state which types are supported. Applying a constraint
      annotation to an incompatible type will raise an
      <classname>UnexpectedTypeException</classname>. Care should be taken on
      defining the list of <classname>ConstraintValidator</classname>s. The
      type resolution algorithm (see <xref
      linkend="typevalidatorresolution" />) could lead to exceptions if the
      <classname>ConstraintValidator</classname> list leads to
      ambiguities.</para>

      <para>If a constraint definition is not valid, a
      <classname>ConstraintDefinitionException</classname> is raised either at
      validation time or when the metadata is requested. Invalid constraint
      definitions causes are multiple but include missing or illegal
      <methodname>message</methodname> or <methodname>groups</methodname>
      elements (see <xref
      linkend="constraintsdefinitionimplementation-constraintdefinition-properties" />).</para>

      <section id="constraintsdefinitionimplementation-constraintdefinition-properties">
        <title>Constraint definition properties</title>

        <para>A constraint definition may have attributes that are specified
        at the time the constraint is applied to a JavaBean. The properties
        are mapped as annotation elements. The annotation element names
        <literal>message</literal>, <literal>groups</literal> and
        <literal>payload</literal> are considered reserved names; annotation
        elements starting with <literal>valid</literal> are not allowed; a
        constraint may use any other element name for its attributes.</para>

        <section id="constraintsdefinitionimplementation-constraintdefinition-parameters-message">
          <title>message</title>

          <para>Every constraint annotation must define a
          <literal>message</literal> element of type
          <literal>String</literal>.</para>

          <programlisting>String message() default "{com.acme.constraint.MyConstraint.message}";</programlisting>

          <para>The <methodname>message</methodname> element value is used to
          create the error message. See <xref
          linkend="validationapi-message" /> for a detailed explanation. It is
          recommended to default <literal>message</literal> values to resource
          bundle keys to enable internationalization. It is also recommended
          to use the following convention: the resource bundle key should be
          the fully qualified class name of the constraint annotation
          concatenated to <literal>.message</literal> as shown in the previous
          program listing.</para>

          <para>Built-in Bean Validation constraints follow this
          convention.</para>
        </section>

        <section id="constraintsdefinitionimplementation-constraintdefinition-groups">
          <title>groups</title>

          <para>Every constraint annotation must define a
          <literal>groups</literal> element that specifies the processing
          groups with which the constraint declaration is associated.</para>

          <programlisting>    Class&lt;?&gt;[] groups() default {};</programlisting>

          <para>The default value must be an empty array.</para>

          <para>If no group is specified when declaring the constraint on an
          element, the <literal>Default</literal> group is considered
          declared.</para>

          <para>See <xref linkend="validationapi-validatorapi-groups" /> for
          more information.</para>

          <para>Groups are typically used to control the order in which
          constraints are evaluated, or to perform validation of the partial
          state of a JavaBean.</para>
        </section>

        <section id="constraintsdefinitionimplementation-constraintdefinition-payload">
          <title>payload</title>

          <para>Constraint annotations must define a
          <literal>payload</literal> element that specifies the payload with
          which the the constraint declaration is associated.</para>

          <programlisting>    Class&lt;? extends Payload&gt;[] payload() default {};</programlisting>

          <para>The default value must be an empty array.</para>

          <para>Each attachable payload extends
          <classname>Payload</classname>.</para>

          <programlisting>/**
 * Payload type that can be attached to a given
 * constraint declaration.
 * Payloads are typically used to carry on metadata information
 * consumed by a validation client.
 *
 * Use of payloads is not considered portable.
 *
 * @author Emmanuel Bernard
 * @author Gerhard Petracek
 */
public interface Payload {
}</programlisting>

          <para>Payloads are typically used by validation clients to associate
          some metadata information with a given constraint declaration.
          Payloads are typically non-portable. Describing payloads as
          interface extensions as opposed to a string-based approach allows an
          easier and more type-safe approach.</para>

          <para>One use case for payload shown in <xref
          linkend="example-payload" /> is to associate a severity to a
          constraint. This severity can be exploited by a presentation
          framework to adjust how a constraint failure is displayed.</para>

          <example id="example-payload">
            <title>Use of payload to associate severity to a
            constraint</title>

            <programlisting>package com.acme.severity;

public class Severity {
    public static class Info implements Payload {};
    public static class Error implements Payload {};
}

public class Address {
    @NotNull(message="would be nice if we had one", payload=Severity.Info.class)
    public String getZipCode() {...}

    @NotNull(message="the city is mandatory", payload=Severity.Error.class) 
    String getCity() {...}
}</programlisting>
          </example>

          <para>The <literal>payload</literal> information can be retrieved
          from error reports via the
          <classname>ConstraintDescriptor</classname> either accessed through
          the <classname>ConstraintViolation</classname> objects (see <xref
          linkend="validationapi-constraintviolation" />) or through the
          metadata API (see <xref
          linkend="constraintmetadata-constraintdescriptor" />).</para>
        </section>

        <section>
          <title>Constraint specific parameter</title>

          <para>The constraint annotation definitions may define additional
          elements to parameterize the constraint. For example, a constraint
          that validates the length of a string can use an annotation element
          named <literal>length</literal> to specify the maximum length at the
          time the constraint is declared.</para>
        </section>
      </section>

      <section>
        <title>Examples</title>

        <example id="example-definition-notnull">
          <title>Simple constraint definition</title>

          <programlisting>package com.acme.constraint;

/**
 * Mark a String as representing a well formed order number
 */
@Documented
@Constraint(validatedBy = OrderNumberValidator.class)
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface OrderNumber {
    String message() default "{com.acme.constraint.OrderNumber.message}";
    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};
}</programlisting>
        </example>

        <para><xref linkend="example-definition-notnull" /> marks a String as
        a well-formed order number. The constraint Validator is implemented by
        <classname>OrderNumberValidator</classname>.</para>

        <example id="example-definition-length">
          <title>Constraint definition with default parameter</title>

          <programlisting>package com.acme.constraint;

/**
 * A frequency in Hz as audible to human ear.
 * Adjustable to the age of the person.
 * Accept Numbers.
 */
@Documented
@Constraint(validatedBy = AudibleValidator.class)
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface Audible {
    Age age() default Age.YOUNG;
    String message() default "{com.acme.constraint.Audible.message}";
    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};

    public enum Age {
        YOUNG,
        WONDERING
        OLD
    }
}</programlisting>
        </example>

        <para><xref linkend="example-definition-length" /> ensures that a
        given frequency is within the scope of human ears. The constraint
        definition includes an optional parameter that may be specified when
        the constraint is applied.</para>

        <example id="example-definition-mandatory">
          <title>Constraint definition with mandatory parameter</title>

          <programlisting>package com.acme.constraint;

/**
 * Defines the list of values accepted
 * Accepts int or Integer objects
 */
@Documented
@Constraint(validatedBy = DiscreteListOfIntegerValidator.class)
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface Acceptable {
    int[] value();
    String message() default "{com.acme.constraint.Acceptable.message}";
    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};
}</programlisting>
        </example>

        <para><xref linkend="example-definition-mandatory" /> defines a list
        of acceptable values expressed as an array: the
        <methodname>value</methodname> property must be specified when the
        constraint is applied.</para>
      </section>
    </section>

    <section id="constraintsdefinitionimplementation-multipleconstraints">
      <title>Applying multiple constraints of the same type</title>

      <para>It is often useful to declare the same constraint more than once
      to the same target, with different properties. A common example is the
      <literal>@Pattern</literal> constraint, which validates that its target
      matches a specified regular expression. Other constraints have this
      requirement as well. The same constraint type can belong to different
      groups and have specific error messages depending on the targeted
      group.</para>

      <para>To support this requirement, the bean validation provider treats
      regular annotations (annotations not annotated by
      <classname>@Constraint</classname>) whose <literal>value</literal>
      element has a return type of an array of constraint annotations in a
      special way. Each element in the <literal>value</literal> array are
      processed by the Bean Validation implementation as regular constraint
      annotations. This means that each constraint specified in the
      <literal>value</literal> element is applied to the target. The
      annotation must have retention <literal>RUNTIME</literal> and can be
      applied on a type, field, property or another annotation. It is
      recommended to use the same set of targets as the initial
      constraint.</para>

      <para>Note to constraint designers: each constraint annotation should be
      coupled with its corresponding multi-valued annotation. The
      specification recommends, though does not mandate, the definition of an
      inner annotation named <classname>List</classname>.</para>

      <example>
        <title>Multi-valued constraint definition</title>

        <programlisting>/**
 * Validate a zipcode for a given country 
 * The only supported type is String
 */
@Documented
@Constraint(validatedBy = ZipCodeValidator.class)
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface ZipCode {

    String countryCode();

    String message() default "{com.acme.constraint.ZipCode.message}";

    Class&lt;?&gt;[] groups() default {};

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several @ZipCode annotations on the same element
     * @see (@link ZipCode}
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        ZipCode[] value();
    }    
}</programlisting>
      </example>

      <example>
        <title>Multi-valued constraint declaration</title>

        <programlisting>public class Address {
    @ZipCode.List( {
            @ZipCode(countryCode="fr", groups=Default.class
                     message = "zip code is not valid"),
            @ZipCode(countryCode="fr", groups=SuperUser.class
                     message = "zip code invalid. Requires overriding before saving.")
            } )
    private String zipcode;
}</programlisting>
      </example>

      <para>In this example, both constraints apply to the
      <methodname>zipcode</methodname> field but with different groups and
      with different error messages.</para>

      <para>Using two different multi-constraint annotations for the same
      underlying constraint type on the same target (ie. class or property) is
      not considered portable and is discouraged.</para>
    </section>

    <section id="constraintsdefinitionimplementation-constraintcomposition">
      <title>Constraint composition</title>

      <para>This specification allows you to compose constraints to create
      higher level constraints.</para>

      <para>Constraint composition is useful in several ways:</para>

      <itemizedlist>
        <listitem>
          <para>Avoid duplication and facilitate reuse of more primitive
          constraints.</para>
        </listitem>

        <listitem>
          <para>Expose primitive constraints as part of a composed constraint
          in the metadata API and enhance tool awareness.</para>
        </listitem>
      </itemizedlist>

      <para>Composition is done by annotating a constraint annotation with the
      composing constraint annotations.</para>

      <example>
        <title>Composition is done by annotating the composed
        constraint</title>

        <programlisting>@Pattern(regexp="[0-9]*")
@Size(min=5, max=5)
@Constraint(validatedBy = FrenchZipcodeValidator.class)
@Documented
@Target({ANNOTATION_TYPE, METHOD, FIELD, CONSTRUCTOR, PARAMETER})
@Retention(RUNTIME)
public @interface FrenchZipcode {
    String message() default "Wrong zipcode";
    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};

    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        FrenchZipcode[] value();
    }
}</programlisting>
      </example>

      <para>Annotating an element with <classname>@FrenchZipcode</classname>
      (the composed annotation) is equivalent to annotating it with
      <classname>@Pattern(regexp="[0-9]*")</classname>,
      <classname>@Size(min=5, max=5)</classname> (the composing annotations)
      and <classname>@FrenchZipcode</classname>. More formally, each
      constraint annotation hosted on a constraint annotation is applied to
      the target element and this is done recursively. Note that the main
      annotation and its constraint validation implementation is also applied.
      By default, each failing constraint generates an error report. Groups
      from the main constraint annotation are inherited by the composing
      annotations. Any <methodname>groups</methodname> definition on a
      composing annotation is ignored. Likewise, payload from the main
      constraint annotation is inherited by the composing annotations. Any
      <methodname>payload</methodname> definition on a composing annotation is
      ignored.</para>

      <para>The property type upon which composed constraint is placed must be
      compatible with all constraints (composing and composed). A constraint
      designer should ensure that such a type exists and list in the JavaDoc
      all the compatible types.</para>

      <para>It is possible to ensure that composing annotations do not raise
      individual error reports. In this scenario, if one or more composing
      annotations are invalid, the main constraint is automatically considered
      invalid and the corresponding error report is generated. To mark a
      constraint as raising a single constraint error report if either the
      composed or one of the composing constraints fail, use the
      <classname>@ReportAsSingleViolation</classname> annotation.</para>

      <example>
        <title>If any of the composing constraints fail, the error report
        corresponding to @FrenchZipcode is raised and none other.</title>

        <programlisting>@Pattern(regexp="[0-9]*")
@Size(min=5, max=5)
@ReportAsSingleViolation
@Constraint(validatedBy = FrenchZipcodeValidator.class)
@Documented
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface FrenchZipcode {
    String message() default "Wrong zipcode";
    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};

    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        FrenchZipcode[] value();
    }
}</programlisting>
      </example>

      <para>The definition of <classname>@ReportAsSingleViolation</classname>
      is as follows.</para>

      <programlisting>/**
 * A constraint annotation hosting this annotation
 * will return the composed annotation error report if any of the composing annotations
 * fail. The error reports of each individual composing constraint is ignored.
 *
 * @author Emmanuel Bernard
 */
@Target({ ANNOTATION_TYPE })
@Retention(RUNTIME)
public @interface ReportAsSingleViolation {
}</programlisting>

      <para>More specifically, if a composed constraint is marked as
      <classname>@ReportAsSingleViolation</classname>, and if any of its
      composing constraint reports one or more violations, all reports from
      composing constraints are ignored and the error report corresponding to
      the composed constraint is generated.</para>

      <note>
        <para>If a composing constraint fails and if the composed constraint
        is marked as <classname>@ReportAsSingleViolation</classname>, the Bean
        Validation provider is free to not process the other composing
        constraints for this composed constraint.</para>
      </note>

      <para>Composing annotations can define the value of
      <literal>message</literal> and custom attributes (excluding
      <methodname>groups</methodname> and <methodname>payload</methodname>)
      but these are fixed in the composed constraint definition.</para>

      <example>
        <title>Composing annotations can use attributes. They are fixed for a
        given main annotation. All @FrenchZipcode constraints have a @Size
        restricted to 5.</title>

        <programlisting>@Pattern(regexp="[0-9]*")
@Size(min=5, max=5)
@Constraint(validatedBy = FrenchZipcodeValidator.class)
@Documented
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface FrenchZipcode {
    String message() default "Wrong zipcode";
    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};

    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        FrenchZipcode[] value();
    }
}</programlisting>
      </example>

      <para>It is possible to override attributes and messages defined on a
      composing annotation. An attribute from the main annotation is used to
      override one or more attributes of the composing annotations. Such an
      attribute is annotated with the
      <classname>@OverridesAttribute</classname> annotation or its multivalued
      equivalent <classname>@OverridesAttribute.List</classname>.</para>

      <example id="example-composing-overridden">
        <title>Attributes from composing annotations can be overridden by
        attributes from the composed annotation.</title>

        <programlisting>@Pattern(regexp="[0-9]*")
@Size
@Constraint(validatedBy = FrenchZipcodeValidator.class)
@Documented
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface FrenchZipcode {
    String message() default "Wrong zipcode";
    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};

    @OverridesAttribute.List( {
        @OverridesAttribute(constraint=Size.class, name="min"),
        @OverridesAttribute(constraint=Size.class, name="max") } )
    int size() default 5;

    @OverridesAttribute(constraint=Size.class, name="message")
    String sizeMessage() default "{com.acme.constraint.FrenchZipcode.zipcode.size}";

    @OverridesAttribute(constraint=Pattern.class, name="message")
    String numberMessage() default "{com.acme.constraint.FrenchZipcode.number.size}";

    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        FrenchZipcode[] value();
    }
}</programlisting>
      </example>

      <para>The value of the composed constraint attribute annotated with
      <classname>@OverridesAttribute</classname>
      (<methodname>@FrenchZipcode.sizeMessage</methodname>) is applied to the
      composing constraint attribute named after
      <methodname>OverridesAttribute.name</methodname> and hosted on the
      composing constraint of type
      <methodname>OverridesAttribute.constraint</methodname>
      (<methodname>@Size.message</methodname>). Similarly,
      <classname>@FrenchZipcode.numberMessage</classname> value is mapped to
      <classname>@Pattern.message</classname>.</para>

      <para>If left undefined, the default value for
      <methodname>@OverridesAttribute.name</methodname> is the name of the
      composed constraint attribute hosting the
      <classname>@OverridesAttribute</classname> annotation.</para>

      <para>The types of the overridden and overriding attributes must be
      identical.</para>

      <note>
        <para>A composing constraint can itself be a composed constraint. In
        this case, attribute values are overridden recursively according to
        the described rules. Note however, that a forwarding rule (as defined
        by <classname>@OverridesAttribute</classname>) is only applied to the
        direct composing constraints.</para>
      </note>

      <para>Using <xref linkend="example-composing-overridden" />,</para>

      <programlisting>@FrenchZipcode(size=9, sizeMessage="Zipcode should be of size {max}")</programlisting>

      <para>is equivalent to</para>

      <programlisting>@FrenchZipcode</programlisting>

      <para>if <classname>@FrenchZipcode</classname> is defined as</para>

      <programlisting>@Pattern(regexp="[0-9]*")
@Size(min=9, max=9, message="Zipcode should be of size {max}")
@Constraint(validatedBy = FrenchZipcodeValidator.class)
@Documented
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface FrenchZipcode {
    String message() default "Wrong zipcode";
    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};

    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        FrenchZipcode[] value();
    }
}</programlisting>

      <para>If a constraint is used more than once as a composing constraint,
      the multi value constraints model as described in <xref
      linkend="constraintsdefinitionimplementation-multipleconstraints" /> is
      used. To select a specific composing constraint,
      <methodname>OverridesAttribute.constraintIndex</methodname> is used. It
      represents the constraint index in the <methodname>value</methodname>
      array. If <literal>index</literal> is undefined, the single constraint
      declaration is targeted.</para>

      <example>
        <title>Use of constraintIndex in @OverridesAttribute</title>

        <programlisting>@Pattern.List( {
    @Pattern(regexp="[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}"), //email
    @Pattern(regexp=".*?emmanuel.*?") //emmanuel
} )
@Constraint(validatedBy={})
@Documented
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface EmmanuelsEmail {
    String message() default "Not emmanuel's email";

    @OverridesAttribute(constraint=Pattern.class, name="message", constraintIndex=0)
    String emailMessage() default "Not an email";

    @OverridesAttribute(constraint=Pattern.class, name="message", constraintIndex=1)
    String emmanuelMessage() default "Not Emmanuel";

    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};

    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        EmmanuelsEmail[] value();
    }
}</programlisting>
      </example>

      <para><classname>@OverridesAttribute</classname> definition is as
      follows:</para>

      <programlisting>/**
 * Mark an attribute as overriding the attribute of a composing constraint.
 * Both attributes must share the same type.
 *
 * @author Emmanuel Bernard
 */
@Retention(RUNTIME)
@Target({ METHOD })
public @interface OverridesAttribute {
    /**
     * @return Constraint type the attribute is overriding
     */
    Class&lt;? extends Annotation&gt; constraint();

    /**
     * Name of the Constraint attribute overridden.
     * Defaults to the name of the attribute hosting &lt;code&gt;@OverridesAttribute&lt;/code&gt;.
     *
     * @return name of constraint attribute overridden.
     */
    String name();

    /**
     * The index of the targeted constraint declaration when using
     * multiple constraints of the same type.
     * The index represents the index of the constraint in the value() array.
     *
     * By default, no index is defined and the single constraint declaration
     * is targeted
     *
     * @return constraint declaration index if multivalued annotation is used
     */
    int constraintIndex() default -1;

    /**
     * Defines several @OverridesAttribute annotations on the same element
     * @see javax.validation.OverridesAttribute
     */
    @Documented
    @Target({ METHOD })
    @Retention(RUNTIME)
    public @interface List {
        OverridesAttribute[] value();
    }
}</programlisting>

      <para>The following elements uniquely identify an overridden constraint
      attribute:</para>

      <itemizedlist>
        <listitem>
          <para><methodname>OverridesAttribute.constraint</methodname></para>
        </listitem>

        <listitem>
          <para><methodname>OverridesAttribute.name</methodname></para>
        </listitem>

        <listitem>
          <para><methodname>OverridesAttribute.constraintIndex</methodname></para>
        </listitem>
      </itemizedlist>

      <para>If the composition is invalid (infinitely recursive composition,
      wrong attribute overriding, a single attribute mapped to more than one
      source attribute etc), a
      <classname>ConstraintDefinitionException</classname> is raised either at
      validation time or when the metadata is requested.</para>

      <para>Constraint designers are encouraged to make use of composition
      (recursively or not) based on the built-in constraints defined by the
      specification. The composing constraints are exposed through the Bean
      Validation metadata API (<xref
      linkend="constraintmetadata-constraintdescriptor" />). This metadata is
      particularly useful for third-party metadata consumers like persistence
      frameworks generating database schemas (such as Java Persistence) or
      presentation frameworks.</para>
    </section>

    <section id="constraintsdefinitionimplementation-validationimplementation">
      <title>Constraint validation implementation</title>

      <para>A constraint validation implementation performs the validation of
      a given constraint annotation for a given type. The implementation
      classes are specified by the <literal>validatedBy</literal> element of
      the <classname>@Constraint</classname> annotation that decorates the
      constraint definition. The constraint validation implementation
      implements the <classname>ConstraintValidator</classname>
      interface.</para>

      <programlisting>/**
 * Defines the logic to validate a given constraint A
 * for a given object type T.
 * Implementations must comply to the following restriction:
 * &lt;ul&gt;
 * &lt;li&gt;T must resolve to a non parameterized type&lt;/li&gt;
 * &lt;li&gt;or generic parameters of T must be unbounded
 * wildcard types&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface ConstraintValidator&lt;A extends Annotation, T&gt; {
    /**
     * Initialize the validator in preparation for isValid calls.
     * The constraint annotation for a given constraint declaration
     * is passed.
     * &lt;p/&gt;
     * This method is guaranteed to be called before any use of this instance for
     * validation.
     *
     * @param constraintAnnotation annotation instance for a given constraint declaration
     */
    void initialize(A constraintAnnotation);

    /**
     * Implement the validation logic.
     * The state of &lt;code&gt;value&lt;/code&gt; must not be altered.
     *
     * This method can be accessed concurrently, thread-safety must be ensured
     * by the implementation.
     *
     * @param value object to validate
     * @param context context in which the constraint is evaluated
     *
     * @return false if &lt;code&gt;value&lt;/code&gt; does not pass the constraint
     */
    boolean isValid(T value, ConstraintValidatorContext context);
}</programlisting>

      <para>Some restrictions apply on the generic type
      <classname>T</classname> (used in the <methodname>isValid</methodname>
      method). <classname>T</classname> must</para>

      <itemizedlist>
        <listitem>
          <para>resolve to a non parameterized type (ie. because the type is
          not using generics or because the raw type is used instead of the
          generic version)</para>
        </listitem>

        <listitem>
          <para>or generic parameters of <classname>T</classname> must be
          unbounded wildcard types (ie. <literal>&lt;?&gt;</literal>)</para>
        </listitem>
      </itemizedlist>

      <para><xref
      linkend="example-constraintsdefinitionimplementation-validationimplementation-validdef" />
      shows some examples of valid definitions.</para>

      <example id="example-constraintsdefinitionimplementation-validationimplementation-validdef">
        <title>Valid ConstraintValidator definitions</title>

        <programlisting>//String is not making use of generics
public class SizeValidatorForString implements&lt;Size, String&gt; {...}

//Collection uses generics but the raw type is used
public class SizeValidatorForCollection implements&lt;Size, Collection&gt; {...}

//Collection uses generics and unbounded windcard type
public class SizeValidatorForCollection implements&lt;Size, Collection&lt;?&gt;&gt; {...}</programlisting>
      </example>

      <para>And some invalid definitions in <xref
      linkend="example-constraintsdefinitionimplementation-validationimplementation-invaliddef" />.</para>

      <example id="example-constraintsdefinitionimplementation-validationimplementation-invaliddef">
        <title>Invalid ConstraintValidator definitions</title>

        <programlisting>//parameterized type
public class SizeValidatorForString implements&lt;Size, Collection&lt;String&gt;&gt; {...}

//parameterized type using bounded wildcard
public class SizeValidatorForCollection implements&lt;Size, Collection&lt;? extends Address&gt;&gt; {...}</programlisting>
      </example>

      <note>
        <para>This restriction is not a theoretical limitation and a future
        version of the specification will likely allow it.</para>
      </note>

      <para>The life cycle of a constraint validation implementation instance
      is undefined. Compliant implementations are allowed to cache
      <classname>ConstraintValidator</classname> instances retrieved from the
      <classname>ConstraintValidatorFactory</classname>.</para>

      <!--EBE should we make explicit that instances cannot be shared if the annotations attributes are not the same?-->

      <para>The <methodname>initialize</methodname> method is called by the
      Bean validation provider prior to any use of the constraint
      implementation.</para>

      <para>The <methodname>isValid</methodname> method is evaluated by the
      Bean Validation provider each time a given value is validated. It
      returns <literal>false</literal> if the value is not valid,
      <literal>true</literal> otherwise. <literal>isValid</literal>
      implementations must be thread-safe.</para>

      <para>If the property is of an unanticipated type, an
      <literal>UnexpectedTypeException</literal> is raised.
      <classname>ConstraintValidator</classname> implementations raise this
      exception themselves if they receive an unsupported type. However,
      constraint designers are encouraged to make use of specialized
      <classname>ConstraintValidator</classname> implementations and delegate
      the type resolution to the Bean Validation provider (see the type
      matching algorithm described in <xref
      linkend="typevalidatorresolution" />).</para>

      <para>If an exception occurs either in the
      <classname>initialize</classname> or <classname>isValid</classname>
      method, the runtime exception is wrapped into a
      <classname>ValidationException</classname> by the Bean Validation
      engine.</para>

      <para>The constraint validation implementation is not allowed to change
      the state of the value passed to
      <methodname>isValid</methodname>.</para>

      <note>
        <para>While not mandatory, it is considered a good practice to split
        the core constraint validation from the not null constraint validation
        (for example, an <classname>@Email</classname> constraint will return
        true on a null object, i.e. will not take care of the
        <classname>@NotNull</classname> validation)</para>

        <para><code>null</code> can have multiple meanings but is commonly
        used to express that a value does not make sense, is not available or
        is simply unknown. Those constraints on the value are orthogonal in
        most cases to other constraints. For example a String, if present,
        must be an email but can be null. Separating both concerns is a good
        practice.</para>
      </note>

      <para>The <classname>ConstraintValidatorContext</classname> object
      passed to the <methodname>isValid</methodname> method carries
      information and operations available in the context the constraint is
      validated to.</para>

      <programlisting>/**
 * Provide contextual data and operation when applying a given constraint validator.
 *
 * At least one &lt;code&gt;ConstraintViolation&lt;/code&gt; must be defined (either the default one,
 * of if the default &lt;code&gt;ConstraintViolation&lt;/code&gt; is disabled, a custom one).
 *
 * @author Emmanuel Bernard
 */
public interface ConstraintValidatorContext {
    /**
     * Disable the default &lt;code&gt;ConstraintViolation&lt;/code&gt; object generation (which
     * is using the message template declared on the constraint).
     * Useful to set a different violation message or generate a &lt;code&gt;ConstraintViolation&lt;/Code&gt;
     * based on a different property.
     */
    void disableDefaultConstraintViolation();

    /**
     * @return the current uninterpolated default message.
     */
    String getDefaultConstraintMessageTemplate();

    /**
     * Return an constraint violation builder building an violation report
     * allowing to optionally associate it to a sub path.
     * The violation message will be interpolated.
     * &lt;p/&gt;
     * To create the &lt;code&gt;ConstraintViolation&lt;/code&gt;, one must call either one of
     * the #addConstraintViolation() methods available in one of the
     * interfaces of the fluent API.
     * If another method is called after #addConstraintViolation() on
     * &lt;code&gt;ConstraintViolationBuilder&lt;/code&gt; or any of its associated nested interfaces
     * an &lt;code&gt;IllegalStateException&lt;/code&gt; is raised.
     * &lt;p/&gt;
     * If &lt;code&gt;isValid&lt;code&gt; returns &lt;code&gt;false&lt;/code&gt;, a &lt;code&gt;ConstraintViolation&lt;/code&gt;
     * object will be built per ConstraintViolation report including the default one (unless
     * {@link #disableDefaultConstraintViolation()} has been called).
     * &lt;p/&gt;
     * &lt;code&gt;ConstraintViolation&lt;/code&gt; objects generated from such a call
     * contain the same contextual information (root bean, path and so on) unless
     * the path has been overriden.
     * &lt;p/&gt;
     * To create a different &lt;code&gt;ConstraintViolation&lt;/code&gt;, a new constraint violation builder
     * has to be retrieved from &lt;code&gt;ConstraintValidatorContext&lt;/code&gt;
     *
     * Here are a few usage examples:
     * &lt;pre&gt;
     * {@code
     * // create new violation report with the default path the constraint is located on
     * context.buildConstraintViolationWithTemplate( "way too long" )
     *             .addConstraintViolation();
     *
     * // create new violation report in the "street" subnode of the default path
     * //the constraint is located on
     * context.buildConstraintViolationWithTemplate( "way too long" )
     *              .addNode( "street" )
     *              .addConstraintViolation();
     *
     * //create new violation report in the "addresses["home"].city.name" subnode
     * //of the default path the constraint is located on
     * context.buildConstraintViolationWithTemplate( "this detail is wrong" )
     *              .addNode( "addresses" )
     *              .addNode( "country" )
     *                  .inIterable().atKey( "home" )
     *              .addNode( "name" )
     *              .addConstraintViolation();
     * }
     * &lt;/pre&gt;
     *
     * @param messageTemplate new uninterpolated constraint message.
     * @return Returns an constraint violation builder
     */
    ConstraintViolationBuilder buildConstraintViolationWithTemplate(String messageTemplate);

    /**
     * &lt;code&gt;ConstraintViolation&lt;/code&gt; builder allowing to optionally associate
     * the violation report to a sub path.
     *
     * To create the &lt;code&gt;ConstraintViolation&lt;/code&gt;, one must call either one of
     * the #addConstraintViolation() methods available in one of the
     * interfaces of the fluent API.
     * If another method is called after #addConstraintViolation() on
     * &lt;code&gt;ConstraintViolationBuilder&lt;/code&gt; or any of its associated objects
     * an &lt;code&gt;IllegalStateException&lt;/code&gt; is raised.
     * 
     */
    interface ConstraintViolationBuilder {
        /**
         * Add a node to the path the &lt;code&gt;ConstraintViolation&lt;/code&gt; will be associated to.
         *
         * &lt;code&gt;name&lt;/code&gt; describes a single property. In particular,
         * dot (.) is not allowed.
         *
         * @param name property name
         * @return a builder representing node &lt;code&gt;name&lt;/code&gt;
         */
        NodeBuilderDefinedContext addNode(String name);

        /**
         * Add the new &lt;code&gt;ConstraintViolation&lt;/code&gt; to be generated if the
         * constraint validator marks the value as invalid.
         * Methods of this &lt;code&gt;ConstraintViolationBuilder&lt;/code&gt; instance and its nested
         * objects return &lt;code&gt;IllegalStateException&lt;/code&gt; from now on.
         *
         * @return the &lt;code&gt;ConstraintValidatorContext&lt;/code&gt; instance the
         *           &lt;code&gt;ConstraintViolationBuilder&lt;/code&gt; comes from
         */
        ConstraintValidatorContext addConstraintViolation();

        /**
         * Represent a node whose context is known
         * (ie index, key and isInIterable)
         */
        interface NodeBuilderDefinedContext {

            /**
             * Add a node to the path the &lt;code&gt;ConstraintViolation&lt;/code&gt; will be associated to.
             *
             * &lt;code&gt;name&lt;/code&gt; describes a single property. In particular,
             * dot (.) are not allowed.
             *
             * @param name property &lt;code&gt;name&lt;/code&gt;
             * @return a builder representing this node
             */
            NodeBuilderCustomizableContext addNode(String name);

            /**
             * Add the new &lt;code&gt;ConstraintViolation&lt;/code&gt; to be generated if the
             * constraint validator marks the value as invalid.
             * Methods of the &lt;code&gt;ConstraintViolationBuilder&lt;/code&gt; instance this object
             * comes from and the constraint violation builder nested
             * objects return &lt;code&gt;IllegalStateException&lt;/code&gt; after this call.
             *
             * @return &lt;code&gt;ConstraintValidatorContext&lt;/code&gt; instance the
             *           &lt;code&gt;ConstraintViolationBuilder&lt;/code&gt; comes from
             */
            ConstraintValidatorContext addConstraintViolation();
        }

        /**
         * Represent a node whose context is
         * configurable (ie index, key and isInIterable)
         */
        interface NodeBuilderCustomizableContext {

            /**
             * Mark the node as being in an &lt;code&gt;Iterable&lt;/code&gt; or a &lt;code&gt;Map&lt;/code&gt;
             * 
             * @return a builder representing iterable details
             */
            NodeContextBuilder inIterable();

            /**
             * Add a node to the path the &lt;code&gt;ConstraintViolation&lt;/code&gt; will be associated to.
             *
             * &lt;code&gt;name&lt;/code&gt; describes a single property. In particular,
             * dot (.) are not allowed.
             *
             * @param name property &lt;code&gt;name&lt;/code&gt;
             * @return a builder representing this node
             */
            NodeBuilderCustomizableContext addNode(String name);

            /**
             * Add the new &lt;code&gt;ConstraintViolation&lt;/code&gt; to be generated if the
             * constraint validator mark the value as invalid.
             * Methods of the &lt;code&gt;ConstraintViolationBuilder&lt;/code&gt; instance this object
             * comes from and the constraint violation builder nested
             * objects return &lt;code&gt;IllegalStateException&lt;/code&gt; after this call.
             *
             * @return &lt;code&gt;ConstraintValidatorContext&lt;/code&gt; instance the
             *           &lt;code&gt;ConstraintViolationBuilder&lt;/code&gt; comes from
             */
            ConstraintValidatorContext addConstraintViolation();
        }

        /**
         * Represent refinement choices for a node which is
         * in an &lt;code&gt;Iterator&lt;code&gt; or &lt;code&gt;Map&lt;/code&gt;.
         * If the iterator is an indexed collection or a map,
         * the index or the key should be set.
         */
        interface NodeContextBuilder {
            
            /**
             * Define the key the object is into the &lt;code&gt;Map&lt;/code&gt;
             *
             * @param key map key
             * @return a builder representing the current node
             */
            NodeBuilderDefinedContext atKey(Object key);

            /**
             * Define the index the object is into the &lt;code&gt;List&lt;/code&gt; or array
             *
             * @param index index
             * @return a builder representing the current node
             */
            NodeBuilderDefinedContext atIndex(Integer index);

            /**
             * Add a node to the path the &lt;code&gt;ConstraintViolation&lt;/code&gt; will be associated to.
             *
             * &lt;code&gt;name&lt;/code&gt; describes a single property. In particular,
             * dot (.) are not allowed.
             *
             * @param name property &lt;code&gt;name&lt;/code&gt;
             * @return a builder representing this node
             */
            NodeBuilderCustomizableContext addNode(String name);

            /**
             * Add the new &lt;code&gt;ConstraintViolation&lt;/code&gt; to be generated if the
             * constraint validator mark the value as invalid.
             * Methods of the &lt;code&gt;ConstraintViolationBuilder&lt;/code&gt; instance this object
             * comes from and the constraint violation builder nested
             * objects return &lt;code&gt;IllegalStateException&lt;/code&gt; after this call.
             *
             * @return &lt;code&gt;ConstraintValidatorContext&lt;/code&gt; instance the
             *           &lt;code&gt;ConstraintViolationBuilder&lt;/code&gt; comes from
             */
            ConstraintValidatorContext addConstraintViolation();
        }
    }
}</programlisting>

      <para>The <classname>ConstraintValidatorContext</classname> interface
      allows redefinition of the default constraint message generated when a
      constraint is not valid. By default, each invalid constraint leads to
      the generation of one error object represented by a
      <classname>ConstraintViolation</classname> object. This object is built
      from the default constraint message template as defined by the
      constraint declaration and the context in which the constraint
      declaration is placed (bean, property, attribute).</para>

      <para>The <classname>ConstraintValidatorContext</classname> methods let
      the constraint implementation disable the default
      <classname>ConstraintViolation</classname> generation and create one or
      more custom ones. The non-interpolated message passed as a parameter is
      used to build the <classname>ConstraintViolation</classname> message
      (the message interpolation operation is applied to it).</para>

      <para>By default, the <classname>Path</classname> exposed on the
      <classname>ConstraintViolation</classname> represents the path to the
      bean or property hosting the constraint (see <xref
      linkend="validationapi-constraintviolation" /> for more information).
      You can point it to a subpath of this default path by using the
      constraint violation builder fluent API.</para>

      <para><xref
      linkend="example-constraintsdefinitionimplementation-validationimplementation-errorbuilder" />
      shows a few examples.</para>

      <example id="example-constraintsdefinitionimplementation-validationimplementation-errorbuilder">
        <title>Using the fluent API to build custom constraint
        violations</title>

        <programlisting>//default path
context.buildConstraintViolationWithTemplate( "this detail is wrong" )
            .addConstraintViolation();

//default path + "street"
context.buildConstraintViolationWithTemplate( "this detail is wrong" )
            .addNode( "street" )
            .addConstraintViolation();

//default path + "addresses["home"].country.name"
context.buildConstraintViolationWithTemplate( "this detail is wrong" )
            .addNode( "addresses" )
            .addNode( "country" )
                .inIterable().atKey( "home" )
            .addNode( "name" )
            .addConstraintViolation();</programlisting>
      </example>

      <para>If <methodname>disableDefaultConstraintViolation</methodname> is
      called, no custom error is added (using the error builder) and if the
      constraint is not valid, a <classname>ValidationException</classname> is
      raised.</para>

      <section id="constraintsdefinitionimplementation-validationimplementation-example">
        <title>Example</title>

        <example>
          <title>ConstraintValidator implementation</title>

          <programlisting>/**
 * Check that a text is within the authorized syntax
 */
public class SyntaxValidator implements ConstraintValidator&lt;Syntax, String&gt; {
    private Set&lt;Format&gt; allowedFormats;

    /**
     * Configure the constraint validator based on the elements
     * specified at the time it was defined.
     * @param constraint the constraint definition
     */
    public void initialize(Syntax constraint) {
        allowedFormats = new HashSet( Arrays.asList( constraint.value() ) );
    }

    /**
     * Validate a specified value.
     * returns false if the specified value does not conform to the definition
     */
    public boolean isValid(String value, ConstraintValidatorContext context) {
        if ( value == null ) return true;

        return allowedFormats.size() == 0 
            || (! Collections.disjoint( guessFormat(value), allowedFormats ) );
    }

    Set&lt;Format&gt; guessFormats(String text) { ... }
}</programlisting>
        </example>

        <para>This <classname>ConstraintValidator</classname> checks that a
        text is within the accepted syntax. It also demonstrates an
        interesting best practice: return <literal>true</literal> on a null
        parameter</para>

        <para>The next example shows how to use
        <classname>ConstraintValidatorContext</classname>.</para>

        <example>
          <title>Use of ConstraintValidatorContext</title>

          <programlisting>/**
 * Check that a text is within the authorized syntax
 * Error messages are using either key:
 *  - com.acme.constraint.Syntax.unknown if no particular syntax is detected
 *  - com.acme.constraint.Syntax.unauthorized if the syntax is not allowed
 */
public class FineGrainedSyntaxValidator implements ConstraintValidator&lt;Syntax, String&gt; {
    private Set&lt;Format&gt; allowedFormats;

    /**
     * Configure the constraint validator based on the elements
     * specified at the time it was defined.
     * @param constraint the constraint definition
     */
    public void initialize(Syntax constraint) {
        allowedFormats = new HashSet( Arrays.asList( constraint.value() ) );
    }

    /**
     * Validate a specified value.
     * returns false if the specified value does not conform to the definition
     */
    public boolean isValid(String value, ConstraintValidatorContext context) {
        if ( value == null ) return true;
        Set&lt;Format&gt; guessedFormats = guessFormat(value);

        context.disableDefaultConstraintViolation();
        if ( guessedFormats.size() == 0 ) {
            String unknown = "{com.acme.constraint.Syntax.unknown}";
            context.buildConstraintViolationWithTemplate(unknown)
                       .addConstraintViolation();
        }
        else {
            String unauthorized = "{com.acme.constraint.Syntax.unauthorized}";
            context.buildConstraintViolationWithTemplate(unauthorized)
                       .addConstraintViolation();
        }

        return allowedFormats.size() == 0 
            || (! Collections.disjoint( guessFormat(value), allowedFormats ) ));
    }

    Set&lt;Format&gt; guessFormats(String text) { ... }
}</programlisting>
        </example>

        <para>The default error message is disabled and replaced by a specific
        error message depending on the type of constraint violation detected.
        In this case, only one error report is returned at a given time but a
        constraint validation implementation can return several error
        reports.</para>
      </section>
    </section>

    <section id="constraintsdefinitionimplementation-constraintfactory">
      <title>The ConstraintValidatorFactory</title>

      <para>Constraint validation implementation instances are created by a
      <classname>ConstraintValidatorFactory</classname>.</para>

      <programlisting>/**
 * Instantiate a &lt;code&gt;ConstraintValidator&lt;/code&gt; instance based off its class.
 * The &lt;code&gt;ConstraintValidatorFactory&lt;/code&gt; is &lt;b&gt;not&lt;/b&gt; responsible
 * for calling {@link ConstraintValidator#initialize(java.lang.annotation.Annotation)}.
 *
 * @author Dhanji R. Prasanna
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface ConstraintValidatorFactory {

    /**
     * @param key The class of the constraint validator to instantiate.
     *
     * @return A constraint validator instance of the specified class.
     */
    &lt;T extends ConstraintValidator&lt;?,?&gt;&gt; T getInstance(Class&lt;T&gt; key);
}</programlisting>

      <para>The default <classname>ConstraintValidatorFactory</classname>
      provided by the Bean Validation provider implementation uses the public
      no-arg constructor of the <classname>ConstraintValidator</classname>
      class. A custom <classname>ConstraintValidatorFactory</classname> can be
      provided; for example it may benefit from dependency injection control
      in constraint implementations. Any constraint implementation relying on
      <classname>ConstraintValidatorFactory</classname> behaviors specific to
      an implementation (dependency injection, no no-arg constructor and so
      on) are not considered portable, hence great care should be given before
      walking that path.</para>

      <para><classname>ConstraintValidatorFactory</classname> should not cache
      instances as the state of each instance can be altered in the
      <methodname>initialize</methodname> method.</para>

      <para>If an exception occurs in the factory while retrieving the
      <classname>ConstraintValidator</classname> instance, the runtime
      exception is wrapped in a <classname>ValidationException</classname>. If
      the instance returned by the factory is null, a
      <classname>ValidationException</classname> is raised.</para>
    </section>
  </chapter>

  <chapter id="constraintdeclarationvalidationprocess">
    <title>Constraint declaration and validation process</title>

    <para>The Bean Validation specification defines a framework for declaring
    constraints on JavaBean classes, fields and properties.</para>

    <para>Constraints are declared on types and evaluated against instances or
    graphs of instances.</para>

    <section id="constraintdeclarationvalidationprocess-requirements">
      <title>Requirements on classes to be validated</title>

      <para>Objects that are to be validated must fulfill the following
      requirements:</para>

      <itemizedlist>
        <listitem>
          <para>Properties to be validated must follow the method signature
          conventions for JavaBeans read properties, as defined by the
          JavaBeans specification.</para>
        </listitem>

        <listitem>
          <para>Static fields and static methods are excluded from
          validation.</para>
        </listitem>

        <listitem>
          <para>Constraints can be applied to interfaces and
          superclasses.</para>
        </listitem>
      </itemizedlist>

      <para>The target of an annotation definition can be a field, property,
      or type, provided that:</para>

      <itemizedlist>
        <listitem>
          <para>the constraint definition supports the specified target
          (<classname>java.lang.annotation.Target</classname>)</para>
        </listitem>

        <listitem>
          <para>the one of the <classname>ConstraintValidator</classname>s
          declared on the constraint supports the declared type of the target
          (see <xref linkend="typevalidatorresolution" />).</para>
        </listitem>
      </itemizedlist>

      <section id="constraintdeclarationvalidationprocess-requirements-object">
        <title>Object validation</title>

        <para>Constraint declarations can be applied to a class or an
        interface. Applying a constraint to a class or interface expresses a
        validation over the state of the class or the class implementing the
        interface.</para>
      </section>

      <section id="constraintdeclarationvalidationprocess-requirements-property">
        <title>Field and property validation</title>

        <para>Constraint declarations can be applied on both fields and
        properties for the same object type. The same constraint should
        however not be duplicated between a field and its associated property
        (the constraint validation would be applied twice). It is recommended
        for objects holding constraint declarations to adhere to a single
        state access strategy (either annotated fields or properties).</para>

        <note>
          <title>Java Persistence and Bean Validation</title>

          <para>For maximum portability, persistent properties hosting Bean
          Validation constraints should use the same access strategy used in
          Java Persistence. In other words, place your Bean Validation
          constraint annotations on the same element (field or getter) as your
          Java Persistence annotations.</para>
        </note>

        <para>When a field is annotated with a constraint declaration, field
        access strategy is used to access the state validated by such
        constraint.</para>

        <para>When a property is annotated with a constraint declaration,
        property access strategy is used to access the state validated by such
        constraint.</para>

        <para>When using field access strategy, the bean validation provider
        accesses the instance variable directly. When using the property
        access strategy, the bean validation provider accesses the state via
        the property accessor method. It is required that the class follows
        the method signature conventions for JavaBeans read properties (as
        defined by the JavaBeans <classname>Introspector</classname> class)
        for constrained properties when constrained properties are used. In
        this case, for every constraint property of type
        <classname>T</classname>, there is a getter method,
        <methodname>get&lt;Property-name&gt;</methodname>. For
        <code>boolean</code> properties,
        <methodname>is&lt;Property-name&gt;</methodname> is an alternative
        name for the getter method. Specifically, if
        <methodname>getX</methodname> is the name of the getter method, where
        <classname>X</classname> is a string, the name of the persistent
        property is defined by the result of
        <code>java.beans.Introspector.decapitalize(X)</code>.</para>

        <para>The fields or methods visibility are not constrained.
        Constraints on non getter methods are not supported.</para>
      </section>

      <section>
        <title>Graph validation</title>

        <para>In addition to supporting instance validation, validation of
        graphs of object is also supported. The result of a graph validation
        is returned as a unified set of constraint violations.</para>

        <para>Consider the situation where bean <classname>X</classname>
        contains a field of type <classname>Y</classname>. By annotating field
        <classname>Y</classname> with the <classname>@Valid</classname>
        annotation, the Validator will validate <classname>Y</classname> (and
        its properties) when <classname>X</classname> is validated. The exact
        type <classname>Z</classname> of the value contained in the field
        declared of type <classname>Y</classname> (subclass, implementation)
        is determined at runtime. The constraint definitions of
        <classname>Z</classname> are used. This ensures proper polymorphic
        behavior for associations marked <classname>@Valid</classname>.</para>

        <para>Collection-valued, array-valued and generally
        <classname>Iterable</classname> fields and properties may also be
        decorated with the <classname>@Valid</classname> annotation. This
        causes the contents of the iterator to be validated. Any object
        implementing <classname>java.lang.Iterable</classname> is supported.
        This includes specifically:</para>

        <itemizedlist>
          <listitem>
            <para>arrays of objects</para>
          </listitem>

          <listitem>
            <para><classname>java.util.Collection</classname></para>
          </listitem>

          <listitem>
            <para><classname>java.util.Set</classname></para>
          </listitem>

          <listitem>
            <para><classname>java.util.List</classname></para>
          </listitem>

          <listitem>
            <para><classname>java.util.Map</classname> (special treatment see
            below)</para>
          </listitem>
        </itemizedlist>

        <para>Each object provided by the iterator is validated. For
        <classname>Map</classname>, the value of each
        <classname>Map.Entry</classname> is validated (the key is not
        validated).</para>

        <para>Like regular references, its type is determined at runtime and
        the constraint definitions for this particular type are used.</para>

        <para>The <classname>@Valid</classname> annotation is applied
        recursively. A conforming implementation avoids infinite loops
        according to the rules described in <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine-graphvalidation" />.</para>
      </section>
    </section>

    <section>
      <title>Constraint declaration</title>

      <para>Constraint declarations are placed on classes or interfaces
      primarily through annotations. A constraint annotation (see <xref
      linkend="constraintsdefinitionimplementation-constraintdefinition" />),
      can be applied to a type, on any of the type's fields or on any of the
      JavaBeans-compliant properties.</para>

      <para>When a constraint is defined on a class, the class instance being
      validated is passed to the <classname>ConstraintValidator</classname>.
      When a constraint is defined on a field, the value of the field is
      passed to the <classname>ConstraintValidator</classname>. When a
      constraint is defined on a getter, the result of the getter invocation
      is passed to the <classname>ConstraintValidator</classname>.</para>
    </section>

    <section id="constraintdeclarationvalidationprocess-inheritance">
      <title>Inheritance (interface and superclass)</title>

      <para>A constraint declaration can be placed on an interface. For a
      given class, constraint declarations held on superclasses as well as
      interfaces are evaluated by the Bean Validation provider. Rules are
      formally described in <xref
      linkend="constraintdeclarationvalidationprocess-groupsequence-formaldefinition" />.</para>

      <para>The effect of constraint declarations is cumulative. Constraints
      declared on a superclass getter will be validated along with any
      constraints defined on an overridden version of the getter according to
      the Java Language Specification visibility rules.</para>
    </section>

    <section id="constraintdeclarationvalidationprocess-groupsequence">
      <title>Group and group sequence</title>

      <para>A group defines a subset of constraints. Instead of validating all
      constraints for a given object graph, only a subset is validated
      depending on the group targeted. Each constraint declaration defines the
      list of groups it belongs to. If no group is explicitly declared, a
      constraint belongs to the <classname>Default</classname> group.</para>

      <para>Groups are represented by interfaces.</para>

      <example>
        <title>Definition of groups</title>

        <programlisting>/**
 * Validation group checking a user is billable
 */
public interface Billable {}

/**
 * customer can buy without any harrassing checking process
 */
public interface BuyInOneClick {
}</programlisting>
      </example>

      <para>A constraint can belong to one or more groups.</para>

      <example id="example-assigngrouptoconstraints">
        <title>Assign groups to constraints</title>

        <programlisting>/**
 * User representation
 */
public class User {
    @NotNull
    private String firstname;

    @NotNull(groups = Default.class)
    private String lastname;

    @NotNull(groups = {Billable.class, BuyInOneClick.class})
    private CreditCard defaultCreditCard;
}</programlisting>
      </example>

      <para>During the validation call, one or more groups are validated. All
      the constraints belonging to this set of group is evaluated on the
      object graph. In <xref linkend="example-assigngrouptoconstraints" />,
      <classname>@NotNull</classname> is checked on
      <literal>defaultCreditCard</literal> when either the
      <classname>Billable</classname> or <classname>BuyInOneClick</classname>
      group is validated. <classname>@NotNull</classname> on
      <literal>firstname</literal> and on <literal>lastname</literal> are
      validated when the <classname>Default</classname> group is validated.
      Reminder: constraints held on superclasses and interfaces are
      considered.</para>

      <para><classname>Default</classname> is a group predefined by the
      specification</para>

      <programlisting>package javax.validation.groups;

/**
 * Default Bean Validation group.
 * Unless a list of group is explicitly defined:
 * &lt;ul&gt;
 *  &lt;li&gt;constraints belong to the Default group&lt;/li&gt;
 *  &lt;li&gt;validation apply on the Default group&lt;/li&gt;
 * &lt;/ul&gt;
 * Most structural constraints should belong to the default group.
 *
 * @author Emmanuel Bernard
 */
public interface Default {
}</programlisting>

      <section id="constraintdeclarationvalidationprocess-groupsequence-groupinheritance">
        <title>Group inheritance</title>

        <para>In some situations, a group is a superset of one or more groups.
        This can be described by Bean Validation. A group may inherit one or
        more groups by using interface inheritance.</para>

        <example>
          <title>Groups can inherit other groups</title>

          <programlisting>/**
 * Customer can buy without harrassing checking process
 */
public interface BuyInOneClick extends Default, Billable {}</programlisting>
        </example>

        <para>For a given interface <classname>Z</classname>, constraints
        marked as belonging to the group <classname>Z</classname> (ie where
        the annotation <methodname>groups</methodname> property contains the
        interface <classname>Z</classname>) or any of the super interfaces of
        <classname>Z</classname> (inherited groups) are considered part of the
        group <classname>Z</classname>.</para>

        <para>In the following example:</para>

        <example>
          <title>Use of a inherited group</title>

          <programlisting>/**
 * User representation
 */
public class User {
    @NotNull
    private String firstname;

    @NotNull(groups = Default.class)
    private String lastname;

    @NotNull(groups = {Billable.class})
    private CreditCard defaultCreditCard;
}</programlisting>
        </example>

        <para>validating the group <classname>BuyInOneClick</classname> will
        lead to the following constraints checking:</para>

        <itemizedlist>
          <listitem>
            <para><classname>@NotNull</classname> on
            <literal>firstname</literal> and
            <literal>lastname</literal></para>
          </listitem>

          <listitem>
            <para><classname>@NotNull</classname> on
            <literal>defaultCreditCard</literal></para>
          </listitem>
        </itemizedlist>

        <para>because <classname>Default</classname> and
        <classname>Billable</classname> are superinterfaces of
        <classname>BuyInOneClick</classname>.</para>
      </section>

      <section id="constraintdeclarationvalidationprocess-groupsequence-groupsequence">
        <title>Group sequence</title>

        <para>By default, constraints are evaluated in no particular order
        regardless of which groups they belong to. It is however useful in
        some situations to control the order of constraints evaluation. There
        are often scenarios where a preliminary set of constraints should be
        evaluated prior to other constraints. Here are two examples:</para>

        <itemizedlist>
          <listitem>
            <para>The second group depends on a stable state to run properly.
            This stable state is verified by the first group.</para>
          </listitem>

          <listitem>
            <para>The second group is a heavy consumer of time, CPU or memory
            and its evaluation should be avoided if possible.</para>
          </listitem>
        </itemizedlist>

        <para>To implement such ordering, a group can be defined as a sequence
        of other groups. Each group in a group sequence must be processed
        sequentially in the order defined by
        <methodname>@GroupSequence.value</methodname> when the group defined
        as a sequence is requested. Note that a group member of a sequence can
        itself be composed of several groups via inheritance or sequence
        definition. In this case, each composed group must respect the
        sequence order as well.</para>

        <!--TODO add example-->

        <para>Processing a group is defined in <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine" />
        ; if one of the groups processed in the sequence generates one or more
        constraint violation, the groups following in the sequence must not be
        processed. This ensures that a set of constraint is evaluated only if
        another set of constraint is valid.</para>

        <para>Groups defining a sequence and groups composing a sequence must
        not be involved in a cyclic dependency either directly or indirectly,
        either through cascaded sequence definition or group inheritance. If a
        group containing such a circularity is evaluated, a
        <classname>GroupDefinitionException</classname> is raised.</para>

        <para>Groups defining a sequence should not directly inherit other
        groups. In other words, the interface hosting the group sequence
        should not have any super interface.</para>

        <para>Groups defining a sequence should not be used directly in
        constraint declarations. In other words, the interface hosting the
        group sequence should not be used in a constraint declaration.</para>

        <para>To define a group as a sequence, the interface must be annotated
        with the <classname>@GroupSequence</classname> annotation.</para>

        <programlisting>/**
 * Define a group sequence
 * The interface hosting &lt;code&gt;@GroupSequence&lt;/code&gt; is representing 
 * the group sequence.
 * When hosted on a class, represents the &lt;code&gt;Default&lt;/code&gt; group
 * for that class.
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
@Target({ TYPE })
@Retention(RUNTIME)
public @interface GroupSequence {
    Class&lt;?&gt;[] value();
}</programlisting>

        <para>Here is a usage example</para>

        <example id="example-groupsequence">
          <title>Make use of group sequence</title>

          <programlisting>@ZipCodeCoherenceChecker(groups = Address.HighLevelCoherence.class)
public class Address {
    @NotNull @Size(max = 50)
    private String street1;

    @NotNull @ZipCode
    private String zipcode;

    @NotNull @Size(max = 30)
    private String city;

    /**
     * check coherence on the overall object
     * Needs basic checking to be green first
     */
    public interface HighLevelCoherence {}

    /**
     * check both basic constraints and high level ones.
     * high level constraints are not checked if basic constraints fail
     */
    @GroupSequence({Default.class, HighLevelCoherence.class})
    public interface Complete {}
}</programlisting>
        </example>

        <para>In <xref linkend="example-groupsequence" />, when the
        <classname>Address.Complete</classname> group is validated, all
        constraints belonging to the <classname>Default</classname> group are
        validated. If any of them fail, the validation skips the
        <classname>HighLevelCoherence</classname> group. If all
        <classname>Default</classname> constraints pass,
        <classname>HighLevelCoherence</classname> constraints are
        evaluated.</para>

        <note>
          <para>A given constraint can belong to two or more groups ordered by
          a sequence. In this case, the constraint is evaluated as part of the
          first group and ignored in the subsequent group(s). See <xref
          linkend="constraintdeclarationvalidationprocess-validationroutine" />
          for more information.</para>
        </note>

        <!--Make explicit what happens if a group is part of a group sequence and also explicitly called in validator.validate()-->
      </section>

      <section id="constraintdeclarationvalidationprocess-groupsequence-redefiningdefaultgroup">
        <title>Redefining the Default group for a class</title>

        <para>In <xref linkend="example-groupsequence" />, validating the
        <classname>Default</classname> group does not validate
        <classname>HighLevelCoherence</classname> constraints. To ensure a
        complete validation, a user must use the
        <classname>Complete</classname> group. This breaks some of the
        encapsulation you could expect. You can work around this by redefining
        what the <classname>Default</classname> group means for a given class.
        To redefine <classname>Default</classname> for a class, place a
        <classname>@GroupSequence</classname> annotation on the class ; this
        sequence expresses the sequence of groups that does substitute
        <classname>Default</classname> for this class.</para>

        <example id="example-overridedefaultgroup">
          <title>Redefining Default group for Address</title>

          <programlisting>@GroupSequence({Address.class, HighLevelCoherence.class})
@ZipCodeCoherenceChecker(groups = Address.HighLevelCoherence.class)
public class Address {
    @NotNull @Size(max = 50)
    private String street1;

    @NotNull @ZipCode
    private String zipcode;

    @NotNull @Size(max = 30)
    private String city;

    /**
     * check coherence on the overall object
     * Needs basic checking to be green first
     */
    public interface HighLevelCoherence {}
}</programlisting>
        </example>

        <para>In <xref linkend="example-overridedefaultgroup" />, when an
        address object is validated for the group
        <classname>Default</classname>, all constraints belonging to the group
        <classname>Default</classname> and hosted on
        <classname>Address</classname> are evaluated. If none fails, all
        <classname>HighLevelCoherence</classname> constraints present on
        <classname>Address</classname> are evaluated. In other words, when
        validating the <classname>Default</classname> group for
        <classname>Address</classname>, the group sequence defined on the
        <classname>Address</classname> class is used.</para>

        <para>Since sequences cannot have circular dependencies, using
        <classname>Default</classname> in the declaration of a sequence is not
        an option. Constraints hosted on a class <classname>A</classname> and
        belonging to the <classname>Default</classname> group (by default or
        explicitly) implicitly belong to the group
        <classname>A</classname>.</para>

        <para>A sequence defined on a class <classname>A</classname> (ie.
        redefining the <classname>Default</classname> groups for the class)
        must contain the group <classname>A</classname>. In other words, the
        default constraints hosted on a class must be part of the sequence
        definition. If a <classname>@GroupSequence</classname> redefining the
        <classname>Default</classname> group for a class
        <classname>A</classname> does not contain the group
        <classname>A</classname>, a
        <classname>GroupDefinitionException</classname> is raised when the
        class is validated or when its metadata is requested.</para>
      </section>

      <section id="constraintdeclarationvalidationprocess-groupsequence-implicitgrouping">
        <title>Implicit grouping</title>

        <para>It is possible to implicitly group some constraints in the same
        group without explicitly listing such a group in the constraint
        declaration. Every constraint hosted on an interface
        <classname>Z</classname> and part of the
        <classname>Default</classname> group (implicitly or explicitly)
        belongs to the group <classname>Z</classname>. This is useful to
        validate the partial state of an object based on a role represented by
        an interface.</para>

        <example>
          <title>Example of interface / group hosting constraints</title>

          <programlisting>/**
 * Auditable object contract
 */
public interface Auditable {
    @NotNull String getCreationDate();
    @NotNull String getLastUpdate();
    @NotNull String getLastModifier();
    @NotNull String getLastReader();
}

/**
 * Represents an order in the system
 */
public class Order implements Auditable {
    private String creationDate;
    private String lastUpdate;
    private String lastModifier;
    private String lastReader;

    private String orderNumber;

    public String getCreationDate() {
        return this.creationDate;
    }

    public String getLastUpdate() {
        return this.lastUpdate;
    }

    public String getLastModifier() {
        return this.lastModifier;
    }

    public String getLastReader() {
        return this.lastReader;
    }

    @NotNull @Size(min=10, max=10)
    public String getOrderNumber() {
        return this.orderNumber;
    }
}</programlisting>
        </example>

        <para>When an <classname>Order</classname> object is validated on the
        <classname>Default</classname> group, the following constraints are
        validated: <classname>@NotNull</classname> on
        <methodname>getCreationDate</methodname>,
        <methodname>getLastUpdate</methodname>,
        <methodname>getLastModifier</methodname>,
        <methodname>getLastReader</methodname>,
        <methodname>getOrderNumber</methodname> and
        <classname>@Size</classname> on
        <methodname>getOrderNumber</methodname> as all belong to the
        <classname>Default</classname> group.</para>

        <para>When an <classname>Order</classname> object is validated on the
        <classname>Auditable</classname> group, the following constraints are
        validated: <classname>@NotNull</classname> on
        <methodname>getCreationDate</methodname>,
        <methodname>getLastUpdate</methodname>,
        <methodname>getLastModifier</methodname>,
        <methodname>getLastReader</methodname>. Only the constraints present
        on <classname>Auditable</classname> (and any of its super interfaces)
        and belonging to the <classname>Default</classname> group are
        validated when the group <classname>Auditable</classname> is
        requested. It allows the caller to validate that a given object can be
        safely audited even if the object state itself is not valid.</para>
      </section>

      <section id="constraintdeclarationvalidationprocess-groupsequence-formaldefinition">
        <title>Formal group definitions</title>

        <para>The formal rules defining groups are as followed. <emphasis>Text
        in italic are comments about the rules.</emphasis></para>

        <para>For every class <classname>X</classname>:</para>

        <orderedlist numeration="upperalpha">
          <listitem>
            <para>For each superclass <classname>Y</classname> of
            <classname>X</classname>, the group <classname>Y</classname>
            contains all constraints of the group <classname>Y</classname> of
            <classname>Y</classname></para>

            <para><emphasis>this rule prepares formal concepts for recursive
            discovery</emphasis></para>
          </listitem>

          <listitem>
            <para>The group <classname>X</classname> contains the following
            constraints:</para>

            <para><emphasis>group <classname>X</classname> is a group used on
            sequences redefining the default group on a class (see <xref
            linkend="constraintdeclarationvalidationprocess-groupsequence-redefiningdefaultgroup" />)</emphasis></para>

            <orderedlist>
              <listitem>
                <para>every constraint declared by the class
                <classname>X</classname> which does not declare a group or
                does declare the group <classname>Default</classname>
                explicitly.</para>

                <para><emphasis>all <classname>Default</classname> constraints
                hosted on <classname>X</classname></emphasis></para>
              </listitem>

              <listitem>
                <para>every constraint declared by any interface implemented
                by <classname>X</classname> and not annotated
                <classname>@GroupSequence</classname> which does not
                explicitly declare a group or does declare the group
                <classname>Default</classname> explicitly.</para>

                <para><emphasis>all <classname>Default</classname> constraints
                hosted on interfaces of <classname>X</classname>: constraints
                are inherited by the class hierarchy. Interfaces marked as
                <classname>@GroupSequence</classname> are
                ignored.</emphasis></para>
              </listitem>

              <listitem>
                <para>if <classname>X</classname> has a direct superclass
                <classname>Y</classname>, every constraint in the group
                <classname>Y</classname></para>

                <para><emphasis>all <classname>Default</classname> constraints
                hosted on the superclasses of <classname>X</classname>:
                constraints are inherited by the class
                hierarchy</emphasis></para>
              </listitem>
            </orderedlist>
          </listitem>

          <listitem>
            <para>If <classname>X</classname> has no
            <classname>@GroupSequence</classname> annotation, the group
            <classname>Default</classname> contains the following
            constraints:</para>

            <para><emphasis>this rule defines which constraints are evaluated
            when validating <classname>Default</classname> on
            <classname>X</classname>.</emphasis></para>

            <orderedlist>
              <listitem>
                <para>every constraint in the group
                <classname>X</classname></para>
              </listitem>

              <listitem>
                <para>if <classname>X</classname> has a direct superclass
                <classname>Y</classname>, every constraint in the group
                <classname>Default</classname> of
                <classname>Y</classname></para>

                <para><emphasis>this rule is necessary in case
                <classname>Y</classname> redefines the group
                <classname>Default</classname></emphasis></para>
              </listitem>
            </orderedlist>
          </listitem>

          <listitem>
            <para>If <classname>X</classname> does have a
            <classname>@GroupSequence</classname> annotation, the group
            <classname>Default</classname> contains every constraint belonging
            to every group declared by the
            <classname>@GroupSequence</classname> annotation.</para>

            <para><emphasis>this rule describes how a class can redefine the
            group <classname>Default</classname> for itself (see <xref
            linkend="constraintdeclarationvalidationprocess-groupsequence-redefiningdefaultgroup" />)</emphasis></para>

            <itemizedlist>
              <listitem>
                <para>the <classname>@GroupSequence</classname> annotation
                must declare the group <classname>X</classname></para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>For every interface <classname>Z</classname>, the group
            <classname>Z</classname> contains the following
            constraints:</para>

            <para><emphasis>this rule defines how non
            <classname>Default</classname> groups are
            defined</emphasis></para>

            <orderedlist>
              <listitem>
                <para>every constraint declared by the interface
                <classname>Z</classname> which does not explicitly declare a
                group or does declare the group <classname>Default</classname>
                explicitly.</para>

                <para><emphasis>all <classname>Default</classname> constraints
                hosted on <classname>Z</classname>: this rule formally defines
                implicit grouping per interface (see <xref
                linkend="constraintdeclarationvalidationprocess-groupsequence-implicitgrouping" />)</emphasis></para>
              </listitem>

              <listitem>
                <para>every constraint declared by any superinterface not
                annotated <classname>@GroupSequence</classname> of the
                interface <classname>Z</classname> which does not explicitly
                declare a group</para>

                <para><emphasis>all <classname>Default</classname> constraints
                hosted on interfaces of <classname>Z</classname>: groups can
                be inherited (see <xref
                linkend="constraintdeclarationvalidationprocess-groupsequence-groupinheritance" />)</emphasis></para>
              </listitem>

              <listitem>
                <para>every constraint declared by the class
                <classname>X</classname> which explicitly declares the group
                <classname>Z</classname></para>

                <para><emphasis>every constraint hosted by
                <classname>X</classname> and marked as belonging to the group
                <classname>Z</classname></emphasis></para>
              </listitem>

              <listitem>
                <para>every constraint declared by any interface implemented
                by <classname>X</classname> and not annotated
                <classname>@GroupSequence</classname> which explicitly
                declares the group <classname>Z</classname></para>

                <para><emphasis>every constraint hosted by any interface of
                <classname>X</classname> and marked as belonging to the group
                <classname>Z</classname></emphasis></para>
              </listitem>

              <listitem>
                <para>if <classname>X</classname> has a direct superclass
                <classname>Y</classname>, every constraint in the group
                <classname>Z</classname> of <classname>Y</classname></para>

                <para><emphasis>every constraint hosted by any superclass of
                <classname>X</classname> and marked as belonging to the group
                <classname>Z</classname></emphasis></para>
              </listitem>
            </orderedlist>
          </listitem>

          <listitem>
            <para>For every interface <classname>Z</classname> annotated
            <classname>@GroupSequence</classname>, the group
            <classname>Z</classname> contains every constraint belonging to
            every group declared by the <classname>@GroupSequence</classname>
            annotation.</para>

            <para><emphasis>defines the composition side of group sequence but
            does not define the ordering behavior of sequence (see <xref
            linkend="constraintdeclarationvalidationprocess-groupsequence-groupsequence" />)</emphasis></para>
          </listitem>
        </orderedlist>

        <para>When a given group <classname>G</classname> (represented by an
        interface <classname>G</classname>) is requested for the validation of
        a class <classname>X</classname>:</para>

        <itemizedlist>
          <listitem>
            <para>constraints belonging to the group <classname>G</classname>
            are evaluated</para>
          </listitem>

          <listitem>
            <para>if the interface <classname>G</classname> is not annotated
            <classname>@GroupSequence</classname>, every group represented by
            the super interface of <classname>G</classname> are requested for
            validation</para>
          </listitem>

          <listitem>
            <para>if the interface <classname>G</classname> is annotated with
            <classname>@GroupSequence</classname>, every group represented by
            the interfaces declared by the
            <classname>@GroupSequence</classname> annotation are requested for
            validation</para>

            <itemizedlist>
              <listitem>
                <para>the validation of groups declared to the
                <classname>@GroupSequence</classname> must happen in the
                sequencing order declared by
                <classname>@GroupSequence</classname>: the sequencing order is
                propagated to the groups composing the sequenced group (via
                inheritance or group sequence)</para>
              </listitem>

              <listitem>
                <para>if a group validation triggers the failure of one or
                more constraints, groups following in the sequence must not be
                evaluated.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>if the group <classname>G</classname> represents the
            <classname>Default</classname> group of <classname>X</classname>
            overridden by <classname>@GroupSequence</classname>, operations
            are equivalent</para>
          </listitem>
        </itemizedlist>

        <para>When the <classname>Default</classname> group of a given class
        <classname>X</classname> is overridden via
        <classname>@GroupSequence</classname>, its validation is as
        followed:</para>

        <itemizedlist>
          <listitem>
            <para>every group represented by the interfaces declared by the
            <classname>@GroupSequence</classname> annotation are requested for
            validation</para>

            <itemizedlist>
              <listitem>
                <para>the validation of groups declared to the
                <classname>@GroupSequence</classname> must happen in the
                sequencing order declared by
                <classname>@GroupSequence</classname>: the sequencing order is
                propagated to the groups composing the sequenced group (via
                inheritance or group sequence)</para>
              </listitem>

              <listitem>
                <para>if a group validation triggers the failure of one or
                more constraints, groups following in the sequence must not be
                evaluated.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>Unless defined by a <classname>@GroupSequence</classname>,
        evaluation ordering is not constrained. In particular, several groups
        can be validated in the same pass. If a group definition leads to a
        circular sequencing order between groups, a
        <classname>GroupDefinitionException</classname> is raised.</para>

        <note>
          <para>A group <classname>G</classname> sequenced (directly or
          indirectly) to be executed before itself is not considered a
          circular reference.</para>
        </note>
      </section>
    </section>

    <section id="constraintdeclarationvalidationprocess-validationroutine">
      <title>Validation routine</title>

      <para>For a given group to validate, the validation routine applied on a
      given bean instance is expected to execute the constraint validations in
      no particular order:</para>

      <itemizedlist>
        <listitem>
          <para>for all <emphasis>reachable</emphasis> fields, execute all
          field level validations (including the ones expressed on
          superclasses) matching the targeted group unless the given
          validation constraint has already been processed during this
          validation routine for a given navigation path (see <xref
          linkend="constraintdeclarationvalidationprocess-validationroutine-graphvalidation" />)
          as part of a previous group match.</para>
        </listitem>

        <listitem>
          <para>for all <emphasis>reachable</emphasis> getters, execute all
          getter level validations (including the ones expressed on interfaces
          and superclasses) matching the targeted group unless the given
          validation constraint has already been processed during this
          validation routine for a given navigation path (see <xref
          linkend="constraintdeclarationvalidationprocess-validationroutine-graphvalidation" />)
          as part of a previous group match.</para>
        </listitem>

        <listitem>
          <para>execute all class level validations (including the ones
          expressed on interfaces and superclasses) matching the targeted
          group unless the given validation constraint has already been
          processed during this validation routine for a given navigation path
          (see <xref
          linkend="constraintdeclarationvalidationprocess-validationroutine-graphvalidation" />)
          as part of a previous group match.</para>
        </listitem>

        <listitem>
          <para>for all <emphasis>reachable</emphasis> and
          <emphasis>cascadable</emphasis> associations, execute all cascading
          validations (see <xref
          linkend="constraintdeclarationvalidationprocess-validationroutine-graphvalidation" />)
          including the ones expressed on interfaces and superclasses (see
          <xref
          linkend="constraintdeclarationvalidationprocess-groupsequence-formaldefinition" />)</para>
        </listitem>
      </itemizedlist>

      <para>Reachable fields, getters and associations as well as cascadable
      associations are defined in <xref
      linkend="constraintdeclarationvalidationprocess-validationroutine-traversable" />.</para>

      <para>Note that this implies that a given validation constraint will not
      be processed more than once per validation.</para>

      <para>Unless ordered by group sequences, groups can be validated in no
      particular order. This implies that the validation routine can be run
      for several groups in the same pass.</para>

      <para>The object validation routine is described as such. For each
      constraint declaration:</para>

      <itemizedlist>
        <listitem>
          <para>determine for the constraint declaration, the appropriate
          <classname>ConstraintValidator</classname> to use (see <xref
          linkend="typevalidatorresolution" />).</para>
        </listitem>

        <listitem>
          <para>execute the <methodname>isValid</methodname> operation (from
          the constraint validation implementation) on the appropriate data
          (see <xref
          linkend="constraintsdefinitionimplementation-validationimplementation" />)</para>
        </listitem>

        <listitem>
          <para>if <methodname>isValid</methodname> returns true, continue to
          the next constraint,</para>
        </listitem>

        <listitem>
          <para>if <methodname>isValid</methodname> returns false, the Bean
          Validation provider populates
          <classname>ConstraintViolation</classname> object(s) according to
          the rules defined in <xref
          linkend="constraintsdefinitionimplementation-validationimplementation" />
          and appends these objects to the list of returned invalid
          violations.</para>
        </listitem>
      </itemizedlist>

      <section id="constraintdeclarationvalidationprocess-validationroutine-graphvalidation">
        <title>Object graph validation</title>

        <para>The <classname>@Valid</classname> annotation on a given
        association (i.e. object reference or collection, array,
        <classname>Iterable</classname> of objects), dictates the Bean
        Validator implementation to apply recursively the bean validation
        routine on (each of) the associated object(s). This mechanism is
        recursive: an associated object can itself contain cascaded
        references.</para>

        <para>Null references are ignored.</para>

        <para>To prevent infinite loops, the Bean Validation implementation
        must ignore the cascading operation if the associated object instance
        has already been validated in the current navigation path (starting
        from the root object). See <xref linkend="example-oglimit" /> for an
        example. A navigation path is defined as a set of
        <classname>@Valid</classname> associations starting from the root
        object instance and reaching the associated instance. A given
        navigation path cannot contain the same instance multiple times (the
        complete validated object graph can though). See <xref
        linkend="example-oglimit" /> for an example.</para>

        <note>
          <para>This object graph navigation can lead to multiple validations
          of the same constraint and the same object instance but the set of
          constraint validation is deterministic and the algorithm prevents
          infinite loops.</para>
        </note>

        <example id="example-oglimit">
          <title>Object graph limits</title>

          <programlisting>#assuming the following object graph

Order -(lines)-&gt; Orderline1
Order -(lines)-&gt; Orderline2
Orderline1 -(order)-&gt; Order
Orderline2 -(order)-&gt; Order
Order -(customer)-&gt; User
Order -(shippingAddress)-&gt; Address1
Order -(billingAddress)-&gt; Address2
Address1 -(inhabitant)-&gt; User
Address2 -(inhabitant)-&gt; User
User -(addresses)-&gt; Address1
User -(addresses)-&gt; Address2

#validation branches are as followed
Order -(lines)-&gt; Orderline1
  - order is ignored: Order is already present in the branch 

Order -(lines)-&gt; Orderline2
  - order is ignored: Order is already present in the branch

Order -(customer)-&gt; User -(addresses)-&gt; Address1
  - inhabitant is ignored: User is already present in the branch

Order -(customer)-&gt; User -(addresses)-&gt; Address2
  - inhabitant is ignored: User is already present in the branch

Order -(shippingAddress)-&gt; Address1 -(inhabitant)-&gt; User 
  - addresses to Address1 is ignored: Address1 is already present in the branch

Order -(shippingAddress)-&gt; Address1 -(inhabitant)-&gt; User -(addresses)-&gt; Address2
  - inhabitant is ignored: User is already present in the branch

Order -(billingAddress)-&gt; Address2 -(inhabitant)-&gt; User 
  - addresses to Address2 is ignored: Address2 is already present in the branch

Order -(billingAddress)-&gt; Address2 -(inhabitant)-&gt; User -(addresses)-&gt; Address1
  - inhabitant is ignored: User is already present in the branch</programlisting>
        </example>

        <para>The <classname>ConstraintViolation</classname> objects are built
        when a failing constraint on an associated object is found. They
        reflect the path to reach the object from the root validated object
        (See <xref linkend="validationapi-constraintviolation" />).</para>

        <para><classname>@Valid</classname> is an orthogonal concept to the
        notion of group. If two groups are in sequence, the first group must
        pass for all associated objects before the second group is evaluated.
        Note however that the <classname>Default</classname> group sequence
        overriding is local to the class it is defined on and is not
        propagated to the associated objects. The following example
        illustrates this:</para>

        <para><example>
            <title>Class Driver with redefined default group</title>

            <programlisting>@GroupSequence({ Minimal.class, Driver.class })
public class Driver {
  @Min(value = 18, groups = Minimal.class)
  int age;

  @AssertTrue
  Boolean passedDrivingTest;

  @Valid
  Car car;

  // setter/getters
}</programlisting>
          </example><example>
            <title>Class Car with redefined default group</title>

            <programlisting>@GroupSequence({ Car.class, Later.class })
public class Car {
  @NotNull
  String type;

  @AssertTruegroups = Later.class)
  Boolean roadWorthy;

  // setter/getters
}</programlisting>
          </example><example>
            <title>Defining a group sequence</title>

            <programlisting>@GroupSequence({ Minimal.class, Later.class })
public interface SequencedGroups {
}</programlisting>
          </example><example>
            <title>Group sequence overriding is not propagated to associated
            objects</title>

            <programlisting>Validator validator = Validation.buildDefaultValidatorFactory().getValidator();

Driver driver = new Driver();
driver.setAge(16);
Car porsche = new Car();
driver.setCar(porsche);


Set&lt;ConstraintViolation&lt;Driver&gt;&gt; violations = validator.validate( driver );

assert violations.size() == 2;

violations = validator.validate( driver, SequencedGroups.class );

assert violations.size() == 1;</programlisting>
          </example>The default group sequence is redefined for the
        <classname>Driver</classname> as well as <classname>Car</classname>.
        When the default group is requested via
        <methodname>validator.validate( driver )</methodname> the group
        <classname>Minimal</classname> gets validated in class
        <classname>Driver</classname>. The constraint will fail since the
        driver's age in the example is only 16. The constraint on
        <property>passedDrivingTest</property> will not be evaluated due to
        the redefined default sequence of <classname>Driver</classname>.
        However, there is one more constraint violation, namely the
        <classname>@NotNull</classname> on <property>Car.type</property>. The
        reason for this is that the group <classname>Default</classname> gets
        propagated to <classname>Car</classname> (not
        <classname>Minimal</classname>). Class <classname>Driver</classname>
        defines its own group sequence which means that <classname>only
        @NotNull</classname> on <property>type</property> gets
        evaluated.</para>

        <para>In the second call to <methodname>validate</methodname> the
        group <classname>SequencedGroups</classname> is requested which
        defines a sequence of <classname>Minimal</classname> followed by
        <classname>Later</classname>. In this case there is only one
        constraint violation. Again <classname>@Min</classname> on
        <property>age</property> fails, but in this case the group
        <classname>Minimal</classname> gets propagated to
        <classname>Car</classname> which does not have any constraints defined
        against this group. Constraints belonging to the group
        <classname>Later</classname> won't get validated until all constraints
        belonging to <classname>Minimal</classname> pass.</para>
      </section>

      <section id="constraintdeclarationvalidationprocess-validationroutine-traversable">
        <title>Traversable property</title>

        <para>In some cases, the state of some properties should not be
        accessed. For example, if a property loaded by a Java Persistence
        provider is a lazy property or a lazy association, accessing its state
        would trigger a load from the database. An undesired behavior.</para>

        <para>Bean Validation offers a way to control which property can and
        cannot be accessed via the
        <classname>TraversableResolver.isReachable</classname>()
        contract.</para>

        <para>Likewise, it is sometimes undesirable to cascade validation
        despite the use of <classname>@Valid</classname>. Java Persistence 2
        for example does not cascade to associated entities during flush. You
        can control this behavior by implementing
        <methodname>Traversable.isCascadable()</methodname>.</para>

        <programlisting>/**
 * Contract determining if a property can be accessed by the Bean Validation provider.
 * This contract is called for each property that is being either validated or cascaded.
 *
 * A traversable resolver implementation must be thread-safe.
 *
 * @author Emmanuel Bernard
 */
public interface TraversableResolver {
    /**
     * Determine if the Bean Validation provider is allowed to reach the property state
     *
     * @param traversableObject object hosting &lt;code&gt;traversableProperty&lt;/code&gt; or null
     *                          if &lt;code&gt;validateValue&lt;/code&gt; is called
     * @param traversableProperty the traversable property.
     * @param rootBeanType type of the root object passed to the Validator.
     * @param pathToTraversableObject path from the root object to
     *        &lt;code&gt;traversableObject&lt;/code&gt;
     *        (using the path specification defined by Bean Validator).
     * @param elementType either &lt;code&gt;FIELD&lt;/code&gt; or &lt;code&gt;METHOD&lt;/code&gt;.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the Bean Validation provider is allowed to
     *         reach the property state, &lt;code&gt;false&lt;/code&gt; otherwise.
     */
    boolean isReachable(Object traversableObject,
                        Path.Node traversableProperty,
                        Class&lt;?&gt; rootBeanType,
                        Path pathToTraversableObject,
                        ElementType elementType);

    /**
     * Determine if the Bean Validation provider is allowed to cascade validation on
     * the bean instance returned by the property value
     * marked as &lt;code&gt;@Valid&lt;/code&gt;.
     * Note that this method is called only if &lt;code&gt;isReachable&lt;/code&gt; returns true
     * for the same set of arguments and if the property is marked as &lt;code&gt;@Valid&lt;/code&gt;
     *
     * @param traversableObject object hosting &lt;code&gt;traversableProperty&lt;/code&gt; or null
     *                          if &lt;code&gt;validateValue&lt;/code&gt; is called
     * @param traversableProperty the traversable property.
     * @param rootBeanType type of the root object passed to the Validator.
     * @param pathToTraversableObject path from the root object to
     *        &lt;code&gt;traversableObject&lt;/code&gt;
     *        (using the path specification defined by Bean Validator).
     * @param elementType either &lt;code&gt;FIELD&lt;/code&gt; or &lt;code&gt;METHOD&lt;/code&gt;.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the Bean Validation provider is allowed to
     *         cascade validation, &lt;code&gt;false&lt;/code&gt; otherwise.
     */
    boolean isCascadable(Object traversableObject,
                         Path.Node traversableProperty,
                         Class&lt;?&gt; rootBeanType,
                         Path pathToTraversableObject,
                         ElementType elementType);
}</programlisting>

        <para><methodname>isReachable</methodname> is called for every
        property about to be accessed either for validation or for cascading.
        A property is <emphasis>reachable</emphasis> if this method returns
        true.</para>

        <para><methodname>isCascadable</methodname> is called for every
        property about to be cascaded (ie. marked as
        <classname>@Valid</classname>). A property is
        <emphasis>cascadable</emphasis> if this method returns true.</para>

        <note>
          <para><methodname>isCascadable</methodname> for a given property is
          only called if <methodname>isReachable</methodname> returns true. In
          other words, <methodname>isReachable</methodname> is always called
          before <methodname>isCascadable</methodname> for a given
          property.</para>
        </note>

        <para><literal>traversableObject</literal> is the object instance
        being evaluated. <literal>null</literal> if the check is triggered as
        part of a <methodname>validateValue</methodname> call.</para>

        <para><literal>traversableProperty</literal> is the
        <classname>Node</classname> representing the property hosted by the
        <methodname>traversableObject</methodname> being considered for
        traversal. The name of a property is defined in <xref
        linkend="constraintdeclarationvalidationprocess-requirements-property" />.</para>

        <para><literal>rootBeanType</literal> is the class of the root being
        validated (and passed to the <methodname>validate</methodname>
        method).</para>

        <para><literal>pathToTraversableObject</literal> is the
        <classname>Path</classname> from the
        <methodname>rootBeanType</methodname> down to the
        <methodname>traversableObject</methodname>. If the root object is
        <classname>traversableObject</classname>,
        <classname>pathToTraversableObject</classname> is composed of a single
        Node whose name is null. The path is described following the
        conventions described in <xref
        linkend="validationapi-constraintviolation" />
        (<methodname>getPropertyPath</methodname>).</para>

        <para><literal>elementType</literal> is the
        <classname>java.lang.annotation.ElementType</classname> the annotation
        is placed on. It can be either <literal>FIELD</literal> or
        <literal>METHOD</literal>. Any other value is not expected.</para>

        <para>The Bean Validation provider must not access the state of a
        property, nor validate its constraints if the property is not
        traversable. A property is traversable if
        <classname>TraversableResolver</classname> returns true for this
        property.</para>

        <para>If an exception occurs when the
        <classname>TraversableResolver</classname> is called, the exception is
        wrapped into a <classname>ValidationException</classname>.</para>

        <para>The following example assumes the object graph defined in <xref
        linkend="example-ognav-definitions" /> and assumes the validation
        operation is applied on an address object.</para>

        <example id="example-ognav-definitions">
          <title>Definitions used in the example</title>

          <programlisting>public class Country {
    @NotNull private String name;
    @Size(max=2) private String ISO2Code;
    @Size(max=3) private String ISO3Code;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getISO2Code() {
        return ISO2Code;
    }

    public void setISO2Code(String ISO2Code) {
        this.ISO2Code = ISO2Code;
    }

    public String getISO3Code() {
        return ISO3Code;
    }

    public void setISO3Code(String ISO3Code) {
        this.ISO3Code = ISO3Code;
    }
}

public class Address {
    @NotNull @Size(max=30)
    private String addressline1;
    @Size(max=30)
    private String addressline2;
    @Size(max=11)
    private String zipCode;
    @Valid
    private Country country;

    private String city;

    public String getAddressline1() {
        return addressline1;
    }

    public void setAddressline1(String addressline1) {
        this.addressline1 = addressline1;
    }

    public String getAddressline2() {
        return addressline2;
    }

    public void setAddressline2(String addressline2) {
        this.addressline2 = addressline2;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    @Size(max=30) @NotNull
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public Country getCountry() {
        return country;
    }

    public void setCountry(Country country) {
        this.country = country;
    }
}</programlisting>
        </example>

        <para>When the Bean Validation provider is about to check constraints
        of <literal>ISO3Code</literal>, it calls the
        <classname>TraversableResolver.isReachable()</classname> instance to
        ensure that the <literal>ISO3Code</literal> property is reachable with
        the following parameter values:</para>

        <itemizedlist>
          <listitem>
            <para><literal>traversableObject</literal>: country. The instance
            returned by <code>address.getCountry()</code>.</para>
          </listitem>

          <listitem>
            <para><literal>traversableProperty</literal>: a
            <classname>Node</classname> whose name is "ISO3Code". The name of
            the property of <literal>traversableObject</literal> being
            verified.</para>
          </listitem>

          <listitem>
            <para><methodname>rootBeanType</methodname>: Address.class. The
            type of the root object being validated.</para>
          </listitem>

          <listitem>
            <para><literal>pathtoTraversableObject</literal>: a
            <classname>Path</classname> containing a single
            <classname>Node</classname> whose name is "country". The path from
            address to the country instance.</para>
          </listitem>

          <listitem>
            <para><literal>elementType</literal>:
            <classname>ElementType.FIELD</classname>. The ISO3Code property is
            annotated on its field.</para>
          </listitem>
        </itemizedlist>

        <para>When the Bean Validation provider is about to cascade validation
        on <literal>country</literal> (<classname>Address</classname> object),
        it calls the <classname>TraversableResolver.isReachable()</classname>
        instance to ensure that the <literal>country</literal> property is
        reachable and if this method returns true, it calls
        <classname>TraversableResolver.isCascadable()</classname> with the
        following parameter values:</para>

        <itemizedlist>
          <listitem>
            <para><literal>traversableObject</literal>: address. The address
            instance.</para>
          </listitem>

          <listitem>
            <para><literal>traversableProperty</literal>: a
            <classname>Node</classname> whose name is "country". The name of
            the property of <literal>traversableObject</literal> being
            verified.</para>
          </listitem>

          <listitem>
            <para><methodname>rootBeanType</methodname>: Address.class. The
            type of the root object being validated.</para>
          </listitem>

          <listitem>
            <para><literal>pathtoTraversableObject</literal>: a
            <classname>Path</classname> containing a single
            <classname>Node</classname> whose name is null.</para>
          </listitem>

          <listitem>
            <para><literal>elementType</literal>:
            <classname>ElementType.FIELD</classname>. The country property is
            annotated on its field.</para>
          </listitem>
        </itemizedlist>

        <example>
          <title>Java Persistence aware TraversableResolver</title>

          <programlisting>public class JPATraversableResolver implements TraversableResolver {

    public boolean isReachable(Object traversableObject, 
                               Path.Node traversableProperty, 
                               Class&lt;?&gt; rootBeanType, 
                               Path pathToTraversableObject, 
                               ElementType elementType) {
        return traversableObject == null ||
                Persistence.getPersistenceUtil().isLoaded( 
                        traversableObject, 
                        traversableProperty.getName() );
    }

    public boolean isCascadable(Object traversableObject, 
                               Path.Node traversableProperty, 
                               Class&lt;?&gt; rootBeanType, 
                               Path pathToTraversableObject, 
                               ElementType elementType) {
        return true;
    }
}</programlisting>
        </example>

        <para>The traversable resolver used by default in a Bean Validation
        behaves as followed:</para>

        <itemizedlist>
          <listitem>
            <para>if Java Persistence is available in the runtime environment,
            a property is considered reachable if Java Persistence considers
            the property as loaded. A typical implementation will use
            <code>Persistence.getPersistenceUtil().isLoaded(Object,
            String)</code> to implement such contract.</para>
          </listitem>

          <listitem>
            <para>if Java Persistence is not available in the runtime
            environment, all properties are considered reachable.</para>
          </listitem>

          <listitem>
            <para>all properties are considered cascadable.</para>
          </listitem>
        </itemizedlist>

        <para>See <xref linkend="bootstrapping" /> to know how to pass a
        custom <classname>TraversableResolver</classname>.</para>
      </section>

      <section id="typevalidatorresolution">
        <title>ConstraintValidator resolution algorithm</title>

        <para>A constraint is associated to one or more
        <classname>ConstraintValidator</classname> implementations. Each
        <classname>ConstraintValidator&lt;A, T&gt;</classname> accepts the
        type <classname>T</classname>. The
        <classname>ConstraintValidator</classname> executed depends on the
        type hosting the constraint. For a given constraint evaluation, a
        single <classname>ConstraintValidator</classname> is
        considered.</para>

        <para>If the constraint declaration is hosted on a class or an
        interface, the targeted type is the class or the interface. If the
        constraint is hosted on a class attribute, the type of the attribute
        is the targeted type. If the constraint is hosted on a getter, the
        return type of the getter is the targeted type. In other words, the
        resolution algorithm considers the type as defined in the method
        signature and not the runtime type of the value.</para>

        <para>The rules written below describe formally the following
        statement: the <classname>ConstraintValidator</classname> chosen to
        validate a declared type <classname>T</classname> is the one where the
        type supported by the <classname>ConstraintValidator</classname> is a
        supertype of <classname>T</classname> and where there is no other
        <classname>ConstraintValidator</classname> whose supported type is a
        supertype of <classname>T</classname> and not a supertype of the
        chosen <classname>ConstraintValidator</classname> supported
        type.</para>

        <para>When validating a constraint A placed on a target declaring the
        type <classname>T</classname>, the following resolution rules
        apply.</para>

        <itemizedlist>
          <listitem>
            <para>Primitive types are considered equivalent to their
            respective primitive wrapper class. Likewise, arrays of primitive
            types are considered equivalent to arrays of their wrapper
            classes.</para>
          </listitem>

          <listitem>
            <para>A <classname>ConstraintValidator&lt;A, U&gt;</classname> is
            said to be <emphasis>compliant</emphasis> with
            <classname>T</classname> if <classname>T</classname> is a subtype
            of <classname>U</classname> (according to the<ulink
            url="http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#4.10">
            Java Language Specification 3rd edition chapter 4.10
            Subtyping</ulink>). Note that <classname>T</classname> is a
            subtype of <classname>U</classname> if <classname>T</classname> =
            <classname>U</classname>.</para>
          </listitem>

          <listitem>
            <para>If no <classname>ConstraintValidator</classname> compliant
            with <classname>T</classname> is found amongst the
            <classname>ConstraintValidator</classname>s listed by the
            constraint <classname>A</classname>, a
            <classname>UnexpectedTypeException</classname> is raised.</para>
          </listitem>

          <listitem>
            <para>A <classname>ConstraintValidator&lt;A, U&gt;</classname>
            compliant with <classname>T</classname> is considered
            <emphasis>strictly more specific</emphasis> than a
            <classname>ConstraintValidator&lt;A, V&gt;</classname> compliant
            with <classname>T</classname> if <classname>U</classname> is a
            strict subtype of <classname>V</classname>.
            <classname>U</classname> is a strict subtype of
            <classname>V</classname> if <classname>U</classname> is a subtype
            of <classname>V</classname> and <classname>U</classname> !=
            <classname>V</classname> (according to the <ulink
            url="http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#4.10">Java
            Language Specification 3rd edition chapter 4.10
            Subtyping</ulink>).</para>
          </listitem>

          <listitem>
            <para>A <classname>ConstraintValidator&lt;A, U&gt;</classname>
            compliant with <classname>T</classname> is considered maximally
            specific if no other <classname>ConstraintValidator&lt;A,
            V&gt;</classname> compliant with <classname>T</classname> is
            strictly more specific than <classname>ConstraintValidator&lt;A,
            U&gt;</classname>.</para>
          </listitem>

          <listitem>
            <para>If more than one maximally specific
            <classname>ConstraintValidator</classname> is found, a
            <classname>UnexpectedTypeException</classname> is raised.</para>
          </listitem>
        </itemizedlist>

        <note>
          <para>While the Java compiler itself cannot determine if a
          constraint declaration will lead to a
          <classname>UnexpectedTypeException</classname>, rules can be
          statically checked. A tool such as an IDE or a Java 6 annotation
          processor can apply these rules and prevent compilation in case of
          ambiguity. The specification encourages Bean Validation providers to
          provide such a tool to their users.</para>
        </note>

        <para>Let's see a couple of declarations their respective
        <classname>ConstraintValidator</classname> resolution. Assuming the
        definitions shown in <xref
        linkend="example-constraintvalidator-resolution" />:</para>

        <example id="example-constraintvalidator-resolution">
          <title>ConstraintValidator and type resolution</title>

          <programlisting>[...]
@Constraint(validatedBy={
    SizeValidatorForCollection.class,
    SizeValidatorForSet.class,
    SizeValidatorForSerializable.class })
public @interface Size { ...}

public class SizeValidatorForCollection implements ConstraintValidator&lt;Size, Collection&gt; { ... }
public class SizeValidatorForSet implements ConstraintValidator&lt;Size, Set&gt; { ... }
public class SizeValidatorForSerializable implements ConstraintValidator&lt;Size, Serializable&gt; { ... }

public interface SerializableCollection extends Serializable,  Collection {}</programlisting>
        </example>

        <para>The resolutions shown in <xref
        linkend="table-constraintvalidator-resolution" /> occur.</para>

        <table id="table-constraintvalidator-resolution">
          <title>Resolution of ConstraintValidator for various constraints
          declarations</title>

          <tgroup cols="2">
            <colspec align="center" />

            <thead>
              <row>
                <entry>Declaration</entry>

                <entry>Resolution</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>@Size Collection getAddresses() { ...
                }</code></entry>

                <entry><classname>SizeValidatorForCollection</classname>:
                direct match</entry>
              </row>

              <row>
                <entry><code>@Size Collection&lt;?&gt; getAddresses() { ...
                }</code></entry>

                <entry><classname>SizeValidatorForCollection</classname>:
                <classname>Collection</classname> is a direct supertype of
                <classname>Collection&lt;?&gt;</classname></entry>
              </row>

              <row>
                <entry><code>@Size Collection&lt;Address&gt; getAddresses() {
                ... }</code></entry>

                <entry><classname>SizeValidatorForCollection</classname>:
                <classname>Collection</classname> is a direct supertype of
                <classname>Collection&lt;Address&gt;</classname></entry>
              </row>

              <row>
                <entry><code>@Size Set&lt;Address&gt; getAddresses() { ...
                }</code></entry>

                <entry><classname>SizeValidatorForSet</classname>: direct
                supertype of <classname>Set&lt;Address&gt;</classname></entry>
              </row>

              <row>
                <entry><code>@Size SortedSet&lt;Address&gt; getAddresses() {
                ... }</code></entry>

                <entry><classname>SizeValidatorForSet</classname>:
                <classname>Set</classname> is the closest supertype of
                <classname>SortedSet&lt;Address&gt;</classname></entry>
              </row>

              <row>
                <entry><code>@Size SerializableCollection getAddresses() { ...
                }</code></entry>

                <entry><classname>UnexpectedTypeException</classname>:
                <classname>SerializableCollection</classname> is a subtype of
                both <classname>Collection</classname> and
                <classname>Serializable</classname> and neither
                <classname>Collection</classname> nor
                <classname>Serializable</classname> are subtypes of each
                other.</entry>
              </row>

              <row>
                <entry><code>@Size String getName() { ... }</code></entry>

                <entry><classname>UnexpectedTypeException</classname>: none of
                the <classname>ConstraintValidator</classname> types are
                supertypes of <classname>String</classname>.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>

    <section>
      <title>Examples</title>

      <para>The first example demonstrates how beans, fields and getters are
      annotated to express some constraints.</para>

      <example>
        <title>Place constraint declarations on the element to
        validate</title>

        <programlisting>@ZipCodeCityCoherenceChecker
public class Address {
    @NotNull @Size(max=30)
    private String addressline1;

    @Size(max=30)
    private String addressline2;

    private String zipCode;

    private String city;

    public String getAddressline1() {
        return addressline1;
    }

    public void setAddressline1(String addressline1) {
        this.addressline1 = addressline1;
    }

    public String getAddressline2() {
        return addressline2;
    }

    public void setAddressline2(String addressline2) {
        this.addressline2 = addressline2;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    @Size(max=30) @NotNull
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}</programlisting>
      </example>

      <para>During the validation routine execution on an
      <classname>Address</classname> object,</para>

      <itemizedlist>
        <listitem>
          <para><methodname>addressline1</methodname> field value is passed to
          the <classname>@NotNull</classname> as well as
          <classname>@Size</classname> constraint validation
          implementation.</para>
        </listitem>

        <listitem>
          <para><methodname>addressline2</methodname> field value is passed to
          the <classname>@Size</classname> constraint validation
          implementation.</para>
        </listitem>

        <listitem>
          <para><methodname>getCity</methodname> value is passed to the
          <classname>@Size</classname> and <classname>@NotNull</classname>
          constraint validation implementations</para>
        </listitem>

        <listitem>
          <para><classname>@ZipCodeCoherenceChecker</classname> is a
          constraint whose validation implementation's
          <methodname>isValid</methodname> method receives the
          <classname>Address</classname> object</para>
        </listitem>
      </itemizedlist>

      <para>The second example demonstrates object graph validation</para>

      <example>
        <title>Define object graph validation</title>

        <programlisting>public class Country {
    @NotNull
    private String name;
    @Size(max=2) private String ISO2Code;
    @Size(max=3) private String ISO3Code;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getISO2Code() {
        return ISO2Code;
    }

    public void setISO2Code(String ISO2Code) {
        this.ISO2Code = ISO2Code;
    }

    public String getISO3Code() {
        return ISO3Code;
    }

    public void setISO3Code(String ISO3Code) {
        this.ISO3Code = ISO3Code;
    }
}

public class Address {
    @NotNull @Size(max=30)
    private String addressline1;
    @Size(max=30)
    private String addressline2;
    @Size(max=11)
    private String zipCode;
    <emphasis role="bold">@NotNull @Valid</emphasis>
    private Country country;

    private String city;

    public String getAddressline1() {
        return addressline1;
    }

    public void setAddressline1(String addressline1) {
        this.addressline1 = addressline1;
    }

    public String getAddressline2() {
        return addressline2;
    }

    public void setAddressline2(String addressline2) {
        this.addressline2 = addressline2;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    @Size(max=30) @NotNull
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public Country getCountry() {
        return country;
    }

    public void setCountry(Country country) {
        this.country = country;
    }
}</programlisting>
      </example>

      <para>During the validation routine execution on an
      <classname>Address</classname> object, constraints on
      <methodname>addressLine1</methodname>,
      <methodname>addressLine2</methodname>, <methodname>zipCode</methodname>,
      <classname>getCity</classname> and <methodname>country</methodname> are
      processed as well as the validation of the
      <classname>Country</classname> object itself, more specifically
      <methodname>country.name</methodname> is checked for
      <classname>@NotNull</classname>, <methodname>ISO2Code</methodname> and
      <methodname>ISO3Code</methodname> are checked for
      <classname>@Size</classname>.</para>

      <para>Assuming that <classname>@NotEmpty</classname> is defined as
      such</para>

      <programlisting>package com.acme.constraint;

@Documented
@NotNull
@Size(min=1)
@ReportAsSingleViolation
@Constraint(validatedBy = NotEmpty.NotEmptyValidator.class)
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface NotEmpty {
    String message() default "{com.acme.constraint.NotEmpty.message}"
    Class&lt;?&gt; groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};

    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        NotEmpty[] value();
    }    

    class NotEmptyValidator implements ConstraintValidator&lt;NotEmpty, String&gt; {
        public void initialize(NotEmpty constraintAnnotation) {}

        public boolean isValid(String value, ConstraintValidatorContext context) {
            return true;
        }
    }
}</programlisting>

      <para>The third example demonstrates superclass, inheritance and
      composite constraints.</para>

      <example>
        <title>Use inheritance, constraints on superclasses and composite
        constraints</title>

        <programlisting>public interface Person {
    @NotEmpty
    String getFirstName();

    String getMiddleName();
    
    @NotEmpty
    String getLastName();
}

public class Customer implements Person {
    private String firstName;
    private String middleName;
    private String lastName;
    @NotNull
    private String customerId;
    @Password(robustness=5)
    private String password;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getMiddleName() {
        return middleName;
    }

    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

public class PreferredGuest extends Customer {
    @CreditCard
    private String guestCreditCardNumber;

    public String getGuestCreditCardNumber() {
        return guestCreditCardNumber;
    }

    public void setGuestCreditCardNumber(String guestCreditCardNumber) {
        this.guestCreditCardNumber = guestCreditCardNumber;
    }
}

public class CommonGuest extends customer {}</programlisting>
      </example>

      <para>When validating a <classname>PreferredGuest</classname> the
      following constraints are processed:</para>

      <itemizedlist>
        <listitem>
          <para><classname>@NotEmpty</classname>,
          <classname>@NotNull</classname> and
          <classname>@Size(min=1)</classname> on
          <methodname>firstName</methodname></para>
        </listitem>

        <listitem>
          <para><classname>@NotEmpty</classname>,
          <classname>@NotNull</classname> and
          <classname>@Size(min=1)</classname> on
          <methodname>lastName</methodname></para>
        </listitem>

        <listitem>
          <para><classname>@NotNull</classname> on
          <methodname>customerId</methodname>,
          <classname>@Password</classname> on
          <methodname>password</methodname></para>
        </listitem>

        <listitem>
          <para><classname>@CreditCard</classname> on
          <methodname>guestCreditCardNumber</methodname></para>
        </listitem>
      </itemizedlist>

      <para>When validating <classname>CommonGuest</classname>, the following
      constraints are processed:</para>

      <itemizedlist>
        <listitem>
          <para><classname>@NotEmpty</classname>,
          <classname>@NotNull</classname> and
          <classname>@Size(min=1)</classname> on
          <methodname>firstName</methodname></para>
        </listitem>

        <listitem>
          <para><classname>@NotEmpty</classname>,
          <classname>@NotNull</classname> and
          <classname>@Size(min=1)</classname> on
          <methodname>lastName</methodname></para>
        </listitem>

        <listitem>
          <para><classname>@NotNull</classname> on
          <methodname>customerId</methodname>,
          <classname>@Password</classname> on
          <methodname>password</methodname></para>
        </listitem>
      </itemizedlist>

      <para>The fourth example demonstrates the influence of group
      sequence.</para>

      <example>
        <title>Use groups and group sequence to define constraint
        ordering</title>

        <programlisting><emphasis role="bold">@GroupSequence({First.class, Second.class, Last.class})</emphasis>
public interface Complete {}

public class Book {
    @NotEmpty(groups=First.class)
    private String title;

    @Size(max=30, groups=Second.class)
    private String subtitle;

    @Valid
    @NotNull(groups=First.class)
    private Author author;

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getSubtitle() {
        return subtitle;
    }

    public void setSubtitle(String subtitle) {
        this.subtitle = subtitle;
    }

    public Author getAuthor() {
        return author;
    }

    public void setAuthor(Author author) {
        this.author = author;
    }
}

public class Author {
    @NotEmpty(groups=Last.class)
    private String firstName;
    
    @NotEmpty(groups=First.class)
    private String lastName;

    @Size(max=30, groups=Last.class)
    private String company;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        this.company = company;
    }
}</programlisting>
      </example>

      <para>Assuming the validation of the <classname>Complete</classname>
      group on the following book instance:</para>

      <programlisting>Author author = new Author();
author.setLastName( "Baudelaire" );
author.setFirstName( "" );
Book book = new Book();
book.setAuthor( author );</programlisting>

      <para>the validation routine will return the following failure:</para>

      <itemizedlist>
        <listitem>
          <para><classname>@NotNull</classname> failure (from
          <classname>@NotEmpty</classname>) on the <literal>title</literal>
          field</para>
        </listitem>
      </itemizedlist>

      <para>As both <methodname>title</methodname> and
      <methodname>author.lastname</methodname> are checked as part of the
      <literal><classname>First</classname></literal> group. If the instance
      is updated:</para>

      <programlisting>book.setTitle( "Les fleurs du mal" );
author.setCompany("Some random publisher with a very very very long name");</programlisting>

      <para>the validation routine will return the following failures:</para>

      <itemizedlist>
        <listitem>
          <para><methodname>author.firstName</methodname> fails to pass the
          <classname>@Size(min=1)</classname> (from
          <classname>@NotEmpty</classname>) constraint</para>
        </listitem>

        <listitem>
          <para><methodname>author.company</methodname> fails to pass the
          <classname>@Size</classname> constraint</para>
        </listitem>
      </itemizedlist>

      <para>As the <classname>First</classname> and
      <classname>Second</classname> groups pass without failure, the
      <classname>Last</classname> group is going through validation.</para>
    </section>
  </chapter>

  <chapter id="validationapi">
    <title>Validation APIs</title>

    <para>The default package for the Bean Validation APIs is
    <classname>javax.validation</classname></para>

    <section id="validationapi-validatorapi">
      <title>Validator API</title>

      <para>The main Bean Validation API is the
      <classname>javax.validation.Validator</classname> interface.</para>

      <para>A <classname>Validator</classname> instance is able to validate
      instances of beans and their associated objects if any. It is
      recommended to leave the caching of <classname>Validator</classname>
      instances to the <classname>ValidatorFactory</classname>.
      <classname>Validator</classname> implementations are thread-safe.</para>

      <programlisting>/**
 * Validate bean instances. Implementations of this interface must be thread-safe.
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface Validator {
    /**
     * Validates all constraints on &lt;code&gt;object&lt;/code&gt;.
     *
     * @param object object to validate
     * @param groups group or list of groups targeted for validation
     *               (default to {@link javax.validation.groups.Default})
     *
     * @return constraint violations or an empty Set if none
     *
     * @throws IllegalArgumentException if object is null
     *                                  or if null is passed to the varargs groups
     * @throws ValidationException if a non recoverable error happens
     *                                  during the validation process
     */
    &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validate(T object, Class&lt;?&gt;... groups);

    /**
     * Validates all constraints placed on the property of &lt;code&gt;object&lt;/code&gt;
     * named &lt;code&gt;propertyName&lt;/code&gt;.
     *
     * @param object object to validate
     * @param propertyName property to validate (ie field and getter constraints)
     * @param groups group or list of groups targeted for validation
     *               (default to {@link javax.validation.groups.Default})
     *
     * @return constraint violations or an empty Set if none
     *
     * @throws IllegalArgumentException if &lt;code&gt;object&lt;/code&gt; is null,
     *            if &lt;code&gt;propertyName&lt;/code&gt; null, empty or not a valid object property
     *            or if null is passed to the varargs groups
     * @throws ValidationException      if a non recoverable error happens
     *                                  during the validation process
     */
    &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateProperty(T object,
                                                     String propertyName,
                                                     Class&lt;?&gt;... groups);

    /**
     * Validates all constraints placed on the property named &lt;code&gt;propertyName&lt;/code&gt;
     * of the class &lt;code&gt;beanType&lt;/code&gt; would the property value be &lt;code&gt;value&lt;/code&gt;
     * &lt;p/&gt;
     * &lt;code&gt;ConstraintViolation&lt;/code&gt; objects return null for
     * {@link ConstraintViolation#getRootBean()} and {@link ConstraintViolation#getLeafBean()}
     *
     * @param beanType the bean type
     * @param propertyName property to validate
     * @param value property value to validate
     * @param groups group or list of groups targeted for validation
     *               (default to {@link javax.validation.groups.Default})
     *
     * @return constraint violations or an empty Set if none
     *
     * @throws IllegalArgumentException if &lt;code&gt;beanType&lt;/code&gt; is null,
     *            if &lt;code&gt;propertyName&lt;/code&gt; null, empty or not a valid object property
     *            or if null is passed to the varargs groups
     * @throws ValidationException      if a non recoverable error happens
     *                                  during the validation process
     */
    &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateValue(Class&lt;T&gt; beanType,
                                                  String propertyName,
                                                  Object value,
                                                  Class&lt;?&gt;... groups);

    /**
     * Return the descriptor object describing bean constraints.
     * The returned object (and associated objects including
     * &lt;code&gt;ConstraintDescriptor&lt;code&gt;s) are immutable.
     *
     * @param clazz class or interface type evaluated
     *
     * @return the bean descriptor for the specified class.
     *
     * @throws IllegalArgumentException if clazz is null
     * @throws ValidationException if a non recoverable error happens
     *                             during the metadata discovery or if some
     *                             constraints are invalid.
     */
    BeanDescriptor getConstraintsForClass(Class&lt;?&gt; clazz);

    /**
     * Return an instance of the specified type allowing access to
     * provider-specific APIs.  If the Bean Validation provider
     * implementation does not support the specified class,
     * &lt;code&gt;ValidationException&lt;/code&gt; is thrown.
     *
     * @param type the class of the object to be returned.
     *
     * @return an instance of the specified class
     *
     * @throws ValidationException if the provider does not support the call.
     */
    public &lt;T&gt; T unwrap(Class&lt;T&gt; type);
}</programlisting>

      <para><methodname>getConstraintsForClass</methodname> is described in
      <xref linkend="constraintmetadata" />.</para>

      <para><methodname>unwrap</methodname> is provided as a way to access a
      Bean Provider specific object of a given type typically as a complement
      to the <classname>Validator</classname> contract. Using this method
      makes your code non portable.</para>

      <example>
        <title>Using unwrap to access a provider specific contract</title>

        <programlisting>//if using the ACME provider
ACMEValidator acmeValidator = factory.unwrap(ACMEValidator.class);
acmeValidator.setSpecificConfiguration(...);</programlisting>
      </example>

      <section id="validationapi-validatorapi-validationmethods">
        <title>Validation methods</title>

        <para><methodname>&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt;
        validate(T object, Class&lt;?&gt;... groups)</methodname> is used to
        validate a given object. This method implements the logic described in
        <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine" />.
        A <classname>Set</classname> containing all
        <classname>ConstraintViolation</classname> objects representing the
        failing constraints is returned, an empty <classname>Set</classname>
        is returned otherwise.</para>

        <para><methodname>&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt;
        validateProperty(T object, String propertyName, Class&lt;?&gt;...
        groups)</methodname> validates a given field or property of an object.
        The property name is the JavaBeans property name (as defined by the
        JavaBeans <classname>Introspector</classname> class). This method
        implements the logic described in <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine" />
        but only to the given property. <literal>@Valid</literal> is not
        honored by this method. This method is useful for partial object
        validation.</para>

        <para><methodname>&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt;
        validateValue(Class&lt;T&gt; beanType, String propertyName, Object
        value, Class&lt;?&gt;... groups)</methodname> validates the property
        referenced by <parameter>propertyName</parameter> present on
        <literal>beanType</literal> or any of its superclasses, if the
        property value were <parameter>value</parameter>. This method
        implements the logic described in <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine" />
        and apply it only to the given property and for the given value.
        <literal>@Valid</literal> is not honored by this method. This method
        is useful for ahead of time validation (ie. before the JavaBean is
        populated or updated).</para>

        <note>
          <para>If multiple constrained fields or getters share the same name
          and hide one another in the class hierarchy according to the Java
          visibility rules, the list of constraints evaluated is unspecified.
          This will be clarified in a later version of this specification.
          Note that method overriding is not impacted.</para>

          <para>If getters and fields share the same name and are present at
          different levels of the hierarchy, the list of constraints evaluated
          is unspecified. This will be clarified in a later version of this
          specification.</para>

          <para>However, constraints hosted on the most specific (hierarchy
          wise) element type are always evaluated.</para>
        </note>

        <para>If some unrecoverable failure happens during validation, a
        <classname>ValidationException</classname> is raised. This exception
        can be specialized in some situations (invalid group definition,
        invalid constraint definition, invalid constraint declaration). See
        <xref linkend="exception" /> or the relative sections for more
        information).</para>

        <section>
          <title>Examples</title>

          <para>All the examples will be based on the following class
          definition, constraint declarations and address instance.</para>

          <programlisting>public class Address {
    <emphasis role="bold">@NotNull @Size(max=30)</emphasis>
    private String addressline1;

    <emphasis role="bold">@Size(max=30)</emphasis>
    private String addressline2;

    private String zipCode;

    private String city;

    public String getAddressline1() {
        return addressline1;
    }

    public void setAddressline1(String addressline1) {
        this.addressline1 = addressline1;
    }

    public String getAddressline2() {
        return addressline2;
    }

    public void setAddressline2(String addressline2) {
        this.addressline2 = addressline2;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    <emphasis role="bold">@Size(max=30) @NotNull</emphasis>
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}

Address address = new Address();
address.setAddressline1( null );
address.setAddressline2( null );
address.setCity("Llanfairpwllgwyngyllgogerychwyrndrobwyll-llantysiliogogogoch");
//town in North Wales</programlisting>

          <para>The following code will return two
          <classname>ConstraintViolation</classname> objects. One for
          <literal>addressline1</literal> violating
          <literal>@NotNull</literal> and one for <literal>city</literal>
          violating <literal>@Size</literal>.</para>

          <programlisting>validator.validate(address).size() == 2</programlisting>

          <para>The following code will return one
          <classname>ConstraintViolation</classname> since
          <literal>city</literal> violates <literal>@Size</literal> and only
          <literal>city</literal> is validated.</para>

          <programlisting>validator.validateProperty(address, "city").size() == 1</programlisting>

          <para>The following code will return no
          <classname>ConstraintViolation</classname> object because the value
          "Paris" for <literal>city</literal> would not raise any constraint
          failure.</para>

          <programlisting>validator.validateValue("city", "Paris").size() == 0</programlisting>
        </section>
      </section>

      <section id="validationapi-validatorapi-groups">
        <title>groups</title>

        <para>Groups allow you to restrict the set of constraints applied
        during validation. Groups targeted are passed as parameters to the
        <methodname>validate</methodname>,
        <methodname>validateProperty</methodname> and
        <methodname>validateValue</methodname> methods. All constraints
        belonging to the targeted group are applied during the <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine" />.
        If no group is passed, the
        <literal><classname>Default</classname></literal> group is assumed.
        <xref
        linkend="constraintsdefinitionimplementation-constraintdefinition-groups" />
        describes how to define groups on constraints.</para>

        <para>When more than one group is evaluated and passed to the various
        validate methods, order is not constrained. It is equivalent to the
        validation of a group <literal>G</literal> inheriting all groups (ie
        implementing all interfaces) passed to the validation method.</para>

        <section>
          <title>Examples</title>

          <programlisting>/** Validates a minimal set of constraints */
public interface Minimal {}

public class Address {

    @NotEmpty(groups = Minimal.class)
    @Size(max=50)
    private String street1;
    
    @NotEmpty
    private String city;

    @NotEmpty(groups = {Minimal.class, Default.class})
    private String zipCode;
    ...
}</programlisting>

          <para>In the previous example, <classname>@NotEmpty</classname> (and
          it's composing constraints) on <methodname>street1</methodname>
          applies to the group <classname>Minimal</classname>,
          <classname>@Size</classname> on <methodname>street1</methodname>
          applies to the group <literal>Default</literal> and
          <classname>@NotEmpty </classname>(and it's composing constraints) on
          <methodname>zipCode</methodname> applies to the groups
          <literal><classname>Default</classname></literal> and
          <literal><classname>Minimal</classname></literal>.</para>

          <programlisting>validator.validate(address);</programlisting>

          <para>validates the group <classname>Default</classname>
          (implicitly) and applies <classname>@Size</classname> on
          <methodname>street1</methodname>, <classname>@NotEmpty</classname>
          (and its composing constraints) on <methodname>city</methodname>,
          <classname>@NotEmpty</classname> (and its composing constraints) on
          <methodname>zipCode</methodname>. Particularly,
          <classname>@NotEmpty</classname> (and its composing constraints) on
          <methodname>street1</methodname> are not applied.</para>

          <programlisting>validator.validate(address, Minimal.class);</programlisting>

          <para>applies <classname>@NotEmpty</classname> (and its composing
          constraints) on <methodname>street1</methodname> and
          <classname>@NotEmpty</classname> (and its composing constraints) on
          <methodname>zipCode</methodname> because they belong to the
          <classname>Minimal</classname> group.</para>

          <programlisting>validator.validate(address, Minimal.class, Default.class);</programlisting>

          <para>validates both <classname>Default</classname> and
          <classname>Minimal</classname> groups. The routine applies
          <classname>@NotEmpty</classname> (and its composing constraints) and
          <classname>@Size</classname> on <methodname>street1</methodname>,
          <classname>@NotEmpty</classname> (and its composing constraints) on
          <methodname>city</methodname>, <classname>@NotEmpty</classname> (and
          its composing constraints) on <methodname>zipCode</methodname>. Note
          that if <methodname>zipCode</methodname> is empty, only one
          <classname>ConstraintViolation</classname> object will represent the
          failure and the not empty validation will only be executed
          once.</para>

          <para>Let's look at a more complex example involving group
          sequence.</para>

          <programlisting>public class Address {
    @NotEmpty(groups = Minimal.class)
    @Size(max=50, groups=FirstStep.class)
    private String street1;
    
    @NotEmpty(groups=SecondStep.class)
    private String city;

    @NotEmpty(groups = {Minimal.class, SecondStep.class})
    private String zipCode;
    ...

    public interface FirstStep {}

    public interface SecondStep {}
    
    @GroupSequence({Firststep.class, SecondStep.class})
    public interface Total {}
}</programlisting>

          <para>When running:</para>

          <programlisting>validator.validate(address, Minimal.class, Total.class);</programlisting>

          <para>the validation process will process
          <classname>@NotEmpty</classname> (and it's composing constraints)
          and <classname>@Size</classname> from
          <methodname>street1</methodname> and
          <classname>@NotEmpty</classname> (and it's composing constraints)
          from <methodname>zipCode</methodname>. If
          <classname>@Size</classname> from <methodname>street1</methodname>
          does not generate a failure, then <classname>@NotEmpty</classname>
          (and it's composing constraints) from <methodname>city</methodname>
          will be processed as part of <classname>SecondStep</classname>. Note
          that <classname>@NotEmpty</classname> (and it's composing
          constraints) from <methodname>zipCode</methodname> are not
          reprocessed as they have already been processed before.</para>

          <para>When running:</para>

          <programlisting>validator.validate(address, Total.class, SecondStep.class);</programlisting>

          <para><classname>@NotEmpty</classname> (and it's composing
          constraints) from <methodname>city</methodname> and
          <classname>@NotEmpty</classname> (and it's composing constraints)
          from <methodname>zipCode</methodname> will be processed even if
          <classname>@Size</classname> from <methodname>street1</methodname>
          fails: while <literal><classname>SecondStep</classname></literal> is
          in the <literal><classname>Total</classname></literal> group
          sequence and hence should not be triggered if
          <literal><classname>FirstStep</classname></literal> has a failure,
          it also has been requested outside the sequence (in this case
          explicitly).</para>

          <note>
            <para>If the group definition is invalid, a
            <classname>GroupDefinitionException</classname> is raised.</para>
          </note>
        </section>
      </section>
    </section>

    <section id="validationapi-constraintviolation">
      <title>ConstraintViolation</title>

      <para><classname>ConstraintViolation</classname> is the class describing
      a single constraint failure. A set of
      <classname>ConstraintViolation</classname> is returned for an object
      validation.</para>

      <programlisting>/**
 * Describe a constraint violation. This object exposes the constraint
 * violation context as well as the message describing the violation.
 *
 * @author Emmanuel Bernard
 */
public interface ConstraintViolation&lt;T&gt; {

    /**
     * @return The interpolated error message for this constraint violation.
     */
    String getMessage();

    /**
     * @return The non-interpolated error message for this constraint violation.
     */
    String getMessageTemplate();

    /**
     * @return The root bean being validated. Null when returned by
     *         {@link javax.validation.Validator#validateValue(Class, String, Object, Class[])}
     */
    T getRootBean();

    /**
     * @return The class of the root bean being validated
     */
    Class&lt;T&gt; getRootBeanClass();

    /**
     * If a bean constraint, the bean instance the constraint is applied on
     * If a property constraint, the bean instance hosting the property the
     * constraint is applied on
     *
     * @return the leaf bean the constraint is applied on. Null when returned by
     *         {@link javax.validation.Validator#validateValue(Class, String, Object, Class[])}
     */
    Object getLeafBean();

    /**
     * @return the property path to the value from {@code rootBean}.
     */
    Path getPropertyPath();

    /**
     * @return the value failing to pass the constraint.
     */
    Object getInvalidValue();

    /**
     * Constraint metadata reported to fail.
     * The returned instance is immutable.
     *
     * @return constraint metadata
     */
    ConstraintDescriptor&lt;?&gt; getConstraintDescriptor();
}</programlisting>

      <para>The <methodname>getMessage</methodname> method returns the
      interpolated (localized) message for the failing constraint (see <xref
      linkend="validationapi-message" /> for more information on message
      interpolator). This can be used by clients to expose user friendly
      messages.</para>

      <para>The <methodname>getMessageTemplate</methodname> method returns the
      non-interpolated error message (usually the <literal>message</literal>
      attribute on the constraint declaration). Frameworks can use this as an
      error code key.</para>

      <para>The <methodname>getRootBean</methodname> method returns the root
      object being validated that led to the failing constraint (i.e. the
      object the client code passes to the
      <methodname>Validator.validate</methodname> method.</para>

      <para>The <methodname>getInvalidValue</methodname> method returns the
      value (field, property or validated object) being passed to
      <methodname>isValid</methodname>.</para>

      <para><methodname>getConstraintDescriptor</methodname> provides access
      to the failing constraint metadata (see <xref
      linkend="constraintmetadata-constraintdescriptor" />).</para>

      <para>The <methodname>getPropertyPath</methodname> returns the Path
      object representing the navigation path from the root object to the
      failing object.</para>

      <programlisting>/**
 * Represent the navigation path from an object to another
 * in an object graph.
 * Each path element is represented by a &lt;code&gt;Node&lt;/code&gt;.
 *
 * The path corresponds to the succession of nodes
 * in the order they are returned by the &lt;code&gt;Iterator&lt;/code&gt;
 *
 * @author Emmanuel Bernard
 */
public interface Path extends Iterable&lt;Path.Node&gt; {

    /**
     * Represents an element of a navigation path
     */
    interface Node {
        /**
         * Property name the node represents
         * or null if representing an entity on the leaf node
         * (in particular the node in a &lt;code&gt;Path&lt;/code&gt; representing
         * the root object has its name null).
         * 
         * @return property name the node represents
         */
        String getName();

        /**
         * @return true if the node represents an object contained in an Iterable
         * or in a Map.
         */
        boolean isInIterable();

        /**
         * @return The index the node is placed in if contained
         * in an array or List. Null otherwise.
         */
        Integer getIndex();

        /**
         * @return The key the node is placed in if contained
         * in a Map. Null otherwise.
         */
        Object getKey();
    }
}</programlisting>

      <para><classname>Path</classname> is made of
      <classname>Node</classname>s and is built according to the following
      rules:</para>

      <itemizedlist>
        <listitem>
          <para>if the failing object is the root object, a
          <classname>Node</classname> with name set to null is added to the
          <classname>Path</classname>.</para>
        </listitem>

        <listitem>
          <para>When an association is traversed:</para>

          <itemizedlist>
            <listitem>
              <para>a <classname>Node</classname> object whose
              <literal>name</literal> equals the name of the association
              property (field name or Java Bean property name) is added to
              <classname>Path</classname></para>
            </listitem>

            <listitem>
              <para>if the association is a <classname>List</classname> or an
              array, the following <classname>Node</classname> object added
              contains the index value in
              <methodname>getIndex</methodname>.</para>
            </listitem>

            <listitem>
              <para>if the association is a <classname>Map</classname>, the
              following <classname>Node</classname> object added (representing
              a given map entry) contains the key value in
              <methodname>getKey</methodname></para>
            </listitem>

            <listitem>
              <para>for all <classname>Iterable</classname> or
              <classname>Map</classname>, the following
              <classname>Node</classname> object added is marked as
              <literal>inIterable</literal>
              (<methodname>isInIterable</methodname>)</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>For a property level constraint (field and getter)</para>

          <itemizedlist>
            <listitem>
              <para>a <classname>Node</classname> object is added to
              <classname>Path</classname> whose <literal>name</literal> equals
              the name of the property (field name or Java Bean property
              name)</para>
            </listitem>

            <listitem>
              <para>the property path is considered complete</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>For a class level constraint:</para>

          <itemizedlist>
            <listitem>
              <para>a <classname>Node</classname> object is added to
              <classname>Path</classname> whose <literal>name</literal> is
              null</para>
            </listitem>

            <listitem>
              <para>the property path is considered complete</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <note>
        <para>A given <classname>Node</classname> object derives its
        <literal>inIterable</literal>, <literal>key</literal> and
        <literal>index</literal> properties from the previous association
        traversed.</para>
      </note>

      <note>
        <para>From <methodname>rootBean</methodname> and
        <methodname>propertyPath</methodname>, it is possible to rebuild the
        context of the failure</para>
      </note>

      <para>Assuming the following object definitions and when book is
      validated:</para>

      <programlisting>@SecurityChecking
public class Author {
    private String firstName;
    
    @NotEmpty(message="lastname must not be null")
    private String lastName;

    @Size(max=30)
    private String company;
    ...
}

@AvailableInStore(groups={Availability.class})
public class Book {
    @NotEmpty(groups={FirstLevelCheck.class, Default.class})
    private String title;

    @Valid
    @NotNull
    private List&lt;Author&gt; authors;

    @Valid
    private Map&lt;String, Review&gt; reviewsPerSource;

    @Valid
    private Review pickedReview;
    ...
}

public class Review {
    @Min(0) private int rating;
    ...
}</programlisting>

      <para><literal>propertyPath</literal> evaluations are described in <xref
      linkend="table-propertypath" />:</para>

      <table id="table-propertypath">
        <title>propertyPath examples</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Constraint</entry>

              <entry>propertyPath</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><classname>@AvailableInStore</classname> on
              <classname>Book</classname></entry>

              <entry><para>Node(name=null,inIterable=false, index=null,
              key=null)</para></entry>
            </row>

            <row>
              <entry><classname>@NotEmpty</classname> on
              <classname>Book.title</classname></entry>

              <entry><para>Node(name=title,inIterable=false, index=null,
              key=null)</para></entry>
            </row>

            <row>
              <entry><classname>@NotNull</classname> on
              <classname>Book.authors</classname></entry>

              <entry><para>Node(name=authors,inIterable=false, index=null,
              key=null)</para></entry>
            </row>

            <row>
              <entry><classname>@SecurityChecking</classname> on the fourth
              author, <classname>Author</classname></entry>

              <entry><para>Node(name=authors,inIterable=false, index=null,
              key=null)</para><para>Node(name=null,inIterable=true, index=3,
              key=null)</para></entry>
            </row>

            <row>
              <entry><classname>@Size</classname> on the fourth author,
              <classname>Author.lastname</classname></entry>

              <entry><para>Node(name=authors,inIterable=false, index=null,
              key=null)</para><para>Node(name=lastname,inIterable=true,
              index=4, key=null)</para></entry>
            </row>

            <row>
              <entry><classname>@NotEmpty</classname> on the first author,
              <classname>Author.company</classname></entry>

              <entry><para>Node(name=authors,inIterable=false, index=null,
              key=null)</para><para>Node(name=company,inIterable=true,
              index=0, key=null)</para></entry>
            </row>

            <row>
              <entry><classname>@Min</classname> on the review associated to
              Consumer Report, <classname>Review.rating</classname></entry>

              <entry><para>Node(name=reviewsPerSource,inIterable=false,
              index=null,
              key=null)</para><para>Node(name=rating,inIterable=true,
              index=null, key="Consumer Report")</para></entry>
            </row>

            <row>
              <entry><classname>@Min</classname> on the picked review,
              <classname>Review.rating</classname></entry>

              <entry><para>Node(name=pickedReview,inIterable=false,
              index=null,
              key=null)</para><para>Node(name=rating,inIterable=false,
              index=null, key=null)</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <note>
        <para>Bean Validation implementations should ensure that a
        <classname>ConstraintViolation</classname> implementation is
        <classname>Serializable</classname> provided that the root bean, the
        leaf bean, the invalid value and keys in the
        <classname>Path</classname> object are
        <classname>Serializable</classname> objects. </para>

        <para>If a user wishes to send
        <classname>ConstraintViolation</classname> remotely, it should make
        sure the object graph validated is itself
        <classname>Serializable</classname>.</para>
      </note>

      <section>
        <title>Examples</title>

        <para>These examples assume the following definition of
        <classname>@NotEmpty</classname>.</para>

        <programlisting>package com.acme.constraint;

@Documented
@NotNull
@Size(min=1)
@ReportAsSingleViolation
@Constraint(validatedBy = NotEmpty.NotEmptyValidator.class)
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface NotEmpty {
    String message() default "{com.acme.constraint.NotEmpty.message}"
    Class&lt;?&gt; groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};

    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        NotEmpty[] value();
    }

    class NotEmptyValidator implements ConstraintValidator&lt;NotEmpty, String&gt; {
        public void initialize(NotEmpty constraintAnnotation) {}

        public boolean isValid(String value, ConstraintValidatorContext context) {
            return true;
        }
    }
}</programlisting>

        <para>and the following class definitions</para>

        <programlisting>public class Author {
    private String firstName;
    
    @NotEmpty(message="lastname must not be null")
    private String lastName;

    @Size(max=30)
    private String company;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        this.company = company;
    }
}

public class Book {
    @NotEmpty(groups={FirstLevelCheck.class, Default.class})
    private String title;

    @Valid
    @NotNull
    private Author author;

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Author getAuthor() {
        return author;
    }

    public void setAuthor(Author author) {
        this.author = author;
    }
}

Author author = new Author();
author.setCompany("ACME");
Book book = new Book();
book.setTitle("");
book.setAuthor(author);

Set&lt;ConstraintViolation&gt; constraintViolations = validator.validate(book);</programlisting>

        <para><classname>ConstraintViolations</classname> is a set of size 2.
        One of the entries represents the failure of
        <literal>@NotEmpty</literal> (or more precisely
        <classname>@Size(min=1)</classname> a composing constraint of
        <classname>@NotEmpty</classname>) on the <literal>title</literal>
        property.</para>

        <para>The <classname>ConstraintViolation</classname> object for this
        failure passes the following assertions:</para>

        <programlisting>//assuming an english locale, the interpolated message is returned
assert "may not be null or empty".equals( constraintViolation.getMessage() );
assert book == constraintViolation.getRootBean();
assert book == constraintViolation.getLeafBean();
//the offending value
assert book.getTitle().equals( constraintViolation.getInvalidValue() );
//the offending property
Iterator&lt;Node&gt; nodeIter = constraintViolation.getPropertyPath().iterator();
assert "title".equals( nodeIter.next().getName() );
assert false == nodeIter.hasNext();</programlisting>

        <para>The second failure, <literal>@NotEmpty</literal> (or more
        precisely <classname>@NotNull</classname> a composing constraint of
        <classname>@NotEmpty</classname>) on the author's
        <methodname>lastname</methodname>, will produce the
        <classname>ConstraintViolation</classname> object satisfying the
        following assertions:</para>

        <programlisting>assert "lastname must not be null".equals( constraintViolation.getMessage() );
assert book == constraintViolation.getRootBean();
assert author == constraintViolation.getLeafBean();
//the offending value
assert book.getAuthor().getLastName() == constraintViolation.getInvalidValue();
//the offending property
Iterator&lt;Node&gt; nodeIter = constraintViolation.getPropertyPath().iterator();
assert "author".equals( nodeIter.next().getName() );
assert "lastName".equals( nodeIter.next().getName() );
assert false == nodeIter.hasNext();</programlisting>
      </section>
    </section>

    <section id="validationapi-message">
      <title>Message interpolation</title>

      <para>A message interpolator is responsible for transforming the message
      string from the constraint and return a human readable error
      message.</para>

      <section id="default-messageresolver">
        <title>Default message interpolation</title>

        <para>A conforming implementation includes a default message
        interpolator. This message interpolator shall use the algorithm
        defined here to interpolate message descriptors into human-readable
        messages.</para>

        <para>Each constraint defines a message descriptor via its
        <methodname>message</methodname> property. Every constraint definition
        shall define a default message descriptor for that constraint.
        Messages can be overridden at declaration time in constraints by
        setting the <methodname>message</methodname> property on the
        constraint.</para>

        <para>The message descriptor is a string literal and may contain one
        or more message parameters. Message parameters are string literals
        enclosed in braces. The following character escaping apply:</para>

        <itemizedlist>
          <listitem>
            <para><code>\{</code> is considered as the literal
            <literal>{</literal> instead of being considered as the beginning
            of a message parameter</para>
          </listitem>

          <listitem>
            <para><code>\}</code> is considered as the literal
            <literal>}</literal> instead of being considered as the end of a
            message parameter</para>
          </listitem>

          <listitem>
            <para><code>\\</code> is considered as the literal
            <literal>\</literal> instead of being considered as the escaping
            character</para>
          </listitem>
        </itemizedlist>

        <para></para>

        <example>
          <title>Message using parameters</title>

          <programlisting>Value must be between {min} and {max}</programlisting>
        </example>

        <section id="default-resolution-algorithm">
          <title>Default message interpolation algorithm</title>

          <para>The default message interpolator uses the following steps:<!--SCP: Do we want to allow MessageFormat style formatting here?--></para>

          <orderedlist>
            <listitem>
              <para>Message parameters are extracted from the message string
              and used as keys to search the
              <classname>ResourceBundle</classname> named
              <literal>ValidationMessages</literal> (often materialized as the
              property file
              <filename>/ValidationMessages.properties</filename> and its
              locale variations) using the defined locale (see below). If a
              property is found, the message parameter is replaced with the
              property value in the message string. Step 1 is applied
              recursively until no replacement is performed (ie. a message
              parameter value can itself contain a message parameter).</para>
            </listitem>

            <listitem>
              <para>Message parameters are extracted from the message string
              and used as keys to search the Bean Validation provider's
              built-in <classname>ResourceBundle</classname> using the defined
              locale (see below). If a property is found, the message
              parameter is replaced with the property value in the message
              string. Contrary to step 1, step 2 is not processed
              recursively.</para>
            </listitem>

            <listitem>
              <para>If step 2 triggers a replacement, then step 1 is applied
              again. Otherwise step 4 is performed.</para>
            </listitem>

            <listitem>
              <para>Message parameters are extracted from the message string.
              Those matching the name of an attribute of the constraint are
              replaced by the value of that attribute in the constraint
              declaration.</para>
            </listitem>
          </orderedlist>

          <para>The defined locale is as followed:</para>

          <itemizedlist>
            <listitem>
              <para>if the locale is passed to the interpolator method
              i<methodname>nterpolate(String, CosntraintDescriptor, Object,
              Locale)</methodname>, this <classname>Locale</classname>
              instance is used.</para>
            </listitem>

            <listitem>
              <para>otherwise, the default <classname>Locale</classname> as
              provided by <methodname>Locale.getDefault()</methodname> is
              used.</para>
            </listitem>
          </itemizedlist>

          <para>The proposed algorithm ensures that custom resource bundle
          always have priority over built-in resource bundle at all level of
          the recursive resolution. It also ensures that constraint
          declarations attributes values are not interpolated further.</para>
        </section>
      </section>

      <section id="custom-message-resolution">
        <title>Custom message interpolation</title>

        <para>A custom message interpolator may be provided (e.g., to
        interpolate contextual data, or to adjust the default
        <classname>Locale </classname>used). A message interpolator implements
        the <classname>MessageInterpolator</classname> interface.</para>

        <programlisting>/**
 * Interpolate a given constraint violation message.
 * Implementations should be as tolerant as possible on syntax errors.
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface MessageInterpolator {
    /**
     * Interpolate the message template based on the contraint validation context.
     * The locale is defaulted according to the &lt;code&gt;MessageInterpolator&lt;/code&gt;
     * implementation. See the implementation documentation for more detail.
     *
     * @param messageTemplate The message to interpolate.
     * @param context contextual information related to the interpolation
     *
     * @return Interpolated error message.
     */
    String interpolate(String messageTemplate, Context context);

    /**
     * Interpolate the message template based on the contraint validation context.
     * The &lt;code&gt;Locale&lt;/code&gt; used is provided as a parameter.
     *
     * @param messageTemplate The message to interpolate.
     * @param context contextual information related to the interpolation
     * @param locale the locale targeted for the message
     *
     * @return Interpolated error message.
     */
    String interpolate(String messageTemplate, Context context,  Locale locale);

    /**
     * Information related to the interpolation context
     */
    interface Context {
        /**
         * @return ConstraintDescriptor corresponding to the constraint being validated
         */
        ConstraintDescriptor&lt;?&gt; getConstraintDescriptor();

        /**
         * @return value being validated
         */
        Object getValidatedValue();
    }
}</programlisting>

        <para><parameter>messageTemplate</parameter> is the value of the
        <literal>message</literal> attribute of the constraint declaration or
        provided to the <classname>ConstraintValidatorContext</classname>
        methods.</para>

        <para>The <classname>Context</classname> object contains contextual
        information related to the interpolation.</para>

        <para><parameter>getConstraintDescriptor</parameter> is the
        <classname>ConstraintDescriptor</classname> object representing the
        metadata of the failing constraint (see <xref
        linkend="constraintmetadata" />).</para>

        <para><parameter>getValidatedValue</parameter> is the value being
        validated.</para>

        <para><methodname>MessageInterpolator.interpolate(String,
        Context)</methodname> is invoked for each constraint violation report
        generated. The default <classname>Locale</classname> is implementation
        specific.</para>

        <para><methodname>MessageInterpolator.interpolate(String, Context,
        Locale)</methodname> can be invoked by a wrapping
        <classname>MessageInterpolator</classname> to enforce a specific
        <classname>Locale</classname> value by bypassing or overriding the
        default <classname>Locale</classname> strategy (see <xref
        linkend="validationapi-message-examples-specificlocale" />).</para>

        <para>A message interpolator implementation shall be
        thread-safe.</para>

        <para>The message interpolator is provided to the
        <classname>ValidatorFactory</classname> at construction time using
        <methodname>Configuration.messageInterpolator(MessageInterpolator)</methodname>.
        This message interpolator is shared by all validators generated by
        this <classname>ValidatorFactory</classname>.</para>

        <para>It is possible to override the
        <classname>MessageInterpolator</classname> implementation for a given
        <classname>Validator</classname> instance by invoking
        <methodname>ValidatorFactory.usingContext().messageInterpolator(messageInterpolator).getValidator()</methodname>.</para>

        <para>It is recommended that
        <classname>MessageInterpolator</classname> implementations delegate
        final interpolation to the Bean Validation default
        <classname>MessageInterpolator</classname> to ensure standard Bean
        Validation interpolation rules are followed, The default
        implementation is accessible through
        <methodname>Configuration.getDefaultMessageInterpolator()</methodname>.</para>

        <para>If the interpolation process leads to an exception, the
        exception is wrapped into a
        <classname>ValidationException</classname>.</para>
      </section>

      <section id="validationapi-message-examples">
        <title>Examples</title>

        <para>These examples describe message interpolation based on the
        default message interpolator's built-in messages (see <xref
        linkend="standard-resolver-messages" />), and the
        <filename>ValidationMessages.properties</filename> file shown in table
        <xref linkend="table-messageinterpolation" />. The current locale is
        assumed English.</para>

        <programlisting>//ValidationMessages.properties
myapp.creditcard.error=credit card number not valid</programlisting>

        <para></para>

        <table id="table-messageinterpolation">
          <title>message interpolation</title>

          <tgroup cols="2">
            <colspec align="center" />

            <tbody>
              <row>
                <entry>Failing constraint declaration</entry>

                <entry>interpolated message</entry>
              </row>

              <row>
                <entry><classname>@NotNull</classname></entry>

                <entry>must not be null</entry>
              </row>

              <row>
                <entry><classname>@Max(30)</classname></entry>

                <entry>must be less than or equal to 30</entry>
              </row>

              <row>
                <entry><classname>@Size(min=5, max=15, message="Key must have
                \\{{min}\\} \\ \\{{max}\\} characters")</classname></entry>

                <entry>Key must have {5} \ {15} characters</entry>
              </row>

              <row>
                <entry><classname>@Digits(integer=9,
                fraction=2)</classname></entry>

                <entry>numeric value out of bounds (&lt;9 digits&gt;.&lt;2
                digits&gt; expected)</entry>
              </row>

              <row>
                <entry><classname>@CreditCard(message={myapp.creditcard.error})</classname></entry>

                <entry>credit card number not valid</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <!--SCP: add example of {value} here. Add use of MessageFormat style formatting-->

        <para>Here is an approach to specify the <classname>Locale</classname>
        value to choose on a given <classname>Validator</classname>.
        <classname>Locale</classname> aware
        <classname>MessageInterpolator</classname>. See <xref
        linkend="bootstrapping" /> for more details on the APIs.</para>

        <example id="validationapi-message-examples-specificlocale">
          <title>Use MessageInterpolator to use a specific Locale
          value</title>

          <programlisting>/**
 * delegates to a MessageInterpolator implementation but enforce a given Locale
 */
public class LocaleSpecificMessageInterpolator implements MessageInterpolator {
    private final MessageInterpolator defaultInterpolator;
    private final Locale defaultLocale;

    public LocaleSpecificMessageInterpolator(MessageInterpolator interpolator, Locale locale) {
        this.defaultLocale = locale;
        this.defaultInterpolator = interpolator;
    }

    /**
     * enforece the locale passed to the interpolator
     */
    public String interpolate(String message, 
                              Context context) {
        return defaultInterpolator.interpolate(message, 
                                               context, 
                                               this.defaultLocale);
    }

    // no real use, implemented for completeness
    public String interpolate(String message,
                              Context context,
                              Locale locale) {
        return defaultInterpolator.interpolate(message, context, locale);
    }
}


Locale locale = getMyCurrentLocale();
MessageInterpolator interpolator = new LocaleSpecificMessageInterpolator(
                                       validatorFactory.getMessageInterpolator(),
                                       locale);

Validator validator = validatorFactory.usingContext()
                                      .messageInterpolator(interpolator)
                                      .getValidator();</programlisting>
        </example>

        <para>Most of the time, however, the relevant
        <classname>Locale</classname> will be provided by your application
        framework transparently. This framework will implement its own version
        of <classname>MessageInterpolator</classname> and pass it during the
        <classname>ValidatorFactory</classname> configuration. The application
        will not have to set the <classname>Locale</classname> itself. This
        example shows how a container framework would implement
        <classname>MessageInterpolator</classname> to provide a user specific
        default locale.</para>

        <example id="validationapi-message-examples-jsflocale">
          <title>Contextual container possible
          <classname>MessageInterpolator</classname> implementation</title>

          <programlisting>public class ContextualMessageInterpolator implements MessageInterpolator {
    private final MessageInterpolator delegate;

    public ContextualMessageInterpolator(MessageInterpolator delegate) { 
        this.delegate = delegate; 
    }

    public String interpolate(String message, Context context) {
        Locale locale = Container.getManager().getUserLocale();
        return this.delegate.interpolate(
                        message, context, locale );
    }

    public String interpolate(String message, Context context, Locale locale) {
        return this.delegate.interpolate(message, context, locale);
    }
}


//Build the ValidatorFactory
Configuration&lt;?&gt; configuration = Validation.byDefaultProvider().configure();
ValidatorFactory factory = configuration
    .messageInterpolator( 
        new ContextualMessageInterpolator( 
                configuration.getDefaultMessageInterpolator() ) )
    .buildValidatorFactory();

//The container uses the factory to validate constraints using the specific MessageInterpolator
Validator validator = factory.getValidator();</programlisting>
        </example>
      </section>
    </section>

    <section id="bootstrapping">
      <title>Bootstrapping</title>

      <para>The bootstrapping API aims at providing a
      <classname>ValidatorFactory</classname> object which is used to create
      <classname>Validator</classname> instances. The bootstrap process is
      decoupled from the provider implementation initialization: a bootstrap
      implementation must be able to bootstrap any Bean Validation provider
      implementation. The bootstrap sequence has been designed to achieve
      several goals:</para>

      <itemizedlist>
        <listitem>
          <para>plug multiple implementations</para>
        </listitem>

        <listitem>
          <para>choose a specific implementation</para>
        </listitem>

        <listitem>
          <para>extensibility: an application using a specific provider
          implementation can use specific configurations</para>
        </listitem>

        <listitem>
          <para>share and reuse of metadata across
          <classname>Validator</classname>s</para>
        </listitem>

        <listitem>
          <para>leave as much freedom as possible to implementations</para>
        </listitem>

        <listitem>
          <para>provide integration mechanisms to Java EE 6 and other
          containers</para>
        </listitem>

        <listitem>
          <para>type safety</para>
        </listitem>
      </itemizedlist>

      <para>The main artifacts involved in the bootstrap process are:</para>

      <itemizedlist>
        <listitem>
          <para><classname>Validation</classname>: API entry point. Lets you
          optionally define the Bean Validation provider targeted as well as a
          provider resolution strategy. Validation generates
          <classname>Configuration</classname> objects and can bootstrap any
          provider implementation.</para>
        </listitem>

        <listitem>
          <para><classname>ValidationProvider</classname>: contract between
          the bootstrap procedure and a Bean Validation provider
          implementation.</para>
        </listitem>

        <listitem>
          <para><classname>ValidationProviderResolver</classname>: returns a
          list of all Bean Validation providers available in the execution
          context (generally the classpath).</para>
        </listitem>

        <listitem>
          <para><classname>Configuration</classname>: collects the
          configuration details that will be used to build
          <classname>ValidatorFactory</classname>. A specific sub interface of
          <classname>Configuration</classname> must be provided by Bean
          Validation providers as a unique identifier. This sub interface
          typically hosts provider specific configurations.</para>
        </listitem>

        <listitem>
          <para><classname>ValidatorFactory</classname>: result of the
          bootstrap process. Build <classname>Validator</classname> instances
          from a given Bean Validation provider.</para>
        </listitem>

        <listitem>
          <para><filename>META-INF/validation.xml</filename>: a configuration
          file, Bean Validation users can use to customize the configuration
          of the default <classname>ValidatorFactory</classname>.</para>
        </listitem>
      </itemizedlist>

      <para>Let's first see the API in action through some examples before
      diving into the concrete definitions.</para>

      <section>
        <title>Examples</title>

        <para>The most simple approach is to initialize the default Bean
        Validation provider or the one defined in the XML configuration file.
        The <classname>ValidatorFactory</classname> is then ready to provide
        <classname>Validator</classname> instances.</para>

        <example>
          <title>Simple Bean Validation bootstrap sequence</title>

          <programlisting>ValidatorFactory factory = Validation.buildDefaultValidatorFactory();

//cache the factory somewhere
Validator validator = factory.getValidator();</programlisting>
        </example>

        <para>The <classname>ValidatorFactory</classname> object is
        thread-safe. Building <classname>Validator</classname> instances is
        typically a cheap operation. Building a
        <classname>ValidatorFactory</classname> is typically more expensive.
        Make sure to check your Bean Validation implementation documentation
        for more accurate details.</para>

        <para>The second example shows how a container can customize some Bean
        Validator resource handling to match its own behavior.</para>

        <example>
          <title>Customize message resolution, traversable resolver and
          constraint Validator factory implementation</title>

          <programlisting>//some customization from a container
ValidatorFactory factory = Validation
       .byDefaultProvider().configure()
          .messageInterpolator( new ContainerMessageInterpolator() )
          .constraintValidatorFactory( new ContainerComponentConstraintValidatorFactory() )
          .traversableResolver( new JPAAwareTraversableResolver() )
          .buildValidatorFactory();

//cache the factory somewhere
Validator validator = factory.getValidator();</programlisting>
        </example>

        <para>The third example shows how to bootstrap Bean Validation in an
        environment not following the traditional Java classloader strategies
        (such as tools or alternative service containers like OSGi). They can
        provider some alternative provider resolution strategy to discover
        Bean Validation providers.</para>

        <example>
          <title>Customize the Bean Validation provider resolution
          mechanism</title>

          <programlisting>//osgi environment
ValidatorFactory factory = Validation
       .byDefaultProvider()
          .providerResolver( new OSGiServiceDiscoverer() )
          .configure()
             .buildValidatorFactory();

//cache the factory somewhere
Validator validator = factory.getValidator();</programlisting>
        </example>

        <para>The next example shows how a client can choose a specific Bean
        Validation provider and configure provider specific properties
        programmatically in a type-safe way.</para>

        <example>
          <title>Use a specific provider and add specific
          configuration</title>

          <programlisting>ValidatorFactory factory = Validation
       .byProvider( ACMEProvider.class )  //chose a specific provider
       .configure()
          .messageInterpolator( new ContainerMessageInterpolator() ) //default configuration option
          .addConstraint(Address.class, customConstraintDescriptor) //ACME specific method
          .buildValidatorFactory();

//same initialization decomposing calls
ACMEConfiguration acmeConfiguration = Validation
       .byProvider( ACMEProvider.class )
       .configure();

ValidatorFactory factory = acmeConfiguration
          .messageInterpolator( new ContainerMessageInterpolator() ) //default configuration option
          .addConstraint(Address.class, customConstraintDescriptor) //ACME specific method
          .buildValidatorFactory();

/**
 * ACME specific validator configuration and configuration options
 */
public interface ACMEConfiguration extends Configuration&lt;ACMEConfiguration&gt; {
    /**
     * Programmatically add constraints. Specific to the ACME provider.
     */
    ACMEConfiguration addConstraint(Class&lt;?&gt; entity, 
                                    ACMEConstraintDescriptor constraintDescriptor);
}

/**
 * ACME validation provider
 * Note how ACMEConfiguration and ACMEProvider are linked together 
 * via the generic parameter.
 */
public class ACMEProvider implements ValidationProvider&lt;ACMEConfiguration&gt; {
    ...
}</programlisting>
        </example>

        <para>The last example shows how a <classname>Validator</classname>
        can use a specific <classname>MessageInterpolator</classname>
        implementation</para>

        <example>
          <title>Use a specific MessageInterpolator instance for a given
          Validator</title>

          <programlisting>ValidatorFactory factory = ...;
MessageInterpolator customInterpolator = new LocaleSpecificMessageInterpolator(
    locale, 
    factory.getMessageInterpolator()
);

Validator localizedValidator = 
    factory.usingContext()
                   .messageInterpolator(customInterpolator)
                   .getValidator();</programlisting>
        </example>

        <para>In the same way, a custom
        <classname>TraversableResolver</classname> can be passed.</para>

        <para>We will now explore the various interfaces, their constraints
        and usage. We will go from the <classname>ValidatorFactory</classname>
        to the <classname>Validation</classname> class walking up the
        bootstrap chain.</para>
      </section>

      <section>
        <title>ValidatorFactory</title>

        <para><classname>ValidatorFactory</classname> objects build and
        provide initialized instances of <classname>Validator</classname> to
        Bean Validation clients. Each <classname>Validator</classname>
        instance is configured for a given context (message interpolator,
        traversable resolver). Clients should cache
        <classname>ValidatorFactory</classname> objects and reuse them for
        optimal performances. The API is designed to allow implementors to
        share constraint metadata in
        <classname>ValidatorFactory</classname>.</para>

        <para><classname>ValidatorFactory</classname> implementations must be
        thread-safe. <classname>ValidatorFactory</classname> implementations
        can cache <classname>Validator</classname> instances if needed.</para>

        <example>
          <title>ValidatorFactory interface</title>

          <programlisting>/**
 * Factory returning initialized &lt;code&gt;Validator&lt;/code&gt; instances.
 * Implementations are thread-safe
 * This object is typically cached and reused.
 *
 * @author Emmanuel Bernard
 */
public interface ValidatorFactory {
    /**
     * Returns an initialized &lt;code&gt;Validator&lt;/code&gt; instance using the
     * factory defaults for message interpolator, traversable resolver
     * and constraint validator factory.
     * &lt;p&gt;
     * Validator instances can be pooled and shared by the implementation.
     * &lt;/p&gt;
     * @return an initialized &lt;code&gt;Validator&lt;/code&gt; instance
     */
    Validator getValidator();

    /**
     * Defines a new validator context and return a &lt;code&gt;Validator&lt;/code&gt;
     * compliant this new context.
     *
     * @return a &lt;code&gt;ValidatorContext&lt;/code&gt;.
     */
    ValidatorContext usingContext();

    /**
     * Returns the &lt;code&gt;MessageInterpolator&lt;/code&gt; instance configured at
     * initialization time for the &lt;code&gt;ValidatorFactory&lt;code&gt;.
     * This is the instance used by #getValidator().
     *
     * @return MessageInterpolator instance.
     */
    MessageInterpolator getMessageInterpolator();

    /**
     * Returns the &lt;code&gt;TraversableResolver&lt;/code&gt; instance configured
     * at initialization time for the &lt;code&gt;ValidatorFactory&lt;code&gt;.
     * This is the instance used by #getValidator().
     *
     * @return TraversableResolver instance.
     */
    TraversableResolver getTraversableResolver();

    /**
     * Returns the &lt;code&gt;ConstraintValidatorFactory&lt;/code&gt; instance
     * configured at initialization time for the
     * &lt;code&gt;ValidatorFactory&lt;code&gt;.
     * This is the instance used by #getValidator().
     *
     * @return ConstraintValidatorFactory instance.
     */
    ConstraintValidatorFactory getConstraintValidatorFactory();

    /**
     * Return an instance of the specified type allowing access to
     * provider-specific APIs. If the Bean Validation provider
     * implementation does not support the specified class,
     * &lt;code&gt;ValidationException,&lt;/code&gt; is thrown.
     *
     * @param type  the class of the object to be returned.
     *
     * @return an instance of the specified class.
     *
     * @throws ValidationException if the provider does not
     *         support the call.
     */
    public &lt;T&gt; T unwrap(Class&lt;T&gt; type);
}</programlisting>
        </example>

        <para>A <classname>ValidatorFactory</classname> is provided by a
        <classname>Configuration</classname> object.</para>

        <para><methodname>unwrap</methodname> is provided as a way to access a
        Bean Provider specific object of a given type typically as a
        complement to the <classname>ValidatorFactory</classname> contract.
        Using this method makes your code non portable.</para>

        <example>
          <title>Using unwrap to access a provider specific contract</title>

          <programlisting>//if using the ACME provider
ACMEValidatorFactory acmeFactory = factory.unwrap(ACMEValidatorFactory.class);
acmeFactory.setSpecificConfiguration(...);</programlisting>
        </example>

        <para><methodname>getMessageInterpolator()</methodname> returns the
        <classname>MessageInterpolator</classname> instance configured during
        the initialization of the <classname>ValidatorFactory</classname>. It
        is particularly useful to build a <classname>Validator</classname>
        specific <classname>MessageInterpolator</classname> wrapping the one
        from the <classname>ValidatorFactory</classname>.</para>

        <para><methodname>getTraversableResolver()</methodname> returns the
        <classname>TraversableResolver</classname> instance configured during
        the initialization of the <classname>ValidatorFactory</classname>. It
        is particularly useful to build a <classname>Validator</classname>
        specific <classname>TraversableResolver</classname> wrapping the one
        from the <classname>ValidatorFactory</classname>.</para>

        <para><methodname>getConstraintValidatorFactory()</methodname> returns
        the <classname>ConstraintValidatorFactory</classname> instance
        configured during the initialization of the
        <classname>ValidatorFactory</classname>. It is particularly useful to
        build a <classname>Validator</classname> specific
        <classname>ConstraintValidatorFactory</classname> wrapping the one
        from the <classname>ValidatorFactory</classname>.</para>

        <para><classname>ValidatorContext</classname> returned by
        <methodname>usingContext</methodname> can be used to customize the
        state in which the <classname>Validator</classname> must be
        initialized. This is used to customize the
        <classname>MessageInterpolator</classname>, the
        <classname>TraversableResolver</classname> or the
        <classname>ConstraintValidatorFactory</classname>.</para>

        <example>
          <title>ValidatorContext interface</title>

          <programlisting>/**
 * Represents the context that is used to create &lt;code&gt;Validator&lt;/code&gt;
 * instances.
 *
 * A client may use methods of the &lt;code&gt;ValidatorContext&lt;/code&gt; returned by
 * &lt;code&gt;ValidatorFactory#usingContext&lt;/code&gt; to customize
 * the context used to create &lt;code&gt;Validator&lt;/code&gt; instances
 * (for instance establish different message interpolators or
 * traversable resolvers).
 * 
 * @author Emmanuel Bernard
 */
public interface ValidatorContext {
    /**
     * Defines the message interpolator implementation used by the
     * &lt;code&gt;Validator&lt;/code&gt;.
     * If not set or if null is passed as a parameter,
     * the message interpolator of the &lt;code&gt;ValidatorFactory&lt;/code&gt;
     * is used.
     *
     * @return self following the chaining method pattern
     */
    ValidatorContext messageInterpolator(MessageInterpolator messageInterpolator);

    /**
     * Defines the traversable resolver implementation used by the
     * &lt;code&gt;Validator&lt;/code&gt;.
     * If not set or if null is passed as a parameter,
     * the traversable resolver of the &lt;code&gt;ValidatorFactory&lt;/code&gt; is used.
     *
     * @return self following the chaining method pattern
     */
    ValidatorContext traversableResolver(TraversableResolver traversableResolver);

    /**
     * Defines the constraint validator factory implementation used by the
     * &lt;code&gt;Validator&lt;/code&gt;.
     * If not set or if null is passed as a parameter,
     * the constraint validator factory of the &lt;code&gt;ValidatorFactory&lt;/code&gt; is used.
     *
     * @return self following the chaining method pattern
     */
    ValidatorContext constraintValidatorFactory(ConstraintValidatorFactory factory);

    /**
     * @return an initialized &lt;code&gt;Validator&lt;/code&gt; instance respecting the defined state.
     * Validator instances can be pooled and shared by the implementation.
     */
    Validator getValidator();
}</programlisting>
        </example>

        <para>The <classname>MessageInterpolator</classname>, the
        <classname>TraversableResolver</classname> or the
        <classname>ConstraintValidatorFactory</classname> passed to the
        <classname>ValidatorContext</classname> are used instead of the
        <classname>ValidatorFactory</classname>'s
        <classname>MessageInterpolator</classname> or
        <classname>TraversableResolver</classname> instances.</para>

        <example>
          <title>Use of ValidatorFactory</title>

          <programlisting>ValidatorFactory factory = ...
Validator validatorUsingDefaults = factory.getValidator();
Validator validatorUsingCustomTraversable = factory
                     .usingContext()
                     .traversableResolver( new JPATraversableResolver() )
                     .getValidator();</programlisting>
        </example>

        <para>See <xref
        linkend="validationapi-message-examples-specificlocale" /> for an
        example using
        <methodname>ValidatorFactory.getMessageInterpolator()</methodname>.</para>
      </section>

      <section>
        <title>Configuration</title>

        <para><classname>Configuration</classname> collects configuration
        information, determines the correct provider implementation and
        delegates it the <classname>ValidatorFactory</classname> creation.
        This class lets you define:</para>

        <itemizedlist>
          <listitem>
            <para>the message interpolator strategy instance</para>
          </listitem>

          <listitem>
            <para>the traversable resolver strategy instance</para>
          </listitem>

          <listitem>
            <para>the constraint validator factory instance</para>
          </listitem>

          <listitem>
            <para>XML constraint mappings</para>
          </listitem>

          <listitem>
            <para>provider specific properties</para>
          </listitem>

          <listitem>
            <para>whether or not
            <classname>META-INF/validation.xml</classname> is
            considered.</para>
          </listitem>
        </itemizedlist>

        <para>A <classname>Configuration</classname> does provide a
        <classname>MessageInterpolator</classname> implementation following
        the default Bean Validation <classname>MessageInterpolator</classname>
        rules as defined in <xref linkend="default-messageresolver" /> by
        calling <methodname>getDefaultMessageInterpolator()</methodname>. Such
        an implementation is useful to let a custom
        <classname>MessageInterpolator</classname> delegate to the standard
        <classname>MessageInterpolator</classname> (see <xref
        linkend="custom-message-resolution" /> and an example making use of
        <methodname>getDefaultMessageInterpolator()</methodname> in <xref
        linkend="validationapi-message-examples-jsflocale" />).</para>

        <para>A <classname>Configuration</classname> does provide a
        <classname>TraversableResolver</classname> implementation following
        the default Bean Validation <classname>TraversableResolver</classname>
        rules as defined in <xref
        linkend="constraintdeclarationvalidationprocess-validationroutine-traversable" />
        by calling <methodname>getDefaultTraversableResolver()</methodname>.
        Such an implementation is useful to let a custom
        <classname>TraversableResolver</classname> delegate to the standard
        <classname>TraversableResolver</classname>.</para>

        <para>A <classname>Configuration</classname> does provide a
        <classname>ConstraintValidatorFactory</classname> implementation
        following the default Bean Validation
        <classname>ConstraintValidatorFactory</classname> rules as defined in
        <xref
        linkend="constraintsdefinitionimplementation-constraintfactory" /> by
        calling
        <methodname>getDefaultConstraintValidatorFactory()</methodname>. Such
        an implementation is useful to let a custom
        <classname>ConstraintValidatorFactory</classname> delegate to the
        standard <classname>TraversableResolver</classname>.</para>

        <para>Clients call
        <methodname>Configuration.buildValidatorFactory()</methodname> to
        retrieve the initialized <classname>ValidatorFactory</classname>
        instance.</para>

        <example>
          <title>Configuration interface</title>

          <programlisting>/**
 * Receives configuration information, selects the appropriate
 * Bean Validation provider and builds the appropriate &lt;code&gt;ValidatorFactory&lt;/code&gt;.
 * &lt;p/&gt;
 * Usage:
 * &lt;pre&gt;
 * {@code
 * Configuration&lt;?&gt; configuration = //provided by one of the Validation bootstrap methods
 *     ValidatorFactory = configuration
 *         .messageInterpolator( new CustomMessageInterpolator() )
 *         .buildValidatorFactory();}
 * &lt;/pre&gt;
 * &lt;p/&gt;
 * By default, the configuration information is retrieved from
 * &lt;i&gt;META-INF/validation.xml&lt;/i&gt;.
 * It is possible to override the configuration retrieved from the XML file
 * by using one or more of the &lt;code&gt;Configuration&lt;/code&gt; methods.
 * &lt;p/&gt;
 * The {@link ValidationProviderResolver} is specified at configuration time
 * (see {@link javax.validation.spi.ValidationProvider}).
 * If none is explicitly requested, the default &lt;code&gt;ValidationProviderResolver&lt;/code&gt; is used.
 * &lt;p/&gt;
 * The provider is selected in the following way:
 * &lt;ul&gt;
 * &lt;li&gt;if a specific provider is requested programmatically using
 * &lt;code&gt;Validation.byProvider(Class)&lt;/code&gt;, find the first provider implementing
 * the provider class requested and use it&lt;/li&gt;
 * &lt;li&gt;if a specific provider is requested in &lt;i&gt;META-INF/validation.xml&lt;/i&gt;,
 * find the first provider implementing the provider class requested and use it&lt;/li&gt;
 * &lt;li&gt;otherwise, use the first provider returned by the &lt;code&gt;ValidationProviderResolver&lt;code&gt;&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p/&gt;
 * Implementations are not meant to be thread-safe.
 *
 * @author Emmanuel Bernard
 */
public interface Configuration&lt;T extends Configuration&lt;T&gt;&gt; {

    /**
     * Ignore data from the &lt;i&gt;META-INF/validation.xml&lt;/i&gt; file if this
     * method is called.
     * This method is typically useful for containers that parse
     * &lt;i&gt;META-INF/validation.xml&lt;/i&gt; themselves and pass the information
     * via the &lt;code&gt;Configuration&lt;/code&gt; methods.
     *
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern.
     */
    T ignoreXmlConfiguration();

    /**
     * Defines the message interpolator used. Has priority over the configuration
     * based message interpolator.
     * If &lt;code&gt;null&lt;/code&gt; is passed, the default message interpolator is used
     * (defined in XML or the specification default).
     *
     * @param interpolator message interpolator implementation.
     *
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern.
     */
    T messageInterpolator(MessageInterpolator interpolator);

    /**
     * Defines the traversable resolver used. Has priority over the configuration
     * based traversable resolver.
     * If &lt;code&gt;null&lt;/code&gt; is passed, the default traversable resolver is used
     * (defined in XML or the specification default).
     *
     * @param resolver traversable resolver implementation.
     *
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern.
     */
    T traversableResolver(TraversableResolver resolver);

    /**
     * Defines the constraint validator factory. Has priority over the configuration
     * based constraint factory.
     * If null is passed, the default constraint validator factory is used
     * (defined in XML or the specification default).
     *
     * @param constraintValidatorFactory constraint factory inmplementation.
     *
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern.
     */
    T constraintValidatorFactory(ConstraintValidatorFactory constraintValidatorFactory);

    /**
     * Add a stream describing constraint mapping in the Bean Validation
     * XML format.
     * &lt;p/&gt;
     * The stream should be closed by the client API after the
     * &lt;code&gt;ValidatorFactory&lt;/code&gt; has been built. The Bean Validation provider
     * must not close the stream.
     *
     * @param stream XML mapping stream.
     *
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern.
     * @throws IllegalArgumentException if &lt;code&gt;stream&lt;/code&gt; is null
     */
    T addMapping(InputStream stream);

    /**
     * Add a provider specific property. This property is equivalent to
     * XML configuration properties.
     * If the underlying provider does not know how to handle the property,
     * it must silently ignore it.
     * &lt;p/&gt;
     * Note: Using this non type-safe method is generally not recommended.
     * &lt;p/&gt;
     * It is more appropriate to use, if available, the type-safe equivalent provided
     * by a specific provider via its &lt;code&gt;Configuration&lt;code&gt; subclass.
     * &lt;code&gt;ValidatorFactory factory = Validation.byProvider(ACMEPrivoder.class)
     * .configure()
     * .providerSpecificProperty(ACMEState.FAST)
     * .buildValidatorFactory();
     * &lt;/code&gt;
     * This method is typically used by containers parsing &lt;i&gt;META-INF/validation.xml&lt;/i&gt;
     * themselves and injecting the state to the Configuration object.
     * &lt;p/&gt;
     * If a property with a given name is defined both via this method and in the
     * XML configuration, the value set programmatically has priority.
     *
     * If null is passed as a value, the value defined in XML is used. If no value
     * is defined in XML, the property is considered unset.
     *
     * @param name property name.
     * @param value property value.
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern.
     *
     * @throws IllegalArgumentException if &lt;code&gt;name&lt;/code&gt; is null
     */
    T addProperty(String name, String value);

    /**
     * Return an implementation of the &lt;code&gt;MessageInterpolator&lt;/code&gt; interface
     * following the default &lt;code&gt;MessageInterpolator&lt;/code&gt; defined in the
     * specification:
     * &lt;ul&gt;
     * &lt;li&gt;use the ValidationMessages resource bundle to load keys&lt;/li&gt;
     * &lt;li&gt;use Locale.getDefault()&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return default MessageInterpolator implementation compliant with the specification
     */
    MessageInterpolator getDefaultMessageInterpolator();

    /**
     * Return an implementation of the &lt;code&gt;TraversableResolver&lt;/code&gt; interface
     * following the default &lt;code&gt;TraversableResolver&lt;/code&gt; defined in the
     * specification:
     * &lt;ul&gt;
     * &lt;li&gt;if Java Persistence is available in the runtime environment, 
     * a property is considered reachable if Java Persistence considers
     * the property as loaded&lt;/li&gt;
     * &lt;li&gt;if Java Persistence is not available in the runtime environment,
     * all properties are considered reachable&lt;/li&gt;
     * &lt;li&gt;all properties are considered cascadable.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return default TraversableResolver implementation compliant with the specification
     */
    TraversableResolver getDefaultTraversableResolver();

    /**
     * Return an implementation of the &lt;code&gt;ConstraintValidatorFactory&lt;/code&gt; interface
     * following the default &lt;code&gt;ConstraintValidatorFactory&lt;/code&gt; defined in the
     * specification:
     * &lt;ul&gt;
     * &lt;li&gt;uses the public no-arg constructor of the &lt;code&gt;ConstraintValidator&lt;/code&gt;&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return default ConstraintValidatorFactory implementation compliant with the specification
     */
    ConstraintValidatorFactory getDefaultConstraintValidatorFactory();

    /**
     * Build a &lt;code&gt;ValidatorFactory&lt;/code&gt; implementation.
     *
     * @return ValidatorFactory
     * @throws ValidationException if the ValidatorFactory cannot be built
     */
    ValidatorFactory buildValidatorFactory();
}</programlisting>
        </example>

        <para>A Bean Validation provider must define a sub interface of
        <classname>Configuration</classname> uniquely identifying the
        provider. This subclass is linked to its provider via the
        <classname>ValidationProvider</classname> generic parameter. The
        <classname>Configuration</classname> sub interface typically hosts
        provider specific configuration methods.</para>

        <para>To facilitate the use of provider specific configuration
        methods, <classname>Configuration</classname> uses generics:
        <classname>Configuration&lt;T extends
        Configuration&lt;T&gt;&gt;</classname> ; the generic return type
        <classname>T</classname> is returned by chaining methods. The provider
        specific sub interface must resolve the generic T as itself as shown
        in <xref linkend="example-providerspecific-config" />.</para>

        <example id="example-providerspecific-config">
          <title>Example of provider specific Configuration sub
          interface</title>

          <programlisting>/**
 * Unique identifier of the ACME provider
 * also hosts some provider specific configuration methods
 */
public interface ACMEConfiguration 
    extends Configuration&lt;ACMEConfiguration&gt; {

    /**
     * Enables constraints implementation dynamic reloading when using ACME
     * default to false
     */
    ACMEConfiguration enableDynamicReloading(boolean);

}</programlisting>
        </example>

        <para>When
        <methodname>Configuration.buildValidatorFactory()</methodname> is
        called, the initialized <classname>ValidatorFactory</classname> is
        returned. More specifically, the requested Bean Validation provider is
        determined and the result of
        <code>validationProvider.buildValidatorFactory(ConfigurationState)</code>
        is returned. <classname>ConfigurationState</classname> gives access to
        the configuration artifacts defined in
        <filename>META-INF/validation.xml</filename> (unless XML configuration
        is ignored) and provided programmatically to
        <classname>Configuration</classname>. Generally speaking,
        programmatically defined elements have priority over XML defined
        configuration elements (read the <classname>Configuration</classname>
        JavaDoc and see <xref linkend="xml-config" /> for more
        information).</para>

        <note>
          <para>A typical implementation of
          <classname>Configuration</classname> also implements
          <classname>ConfigurationState</classname>, hence <code>this</code>
          can be passed to
          <methodname>buildValidatorFactory(ConfigurationState)</methodname>.</para>
        </note>

        <para>Streams represented in the XML configuration and opened by the
        <classname>Configuration</classname> implementation must be closed by
        the <classname>Configuration</classname> implementation after the
        <classname>ValidatorFactory</classname> creation (or if an exception
        occurs). Streams provided programmatically are the responsibility of
        the application.<!--talk about extensibility--></para>

        <example>
          <title>ConfigurationState interface</title>

          <programlisting>package javax.validation.spi;

/**
 * Contract between a &lt;code&gt;Configuration&lt;/code&gt; and a
 * &lt;/code&gt;ValidatorProvider&lt;/code&gt; to create a &lt;code&gt;ValidatorFactory&lt;/code&gt;.
 * The configuration artifacts defined in the XML configuration and provided to the
 * &lt;code&gt;Configuration&lt;/code&gt; are merged and passed along via
 * &lt;code&gt;ConfigurationState&lt;/code&gt;.
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface ConfigurationState {

    /**
     * Returns true if Configuration.ignoreXMLConfiguration() has been called
     * In this case, the ValidatorFactory must ignore META-INF/validation.xml
     *
     * @return {@code true} if META-INF/validation.xml should be ignored
     */
    boolean isIgnoreXmlConfiguration();

    /**
     * Returns the message interpolator of this configuration.
     * Message interpolator is defined in the following decreasing priority:
     * &lt;ul&gt;
     * &lt;li&gt;set via the &lt;code&gt;Configuration&lt;/code&gt; programmatic API&lt;/li&gt;
     * &lt;li&gt;defined in META-INF/validation.xml provided that ignoreXmlConfiguration
     * is false. In this case the instance is created via its no-arg constructor.&lt;/li&gt;
     * &lt;li&gt;{@code null} if undefined.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return message provider instance or null if not defined
     */
    MessageInterpolator getMessageInterpolator();

    /**
     * Returns a set of configuration streams.
     * The streams are defined by:
     * &lt;ul&gt;
     * &lt;li&gt;mapping XML streams passed programmatically in &lt;code&gt;Configuration&lt;/code&gt;&lt;/li&gt;
     * &lt;li&gt;mapping XML stream located in the resources defined in&lt;/li&gt;
     * META-INF/validation.xml (constraint-mapping element)
     * &lt;/ul&gt;
     * Streams represented in the XML configuration and opened by the
     * &lt;code&gt;Configuration&lt;/code&gt; implementation must be closed by the
     * &lt;code&gt;Configuration&lt;/code&gt; implementation after the &lt;code&gt;ValidatorFactory&lt;/code&gt;
     * creation (or if an exception occurs).
     *
     * @return set of input stream
     */
    Set&lt;InputStream&gt; getMappingStreams();

    /**
     * Returns the constraint validator factory of this configuration.
     * The {@code ConstraintValidatorFactory} implementation is defined in the following
     * decreasing priority:
     * &lt;ul&gt;
     * &lt;li&gt;set via the &lt;code&gt;Configuration&lt;/code&gt; programmatic API&lt;/li&gt;
     * &lt;li&gt;defined in META-INF/validation.xml provided that ignoredXmlConfiguration
     * is false. In this case the instance is created via its no-arg constructor.&lt;/li&gt;
     * &lt;li&gt;{@code null} if undefined.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return factory instance or {@code null} if not defined
     */
    ConstraintValidatorFactory getConstraintValidatorFactory();

    /**
     * Returns the traversable resolver for this configuration.
     * &lt;code&gt;TraversableResolver&lt;/code&gt; is defined in the following decreasing priority:
     * &lt;ul&gt;
     * &lt;li&gt;set via the &lt;code&gt;Configuration&lt;/code&gt; programmatic API&lt;/li&gt;
     * &lt;li&gt;defined in META-INF/validation.xml provided that ignoredXmlConfiguration
     * is false. In this case the instance is created via its no-arg constructor.&lt;/li&gt;
     * &lt;li&gt;{@code null} if undefined.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return traversable provider instance or {@code null} if not defined
     */
    TraversableResolver getTraversableResolver();

    /**
     * Returns a map of non type-safe custom properties.
     * Properties defined via:
     * &lt;ul&gt;
     * &lt;li&gt;Configuration.addProperty(String, String)&lt;/li&gt;
     * &lt;li&gt;META-INF/validation.xml provided that ignoredXmlConfiguration&lt;/li&gt;
     * is false.
     * &lt;/ul&gt;
     * If a property is defined both programmatically and in XML,
     * the value defined programmatically has priority
     *
     * @return Map whose key is the property key and the value the property value
     */
    Map&lt;String, String&gt; getProperties();
}</programlisting>
        </example>

        <para>The requested provider implementation is resolved according to
        the following rules in the following order:</para>

        <itemizedlist>
          <listitem>
            <para>Use the provider implementation requested if
            <classname>Configuration</classname> has been created from
            <classname>Validation.byProvider(Class)</classname>.</para>
          </listitem>

          <listitem>
            <para>Use the provider implementation described in the XML
            configuration (under
            <literal>validation-config.default-provider</literal> see <xref
            linkend="xml-config" />) if defined: the value of this element is
            the fully qualified class name of the
            <classname>ValidationProvider</classname> implementation uniquely
            identifying the provider.</para>
          </listitem>

          <listitem>
            <para>Use the first provider implementation returned by
            <classname>validationProviderResolver.getValidationProviders()</classname>.</para>
          </listitem>
        </itemizedlist>

        <para>The <classname>ValidationProviderResolver</classname> is
        specified when <classname>Configuration</classname> instances are
        created (see <classname>ValidationProvider</classname>). If no
        <classname>ValidationProviderResolver</classname> instance has been
        specified, the default
        <classname>ValidationProviderResolver</classname> is used.</para>

        <para><classname>Configuration</classname> instances are provided to
        the Bean Validation client through the
        <classname>Validation</classname> methods.
        <classname>Configuration</classname> instances are created by
        <classname>ValidationProvider</classname>.</para>

        <para>If a problem occurs while building the
        <classname>ValidationFactory</classname>, a
        <classname>ValidationException</classname> is raised. This can be due
        to various reasons including:</para>

        <itemizedlist>
          <listitem>
            <para>malformed XML configuration</para>
          </listitem>

          <listitem>
            <para>malformed XML mapping</para>
          </listitem>

          <listitem>
            <para>inability to find the provider (or a provider)</para>
          </listitem>

          <listitem>
            <para>inability to instantiate extension classes provided in the
            XML configuration</para>
          </listitem>

          <listitem>
            <para>inconsistent XML mapping (entity declared more than once,
            incorrect field etc).</para>
          </listitem>

          <listitem>
            <para>invalid constraint declaration or definition</para>
          </listitem>
        </itemizedlist>

        <para>Other exception causes may occur.</para>

        <para>Here is an example of <classname>Configuration</classname>
        use.</para>

        <example>
          <title>Use Configuration</title>

          <programlisting>Configuration&lt;?&gt; configuration = ...
ValidatorFactory factory = configuration
              .messageInterpolator( new WBMessageInterpolator() )
              .traversableResolver( new JPAAwareTraversableResolver() )
              .buildValidatorFactory();</programlisting>
        </example>
      </section>

      <section>
        <title>ValidationProvider and ValidationProviderResolver</title>

        <para><classname>ValidationProvider</classname> is the contract
        between the bootstrap process and a specific Bean Validation provider.
        <classname>ValidationProviderResolver</classname> implements the
        discovery mechanism for Bean Validation provider implementation. Any
        Bean Validation client can implement such a discovery mechanism but it
        is typically implemented by containers having specific classloader
        structures and restrictions.</para>

        <section>
          <title>ValidationProviderResolver</title>

          <para><classname>ValidationProviderResolver</classname> returns the
          list of Bean Validation providers available at runtime and more
          specifically a <classname>ValidationProvider</classname> instance
          for each provider available in the context. This service can be
          customized by implementing
          <classname>ValidationProviderResolver</classname>. Implementations
          must be thread-safe.</para>

          <example>
            <title>ValidationProviderResolver</title>

            <programlisting>/**
 * Determines the list of Bean Validation providers available in the runtime environment
 * &lt;p/&gt;
 * Bean Validation providers are identified by the presence of
 * META-INF/services/javax.validation.spi.ValidationProvider
 * files following the Service Provider pattern described
 * &lt;a href="http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider"&gt;here&lt;/a&gt;
 * &lt;p/&gt;
 * Each META-INF/services/javax.validation.spi.ValidationProvider file contains the list of
 * &lt;code&gt;ValidationProvider&lt;/code&gt; implementations each of them representing a provider.
 * &lt;p/&gt;
 * Implementations must be thread-safe.
 *
 * @author Emmanuel Bernard
 */
public interface ValidationProviderResolver {
    /**
     * Returns a list of ValidationProviders available in the runtime environment.
     *
     * @return list of validation providers.
     */
    List&lt;ValidationProvider&lt;?&gt;&gt; getValidationProviders();
}</programlisting>
          </example>

          <para>By default, providers are resolved using the Service Provider
          pattern described in <ulink
          url="http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider">http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider</ulink>.
          Bean Validation providers must supply a service provider
          configuration file by creating a text file
          <filename>javax.validation.spi.ValidationProvider</filename> and
          placing it in the <filename>META-INF/services</filename> directory
          of one of its jar files. The content of the file should contain the
          name of the provider implementation class of the
          <classname>javax.validation.spi.ValidationProvider</classname>
          interface.</para>

          <para>Bean Validation provider jars may be installed or made
          available in the same ways as other service providers, e.g. as
          extensions or added to the application classpath according to the
          guidelines in the JAR file specification.</para>

          <para>The default <classname>ValidationProviderResolver</classname>
          implementation will locate all the Bean Validation providers by
          their provider configuration files visible in the classpath. The
          default <classname>ValidationProviderResolver</classname>
          implementation is recommended and custom
          <classname>ValidationProviderResolver</classname> implementations
          should be rarely used. A typical use of a custom resolution is
          resolving providers in a classloader constrained container like OSGi
          or in a tool environment (IDE).</para>

          <para>The default <classname>ValidationProviderResolver</classname>
          can be accessed via
          <classname>BootStrapState.getDefaultValidationProviderResolver()</classname>.
          This method is typically used by the Bean Validation provider
          <classname>Configuration</classname> implementation.</para>
        </section>

        <section id="id-bootstrap-validationprovider">
          <title>ValidationProvider</title>

          <para><classname>ValidationProvider</classname> represents the SPI
          (Service Provider Interface) defining the contract between the
          provider discovery and initialization mechanism, and the provider. A
          <classname>ValidationProvider</classname> does:</para>

          <itemizedlist>
            <listitem>
              <para>Determine if a provider matches a given
              <classname>Configuration</classname> sub interface. One
              <classname>Configuration</classname> sub interface specifically
              represents one Bean Validation provider.</para>
            </listitem>

            <listitem>
              <para>Provide a provider specific
              <classname>Configuration</classname> implementation. This
              <classname>Configuration</classname> will specifically build
              <classname>ValidatorFactory</classname> instances of the
              provider it comes from.</para>
            </listitem>

            <listitem>
              <para>Build a <classname>ValidatorFactory</classname> object
              from the configuration provided by
              <classname>ConfigurationState</classname>.</para>
            </listitem>
          </itemizedlist>

          <example>
            <title>ValidationProvider</title>

            <programlisting>package javax.validation.spi;

/**
 * Contract between the validation bootstrap mechanism and the provider engine.
 * &lt;p/&gt;
 * Implementations must have a public no-arg constructor. The construction of a provider
 * should be as "lightweight" as possible.
 *
 * &lt;code&gt;T&lt;/code&gt; represents the provider specific Configuration subclass
 * which typically host provider's additional configuration methods.
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface ValidationProvider&lt;T extends Configuration&lt;T&gt;&gt; {

    /**
     * Returns a &lt;code&gt;Configuration&lt;/code&gt; instance implementing &lt;code&gt;T&lt;/code&gt;,
     * the &lt;code&gt;Configuration&lt;/code&gt; subinterface.
     * The returned &lt;code&gt;Configuration&lt;/code&gt; instance must use the current provider
     * (&lt;code&gt;this&lt;/code&gt;) to build the &lt;code&gt;ValidatorFactory&lt;/code&gt; instance.
     * &lt;p/&gt;
     *
     * @param state bootstrap state
     *
     * @return specific Configuration implementation
     */
    T createSpecializedConfiguration(BootstrapState state);

    /**
     * Returns a &lt;code&gt;Configuration&lt;/code&gt; instance. This instance is not bound to
     * use the current provider. The choice of provider follows the algorithm described
     * in {@link javax.validation.Configuration}
     * &lt;p/&gt;
     * The &lt;code&gt;ValidationProviderResolver&lt;/code&gt; used by &lt;code&gt;Configuration&lt;/code&gt;
     * is provided by &lt;code&gt;state&lt;/code&gt;.
     * If null, the default &lt;code&gt;ValidationProviderResolver&lt;/code&gt; is used.
     *
     * @param state bootstrap state
     *
     * @return Non specialized Configuration implementation
     */
    Configuration&lt;?&gt; createGenericConfiguration(BootstrapState state);

    /**
     * Build a &lt;code&gt;ValidatorFactory&lt;/code&gt; using the current provider implementation.
     * The &lt;code&gt;ValidatorFactory&lt;/code&gt; is assembled and follows the configuration passed
     * via &lt;code&gt;ConfigurationState&lt;/code&gt;.
     * &lt;p&gt;
     * The returned &lt;code&gt;ValidatorFactory&lt;/code&gt; is properly initialized and ready for use.
     * &lt;/p&gt;
     *
     * @param configurationState the configuration descriptor
     *
     * @return the instanciated ValidatorFactory
     * @throws javax.validation.ValidationException if the ValidatorFactory cannot be built
     */
    ValidatorFactory buildValidatorFactory(ConfigurationState configurationState);
}</programlisting>
          </example>

          <example>
            <title>BootstrapState interface</title>

            <programlisting>package javax.validation.spi;

/**
 * Defines the state used to bootstrap the &lt;code&gt;Configuration&lt;/code&gt;
 *
 * @author Emmanuel Bernard
 * @author Sebastian Thomschke 
 */
public interface BootstrapState {
    /**
     * User defined &lt;code&gt;ValidationProviderResolver&lt;/code&gt; strategy
     * instance or &lt;code&gt;null&lt;/code&gt; if undefined.
     *
     * @return ValidationProviderResolver instance or null
     */
    ValidationProviderResolver getValidationProviderResolver();

    /**
     * Specification default &lt;code&gt;ValidationProviderResolver&lt;/code&gt;
     * strategy instance.
     * 
     * @return default implementation of ValidationProviderResolver
     */
    ValidationProviderResolver getDefaultValidationProviderResolver();
}</programlisting>
          </example>

          <para>A client can request a specific Bean Validation provider by
          using <classname>&lt;T extends Configuration&lt;T&gt;, U extends
          ValidationProvider&lt;T&gt;&gt;
          Validation.byProvider(Class&lt;U&gt;)</classname> or by defining the
          provider in the XML configuration file. The key uniquely identifying
          a Bean Validation provider is the
          <classname>ValidationProvider</classname> implementation specific to
          this provider.</para>

          <para>A <classname>ValidationProvider</classname> implementation is
          linked (via it's generic parameter) to a specific sub interface of
          <classname>Configuration</classname>. The Bean Validation bootstrap
          API makes use of this link to return the specific Configuration
          subinterface implementation in a type-safe way when a specific
          provider is requested. The sub interface does not have to add any
          new method but is the natural holder for provider specific
          configuration methods.</para>

          <example>
            <title>Example of provider specific Configuration sub
            interface</title>

            <programlisting>/**
 * Unique identifier of the ACME provider
 * also hosts some provider specific configuration methods
 */
public interface ACMEConfiguration 
    extends Configuration&lt;ACMEConfiguration&gt; {

    /**
     * Enables constraints implementation dynamic reloading when using ACME
     * default to false
     */
    ACMEConfiguration enableDynamicReloading(boolean);

}

/**
 * ACME validation provider
 * Note how ACMEConfiguration and ACMEProvider are linked together 
 * via the generic parameter.
 */
public class ACMEProvider implements ValidationProvider&lt;ACMEConfiguration&gt; {
    ...
}</programlisting>
          </example>

          <note>
            <para><classname>Configuration</classname> references itself in
            the generic definition. Methods of
            <classname>Configuration</classname> will return the
            <classname>ACMEConfiguration</classname> making the API easy to
            use even for vendor specific extensions.</para>
          </note>

          <para>The provider discovery mechanism uses the following
          algorithm:</para>

          <itemizedlist>
            <listitem>
              <para>Retrieve available providers using
              <methodname>ValidationProviderResolver.getValidationProviders()</methodname>.</para>
            </listitem>

            <listitem>
              <para>The first <classname>ValidationProvider</classname>
              matching the requested provider is returned. Providers are
              evaluated in the order they are returned by
              <classname>ValidationProviderResolver</classname>. A provider
              instance is considered matching if it is assignable to the
              requested provider class.</para>
            </listitem>
          </itemizedlist>

          <para>When the default Bean Validation provider is requested, the
          first <classname>ValidationProvider</classname> returned by the
          <classname>ValidationProviderResolver</classname> strategy is
          returned.</para>

          <para>Every Bean Validation provider must provide a
          <classname>ValidationProvider</classname> implementation containing
          a public no-arg constructor and add the corresponding
          <filename>META-INF/services/javax.validation.spi.ValidationProvider</filename>
          file descriptor in one of its jars.</para>

          <para>If a problem occurs while building the
          <classname>ValidationFactory</classname>, a
          <classname>ValidationException</classname> is raised. This can be
          due to various reasons including:</para>

          <itemizedlist>
            <listitem>
              <para>malformed XML mapping</para>
            </listitem>

            <listitem>
              <para>inability to find the provider (or a provider)</para>
            </listitem>

            <listitem>
              <para>inability to instantiate extension classes provided in the
              XML configuration</para>
            </listitem>

            <listitem>
              <para>inconsistent XML mapping (entity declared more than once,
              incorrect field etc).</para>
            </listitem>

            <listitem>
              <para>invalid constraint declaration or definition</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>

      <section>
        <title>Validation</title>

        <para>The <classname>Validation</classname> class is the entry point
        used to bootstrap Bean Validation providers. The first entry point,
        <methodname>buildDefaultValidatorFactory()</methodname>, is considered
        to be the default <classname>ValidatorFactory</classname> and is
        equivalent to the <classname>ValidatorFactory</classname> returned by
        <code>Validation.byDefaultProvider().configure().buildValidatorFactory()</code>.</para>

        <warning>
          <para>Should the resolver strategy be configurable by XML</para>
        </warning>

        <example>
          <title>Validation methods available</title>

          <programlisting>/**
 * This class is the entry point for Bean Validation. There are three ways
 * to bootstrap it:
 * &lt;ul&gt;
 * &lt;li&gt;
 * The easiest approach is to build the default &lt;code&gt;ValidatorFactory&lt;/code&gt;.
 * &lt;pre&gt;{@code ValidatorFactory factory = Validation.buildDefaultValidatorFactory();}&lt;/pre&gt;
 * In this case, the default validation provider resolver
 * will be used to locate available providers.
 * The chosen provider is defined as followed:
 * &lt;ul&gt;
 * &lt;li&gt;if the XML configuration defines a provider, this provider is used&lt;/li&gt;
 * &lt;li&gt;if the XML configuration does not define a provider or if no XML configuration
 * is present the first provider returned by the 
 * &lt;code&gt;ValidationProviderResolver&lt;/code&gt; instance is used.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/li&gt;
 * &lt;li&gt;
 * The second bootstrap approach allows to choose a custom
 * &lt;code&gt;ValidationProviderResolver&lt;/code&gt;. The chosen
 * &lt;code&gt;ValidationProvider&lt;/code&gt; is then determined in the same way
 * as in the default bootstrapping case (see above).
 * &lt;pre&gt;{@code
 * Configuration&lt;?&gt; configuration = Validation
 *    .byDefaultProvider()
 *    .providerResolver( new MyResolverStrategy() )
 *    .configure();
 * ValidatorFactory factory = configuration.buildValidatorFactory();}
 * &lt;/pre&gt;
 * &lt;/li&gt;
 * &lt;li&gt;
 * The third approach allows you to specify explicitly and in
 * a type safe fashion the expected provider.
 * &lt;p/&gt;
 * Optionally you can choose a custom &lt;code&gt;ValidationProviderResolver&lt;/code&gt;.
 * &lt;pre&gt;{@code
 * ACMEConfiguration configuration = Validation
 *    .byProvider(ACMEProvider.class)
 *    .providerResolver( new MyResolverStrategy() )  // optionally set the provider resolver
 *    .configure();
 * ValidatorFactory factory = configuration.buildValidatorFactory();}
 * &lt;/pre&gt;
 * &lt;/li&gt;
 * &lt;/ul&gt;
 * Note:&lt;br/&gt;
 * &lt;ul&gt;
 * &lt;li&gt;
 * The &lt;code&gt;ValidatorFactory&lt;/code&gt; object built by the bootstrap process should be cached
 * and shared amongst &lt;code&gt;Validator&lt;/code&gt; consumers.
 * &lt;/li&gt;
 * &lt;li&gt;
 * This class is thread-safe.
 * &lt;/li&gt;
 * &lt;/ul&gt;
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public class Validation {

    /**
     * Build and return a &lt;code&gt;ValidatorFactory&lt;/code&gt; instance based on the
     * default Bean Validation provider and following the XML configuration.
     * &lt;p/&gt;
     * The provider list is resolved using the default validation provider resolver
     * logic.
     * &lt;p/&gt; The code is semantically equivalent to
     * &lt;code&gt;Validation.byDefaultProvider().configure().buildValidatorFactory()&lt;/code&gt;
     *
     * @return &lt;code&gt;ValidatorFactory&lt;/code&gt; instance.
     *
     * @throws ValidationException if the ValidatorFactory cannot be built
     */
    public static ValidatorFactory buildDefaultValidatorFactory() {
        [...]
    }

    /**
     * Build a &lt;code&gt;Configuration&lt;/code&gt;. The provider list is resolved
     * using the strategy provided to the bootstrap state.
     * &lt;pre&gt;
     * Configuration&amp;lt?&amp;gt; configuration = Validation
     *    .byDefaultProvider()
     *    .providerResolver( new MyResolverStrategy() )
     *    .configure();
     * ValidatorFactory factory = configuration.buildValidatorFactory();
     * &lt;/pre&gt;
     * The provider can be specified in the XML configuration. If the XML
     * configuration does not exsist or if no provider is specified,
     * the first available provider will be returned.
     *
     * @return instance building a generic &lt;code&gt;Configuration&lt;/code&gt;
     *         compliant with the bootstrap state provided.
     */
    public static GenericBootstrap byDefaultProvider() {
        [...]
    }

    /**
     * Build a &lt;code&gt;Configuration&lt;/code&gt; for a particular provider implementation.
     * Optionally overrides the provider resolution strategy used to determine the provider.
     * &lt;p/&gt;
     * Used by applications targeting a specific provider programmatically.
     * &lt;p/&gt;
     * &lt;pre&gt;
     * ACMEConfiguration configuration =
     *     Validation.byProvider(ACMEProvider.class)
     *             .providerResolver( new MyResolverStrategy() )
     *             .configure();
     * &lt;/pre&gt;,
     * where &lt;code&gt;ACMEConfiguration&lt;/code&gt; is the
     * &lt;code&gt;Configuration&lt;/code&gt; sub interface uniquely identifying the
     * ACME Bean Validation provider. and &lt;code&gt;ACMEProvider&lt;/code&gt; is the
     * &lt;code&gt;ValidationProvider&lt;/code&gt; implementation of the ACME provider.
     *
     * @param providerType the &lt;code&gt;ValidationProvider&lt;/code&gt; implementation type
     *
     * @return instance building a provider specific &lt;code&gt;Configuration&lt;/code&gt;
     *         sub interface implementation.
     */
    public static &lt;T extends Configuration&lt;T&gt;, U extends ValidationProvider&lt;T&gt;&gt;
            ProviderSpecificBootstrap&lt;T&gt; byProvider(Class&lt;U&gt; providerType) {
        [...]
    }

    [...]
}</programlisting>
        </example>

        <para>The second entry point lets the client provide a custom
        <classname>ValidationProviderResolution</classname> instance. This
        instance is passed to <classname>GenericBootstrap</classname>.
        <classname>GenericBootstrap</classname> builds a generic
        <classname>Configuration</classname> using the first
        <classname>ValidationProvider</classname> returned by
        <classname>ValidationProviderResolution</classname> and calling
        <code>ValidationProvider.createGenericConfiguration(BootstrapState
        state)</code>. <classname>BootstrapState</classname> holds the
        <classname>ValidationProviderResolution</classname> instance passed to
        <classname>GenericBootstrap</classname> and will be used by the
        <classname>Configuration</classname> instance when resolving the
        provider to use. Note that
        <code>ValidationProvider.createGenericConfiguration</code> returns a
        <classname>Configuration</classname> object not bound to any
        particular provider.</para>

        <example>
          <title>GenericBootstrap interface</title>

          <programlisting>package javax.validation.bootstrap;

/**
 * Defines the state used to bootstrap Bean Validation and
 * creates a provider agnostic &lt;code&gt;Configuration&lt;/code&gt;.
 *
 * @author Emmanuel Bernard
 */
public interface GenericBootstrap {
    /**
     * Defines the provider resolution strategy.
     * This resolver returns the list of providers evaluated
     * to build the &lt;code&gt;Configuration&lt;/code&gt;
     * &lt;p/&gt;
     * If no resolver is defined, the default &lt;code&gt;ValidationProviderResolver&lt;/code&gt;
     * implementation is used.
     *
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern
     */
    GenericBootstrap providerResolver(ValidationProviderResolver resolver);

    /**
     * Returns a generic &lt;code&gt;Configuration&lt;/code&gt; implementation.
     * At this stage the provider used to build the &lt;code&gt;ValidatorFactory&lt;/code&gt; 
     * is not defined.
     * &lt;p/&gt;
     * The &lt;code&gt;Configuration&lt;/code&gt; implementation is provided by the first provider 
     * returned by the &lt;code&gt;ValidationProviderResolver&lt;/code&gt; strategy.
     *
     * @return a Configuration implementation compliant with the bootstrap state
     * @throws javax.validation.ValidationException if the Configuration object cannot be built
     *                        this is generally due to an issue with the ValidationProviderResolver
     */
    Configuration&lt;?&gt; configure();
}</programlisting>
        </example>

        <para>The last entry point lets the client define the specific Bean
        Validation provider requested as well as a custom
        <classname>ValidationProviderResolver</classname> implementation if
        needed. The entry point method,
        <methodname>Validation.byProvider(Class&lt;U&gt;
        providerType)</methodname>, takes the provider specific
        <classname>ValidationProvider</classname> implementation type and
        returns a <classname>ProviderSpecificBootstrap</classname> object that
        guarantees to return an instance of the specific
        <classname>Configuration</classname> sub interface. Thanks to the use
        of generics, the client API does not have to cast to the
        <classname>Configuration</classname> sub interface.</para>

        <para>A <classname>ProviderSpecificBootstrap</classname> object can
        optionally receive a <classname>ValidationProviderResolver</classname>
        instance.</para>

        <example>
          <title>ProviderSpecificBootstrap interface</title>

          <programlisting>package javax.validation.bootstrap;

/**
 * Defines the state used to bootstrap Bean Validation and
 * creates a provider specific &lt;code&gt;Configuration&lt;/code&gt;
 * of type&lt;code&gt;T&lt;/code&gt;.
 * &lt;p/&gt;
 * The specific &lt;code&gt;Configuration&lt;/code&gt; is linked to the provider via the generic
 * parameter of the &lt;code&gt;ValidationProvider&lt;/code&gt; implementation.
 * &lt;p/&gt;
 * The requested provider is the first provider instance assignable to
 * the requested provider type (known when &lt;code&gt;ProviderSpecificBootstrap&lt;/code&gt; is built).
 * The list of providers evaluated is returned by {@link ValidationProviderResolver}.
 * If no &lt;code&gt;ValidationProviderResolver&lt;/code&gt; is defined, the
 * default &lt;code&gt;ValidationProviderResolver&lt;/code&gt; strategy is used.
 *
 * @author Emmanuel Bernard
 */
public interface ProviderSpecificBootstrap&lt;T extends Configuration&lt;T&gt;&gt; {

    /**
     * Optionally defines the provider resolver implementation used.
     * If not defined, use the default &lt;code&gt;ValidationProviderResolver&lt;/code&gt;
     *
     * @param resolver &lt;code&gt;ValidationProviderResolver&lt;/code&gt; implementation used
     *
     * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern
     */
    public ProviderSpecificBootstrap&lt;T&gt; providerResolver(ValidationProviderResolver resolver);

    /**
     * Determines the provider implementation suitable for &lt;code&gt;T&lt;/code&gt; and delegates
     * the creation of this specific &lt;code&gt;Configuration&lt;/code&gt; subclass to the provider.
     *
     * @return &lt;code&gt;Configuration&lt;/code&gt; sub interface implementation
     * @throws javax.validation.ValidationException if the Configuration object cannot be built
     *                        this is generally due to an issue with the ValidationProviderResolver
     */
    public T configure();
}</programlisting>
        </example>

        <para><methodname>ProviderSpecificBootstrap.configure()</methodname>
        must return the result of
        <methodname>ValidationProvider.createSpecializedConfiguration(BootstrapState
        state)</methodname>. The state parameter holds the
        <classname>ValidationProviderResolver</classname> passed to
        <classname>ProviderSpecificBootstrap</classname>. The validation
        provider instance used is the one assignable to the type passed as a
        parameter in <methodname>Validation.byProvider(Class)</methodname>.
        The validation provider is selected according to the algorithm
        described in (<xref
        linkend="id-bootstrap-validationprovider" />).</para>

        <para>The <classname>Validation</classname> implementation must not
        contain any non private attribute or method aside from the three
        public static bootstrap methods:</para>

        <itemizedlist>
          <listitem>
            <para><methodname>public static ValidatorFactory
            buildDefaultValidatorFactory()</methodname></para>
          </listitem>

          <listitem>
            <para><methodname>public static GenericBootstrap
            byDefaultProvider()</methodname></para>
          </listitem>

          <listitem>
            <para><methodname>public static &lt;T extends
            Configuration&lt;T&gt;, U extends ValidationProvider&lt;T&gt;&gt;
            ProviderSpecificBootstrap&lt;T&gt; byProvider(Class&lt;U&gt;
            providerType)</methodname></para>
          </listitem>
        </itemizedlist>

        <para>The bootstrap API is designed to allow complete portability
        amongst Bean Validation provider implementations. The bootstrap
        implementation must ensure it can bootstrap third party
        providers.</para>

        <para>When building the <classname>Configuration</classname> object,
        if the <classname>ValidationProviderResolver</classname> either fail
        or if the expected provider is not found, a
        <classname>ValidationException</classname> is raised.</para>
      </section>

      <section id="xml-config">
        <title>XML Configuration: META-INF/validation.xml</title>

        <para>Unless explicitly ignored by calling
        <classname>Configuration.ignoreXMLConfiguration()</classname>, a
        <classname>Configuration</classname> takes into account the
        configuration available in
        <filename>META-INF/validation.xml</filename>. This configuration file
        is optional but can be used by applications to refine some of the Bean
        Validation behavior. If more than one
        <filename>META-INF/validation.xml</filename> file is found in the
        classpath, a <classname>ValidationException</classname> is
        raised.</para>

        <para>Unless stated otherwise, XML based configuration settings are
        overridden by values explicitly set via the
        <classname>Configuration</classname> API. For example, the
        <classname>MessageInterpolator</classname> defined via
        <methodname>Configuration.messageInterpolator(MessageInterpolator)</methodname>
        has priority over the <literal>message-interpolator</literal>
        definition.</para>

        <para><literal>default-provider</literal>: represents the class name
        of the provider specific <classname>ValidationProvider</classname>
        implementation class. If defined, the specific provider is used
        (unless a specific provider has been chosen via the programmatic
        approach).</para>

        <para><literal>message-interpolator</literal>: represents the fully
        qualified class name of the <classname>MessageInterpolator</classname>
        implementation. When defined in XML, the implementation must have a
        public no-arg constructor. This element is optional.</para>

        <para><literal>traversable-resolver</literal>: represents the fully
        qualified class name of the <classname>TraversableResolver</classname>
        implementation. When defined in XML, the implementation must have a
        public no-arg constructor. This element is optional.</para>

        <para><literal>constraint-validator-factory</literal>: represents the
        fully qualified class name of the
        <classname>ConstraintValidatorFactory</classname> implementation. When
        defined in XML, the implementation must have a public no-arg
        constructor. This element is optional.</para>

        <para><literal>constraint-mapping</literal>: represents the resource
        path of an XML mapping file. More than one
        <literal>constraint-mapping</literal> element can be present. Mappings
        provided via
        <methodname>Configuration.addMapping(InputString)</methodname> are
        added to the list of mappings described via
        <literal>constraint-mapping</literal>.</para>

        <para><literal>property</literal>: represents a key/value pair
        property providing room to provider specific configurations. Vendors
        should use vendor namespaces for properties (e.g.,
        <literal>com.acme.validation.logging</literal>). Entries that make use
        of the namespace <literal>javax.validation</literal> and its
        subnamespaces must not be used for vendor-specific information. The
        namespace <literal>javax.validation</literal> is reserved for use by
        this specification. Properties defined via
        <methodname>Configuration.addProperty(String, String)</methodname> are
        added to the properties defined via <literal>property</literal>. If a
        property with the same name are defined in both XML and via the
        programmatic API, the value provided via programmatic API has
        priority.</para>

        <para>If a public no-arg constructor is missing, a
        <classname>ValidationException</classname> is raised during the
        <methodname>Configuration.buildValidatorFactory()</methodname>
        call.</para>

        <example>
          <title>Example of META-INF/validation.xml file</title>

          <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;validation-config
        xmlns="http://jboss.org/xml/ns/javax/validation/configuration"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/configuration validation-configuration-1.0.xsd"&gt;
    &lt;default-provider&gt;com.acme.ACMEProvider&lt;/default-provider&gt;
    &lt;message-interpolator&gt;com.acme.ACMEAwareMessageInterpolator&lt;/message-interpolator&gt;

    &lt;constraint-mapping&gt;META-INF/validation/order-constraints.xml&lt;/constraint-mapping&gt;
    &lt;constraint-mapping&gt;META-INF/validation/catalog-constraints.xml&lt;/constraint-mapping&gt;
    &lt;constraint-mapping&gt;META-INF/validation/customer-constraints.xml&lt;/constraint-mapping&gt;

    &lt;property name="com.acme.validation.logging"&gt;WARN&lt;/property&gt;
    &lt;property name="com.acme.validation.safetyChecking"&gt;failOnError&lt;/property&gt;

&lt;/validation-config&gt;</programlisting>
        </example>

        <para>The XML schema is described in <xref
        linkend="xml-config-xsd" />.</para>
      </section>

      <section>
        <title>Usage</title>

        <para>The Bean Validation bootstrap API can be used directly by the
        application, through the use of a container or by framework in need
        for validation. In all cases, the following rules apply:</para>

        <itemizedlist>
          <listitem>
            <para><classname>ValidatorFactory</classname> is a thread-safe
            object that should be built once per deployment unit</para>
          </listitem>

          <listitem>
            <para><classname>Validator</classname> is thread-safe too and
            should be considered a lightweight object.
            <classname>ValidatorFactory</classname> would typically implement
            appropriate <classname>Validator</classname> instance caching
            strategies if needed.</para>
          </listitem>
        </itemizedlist>

        <para>Containers such as Java EE, dependency injection frameworks,
        component frameworks are encouraged to propose access to
        <classname>ValidatorFactory</classname> and
        <classname>Validator</classname> objects in a way that respects the
        previous rules. For example, injection of
        <classname>Validator</classname> should be possible.</para>
      </section>
    </section>
  </chapter>

  <chapter id="constraintmetadata">
    <title>Constraint metadata request APIs</title>

    <para>The Bean Validation specification provides a way to query the
    constraint repository. This API is expected to be used for tooling support
    as well as integration with other frameworks, libraries and JSRs. The Bean
    Validation specification aims to provide both a validation engine and a
    metadata repository for object constraints. Frameworks (EE or SE) in need
    for constraint definition, validation and metadata will be able to rely on
    the Bean Validation specification for these services avoiding any
    unnecessary duplication work from an application and infrastructure point
    of view.</para>

    <section>
      <title>Validator</title>

      <para>The main API to access all metadata related to a given object is
      <classname>Validator</classname> (see <xref linkend="bootstrapping" />
      for more information on how to retrieve a
      <classname>Validator</classname> instance).</para>

      <para>A <classname>Validator</classname> instance hosts the method to
      access to the metadata repository for a given class. It is recommended
      to leave the caching of <classname>Validator</classname> instances to
      the <classname>ValidatorFactory</classname>.
      <classname>Validator</classname> implementations are thread-safe.</para>

      <programlisting>/**
 * Validate bean instances. Implementations of this interface must be thread-safe.
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface Validator {

    [...] //See 4.1

    /**
     * Return the descriptor object describing bean constraints.
     * The returned object (and associated objects including
     * &lt;code&gt;ConstraintDescriptor&lt;code&gt;s) are immutable.
     *
     * @param clazz class or interface type evaluated
     *
     * @return the bean descriptor for the specified class.
     *
     * @throws IllegalArgumentException if clazz is null
     * @throws ValidationException if a non recoverable error happens
     *                             during the metadata discovery or if some
     *                             constraints are invalid.
     */
    BeanDescriptor getConstraintsForClass(Class&lt;?&gt; clazz);
}</programlisting>

      <para><methodname>getConstraintsForClass</methodname> returns a
      <classname>BeanDescriptor</classname> object describing the bean level
      constraints (see <xref
      linkend="constraintdeclarationvalidationprocess-requirements-object" />)
      and providing access to the property level constraints metadata.</para>

      <para>If a constraint definition or declaration hosted by the requested
      class (or any of it's superclasses and interfaces according to the
      constraint propagation rules) is invalid, a
      <classname>ValidationException</classname> is raised. This can be a
      subclass of <classname>ValidationException</classname> like
      <classname>ConstraintDefinitionException</classname>,
      <classname>ConstraintDeclarationException</classname>,
      <classname>UnexpectedTypeException</classname>.</para>
    </section>

    <section id="constraintmetadata-elementdescriptor">
      <title>ElementDescriptor</title>

      <para><classname>ElementDescriptor</classname> is the root interface
      describing elements hosting constraints. It is used to describe the list
      of constraints for a given element (whether it be a field, a method or a
      class).</para>

      <para><classname>ElementDescriptor</classname> lives in the
      <classname>javax.validation.metadata</classname> package.</para>

      <programlisting>package javax.validation.metadata;

/**
 * Describes a validated element (class, field or property).
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface ElementDescriptor {

    /**
     * Return &lt;code&gt;true&lt;/code&gt; if at least one constraint declaration is present
     * for this element in the class hierarchy, &lt;code&gt;false&lt;/code&gt; otherwise.
     */
    boolean hasConstraints();

    /**
     * @return Statically defined returned type.
     */
    Class&lt;?&gt; getElementClass();

    /**
     * Return all constraint descriptors for this element in the class hierarchy
     * or an empty &lt;code&gt;Set&lt;/code&gt; if none are present.
     *
     * @return &lt;code&gt;Set&lt;/code&gt; of constraint descriptors for this element
     */
    Set&lt;ConstraintDescriptor&lt;?&gt;&gt; getConstraintDescriptors();

    /**
     * Find constraints and potentially restricts them to certain criteria.
     *
     * @return ConstraintFinder object.
     */
    ConstraintFinder findConstraints();

    /**
     * Declare restrictions on retrieved constraints.
     * Restrictions are cumulative.
     *
     * A &lt;code&gt;ConstraintFinder&lt;/code&gt; is not thread-safe. The set of matching
     * &lt;code&gt;ConstraintDescriptor&lt;/code&gt; is.
     */
    interface ConstraintFinder {
        /**
         * Restrict to the constraints matching a given set of groups for this element
         *
         * This method respects group sequences and group inheritance (including
         * class-level &lt;code&gt;Default&lt;/code&gt; group overriding) but does not return
         * &lt;code&gt;ConstraintDescriptor&lt;/code&gt;s in any particular order.
         * Specifically, ordering of the group sequence is not respected.
         *
         * @param groups groups targeted
         *
         * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern
         */
        ConstraintFinder unorderedAndMatchingGroups(Class&lt;?&gt;... groups);

        /**
         * Restrict to the constraints matching the provided scope for this element.
         *
         * Defaults to &lt;code&gt;Scope.HIERARCHY&lt;/code&gt;
         *
         * @param scope expected scope
         * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern
         */
        ConstraintFinder lookingAt(Scope scope);

        /**
         * Restrict to the constraints hosted on the listed &lt;code&gt;types&lt;/code&gt;
         * for a given element.
         *
         * Default to all possible types of the element.
         *
         * Typically used to restrict to fields (&lt;code&gt;FIELD&lt;/code&gt;)
         * or getters (&lt;code&gt;METHOD&lt;/code&gt;)
         *
         * @param types targeted types
         * @return &lt;code&gt;this&lt;/code&gt; following the chaining method pattern
         */
        ConstraintFinder declaredOn(ElementType... types);

        /**
         * Retrieve the constraint descriptors following the defined
         * restrictions and hosted on the element described by
         * &lt;code&gt;ElementDescriptor&lt;/code&gt;
         *
         * @return matching constraint descriptors
         */
        Set&lt;ConstraintDescriptor&lt;?&gt;&gt; getConstraintDescriptors();

        /**
         * Returns &lt;code&gt;true&lt;/code&gt; if at least one constraint declaration
         * matching the restrictions is present on the element,
         * &lt;code&gt;false&lt;/code&gt; otherwise.
         *
         * @return is there any constraint
         */
        boolean hasConstraints();
    }
}</programlisting>

      <programlisting>/**
 * Scope looked at when discovering constraints
 *
 * @author Emmanuel Bernard
 */
public enum Scope {
    /**
     * Look for constraints declared on the current class element
     * and ignore inheritance and elements with the same name in
     * the class hierarchy.
     */
    LOCAL_ELEMENT,

    /**
     * Look for constraints declared on all elements of the class hierarchy
     * with the same name.
     */
    HIERARCHY
}</programlisting>

      <para><methodname>getElementClass</methodname> returns either the object
      type for a class, or the returned type for a property.</para>

      <para><classname>getConstraintDescriptors</classname> returns all the
      <classname>ConstraintDescriptor</classname>s (see <xref
      linkend="constraintmetadata-constraintdescriptor" />) hosted on the
      given element in the class hierarchy, each
      <classname>ConstraintDescriptor</classname> describing one of the
      constraints declared on the given element.</para>

      <para><methodname>hasConstraints</methodname> returns true if the given
      element (class, field or property) in the class hierarchy holds at least
      one constraint declaration.</para>

      <para>If you need to query the metadata API in a more fine grained way
      for example by restricting the constraints to the one described on
      fields or on getters or by restricting to a given set of groups, you can
      use the <classname>ConstraintFinder</classname> fluent API by calling
      <methodname>findConstraints</methodname>. </para>

      <para>Here is an example restricting the list of constraints on getters,
      matching the default group and declared physically on the
      <literal>name</literal> getter of <classname>Customer</classname> (and
      not any of the getters on the super classes).</para>

      <example>
        <title>Using the fluent API to restrict matching constraints</title>

        <programlisting>public class User {
    @Size(max=50) 
    String getName() { ... }
    ...
}

public class Customer extends User {
    @NotNull
    String getName() { ... }
}

PropertyDescriptor pd = 
    validator.getConstraintsForClass(Customer.class).getConstraintsForProperty("name");
Set&lt;ConstraintDescriptor&lt;?&gt;&gt; constraints = 
    pd.findConstraints()
        .declaredOn(ElementType.METHOD)
        .unorderedAndMatchingGroups(Default.class)
        .lookingAt(Scope.LOCAL_ELEMENT)
            .getConstraintDescriptors();

assert 1 == constraints.size();

constraints = pd.getConstraintDescriptors();
//equivalent to pd.findConstraints()..getConstraintDescriptors();
assert 2 == constraints.size();      </programlisting>
      </example>

      <para><classname>unorderedAndMatchingGroups</classname> restricts to the
      <classname>ConstraintDescriptor</classname>s (see <xref
      linkend="constraintmetadata-constraintdescriptor" />) matching the set
      of groups passed as parameters and present on the element. Order is not
      respected but group inheritance and inheritance via sequence (including
      the Default group overriding at the class level) are honored.</para>

      <para><methodname>declaredOn</methodname> lets you restrict the list of
      element types constraints are hosted on. This is particularly useful to
      retrieve constraints only hosted on fields
      (<classname>ElementType.FIELD</classname>) or only hosted on getters
      (<classname>ElementType.METHOD</classname>).</para>

      <para><methodname>lookingAt</methodname> lets you restrict which
      constraints are considered. Either constraints belonging to the element
      but hosted on the class represented by
      <classname>BeanDescritptor</classname>
      (<classname>Scope.LOCAL_ELEMENT</classname>), or constraints belonging
      to the element but hosted anywhere in the class hierarchy
      (<classname>Scope.HIERARCHY</classname>).</para>
    </section>

    <section>
      <title>BeanDescriptor</title>

      <para>The <classname>BeanDescriptor</classname> interface describes a
      constrained Java Bean. This interface is returned by
      <methodname>Validator.getConstraintsForClass(Class&lt;?&gt;)</methodname>.</para>

      <para><classname>BeanDescriptor</classname> lives in the
      <classname>javax.validation.metadata</classname> package.</para>

      <programlisting>package javax.validation.metadata;

/**
 * Describes a constrained Java Bean and the constraints associated to it.
 *
 * @author Emmanuel Bernard
 */
public interface BeanDescriptor extends ElementDescriptor {
    /**
     * Returns &lt;code&gt;true&lt;/code&gt; if the bean involves validation:
     * &lt;ul&gt;
     * &lt;li&gt; a constraint is hosted on the bean itself &lt;/li&gt;
     * &lt;li&gt; a constraint is hosted on one of the bean properties&lt;/li&gt;
     * &lt;li&gt; or a bean property is marked for cascade (&lt;code&gt;@Valid&lt;/code&gt;)&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the bean involves validation, &lt;code&gt;false&lt;/code&gt; otherwise.
     */
    boolean isBeanConstrained();

    /**
     * Return the property descriptor for a given property.
     * Return &lt;code&gt;null&lt;/code&gt; if the property does not exist or has no
     * constraint nor is marked as cascaded (see {@link #getConstrainedProperties()} )
     * &lt;p/&gt;
     * The returned object (and associated objects including &lt;code&gt;ConstraintDescriptor&lt;/code&gt;s)
     * are immutable.
     *
     * @param propertyName property evaluated
     *
     * @return the property descriptor for a given property.
     *
     * @throws IllegalArgumentException if propertyName is null
     */
    PropertyDescriptor getConstraintsForProperty(String propertyName);

    /**
     * Returns a set of property descriptors having at least one constraint defined 
     * or marked as cascaded (&lt;code&gt;@Valid&lt;c/ode&gt;). If not property matches, 
     * an empty set is returned.
     */
    Set&lt;PropertyDescriptor&gt; getConstrainedProperties();
}</programlisting>

      <para><methodname>isBeanConstrained</methodname> returns true if the
      given class (and superclasses and interfaces) host at least one
      validation declaration (either constraint or
      <classname>@Valid</classname> annotation). If the method returns false,
      the Bean Validation engine can safely ignore the bean as it will not be
      impacted by validation.</para>

      <para><methodname>getConstraintsForProperty</methodname> returns a
      <classname>PropertyDescriptor</classname> object describing the property
      level constraints (See <xref
      linkend="constraintdeclarationvalidationprocess-requirements-property" />).
      The property is uniquely identified by its name as per the JavaBeans
      convention: field level and getter level constraints of the given name
      are all returned.</para>

      <para><methodname>getConstrainedProperties</methodname> returns the
      <classname>PropertyDescriptor</classname>s of the bean properties having
      at least one constraint or being cascaded (<classname>@Valid</classname>
      annotation).</para>
    </section>

    <section>
      <title>PropertyDescriptor</title>

      <para>The <classname>PropertyDescriptor</classname> interface describes
      a constrained property of a Java Bean.</para>

      <para><classname>PropertyDescriptor</classname> lives in the
      <classname>javax.validation.metadata</classname> package.</para>

      <para>This interface is returned by
      <methodname>BeanDescriptor.getConstraintsForProperty(String)</methodname>.
      Constraints declared on the attribute and the getter of the same name
      according to the Java Bean rules are returned by this descriptor.</para>

      <programlisting>package javax.validation.metadata;

/**
 * Describes a Java Bean property hosting validation constraints.
 *
 * Constraints placed on the attribute and the getter of a given property
 * are all referenced.
 *
 * @author Emmanuel Bernard
 */
public interface PropertyDescriptor extends ElementDescriptor {
    /**
     * Is the property marked by the &lt;code&gt;@Valid&lt;/code&gt; annotation.
     * @return &lt;code&gt;true&lt;/code&gt; if the annotation is present, &lt;code&gt;false&lt;/code&gt; otherwise.
     */
    boolean isCascaded();

    /**
     * Name of the property acording to the Java Bean specification.
     * @return property name.
     */
    String getPropertyName();
}</programlisting>

      <para>The <methodname>isCascaded</methodname> method returns
      <literal>true</literal> if the property is marked with
      <classname>@Valid</classname>.</para>

      <para><methodname>getPropertyName</methodname> returns the property name
      as described in <xref
      linkend="validationapi-constraintviolation" />.</para>
    </section>

    <section id="constraintmetadata-constraintdescriptor">
      <title>ConstraintDescriptor</title>

      <para>A <classname>ConstraintDescriptor</classname> object describes a
      given constraint declaration (i.e. a constraint annotation).</para>

      <para><classname>ConstraintDescriptor</classname> lives in the
      <classname>javax.validation.metadata</classname> package.</para>

      <programlisting>package javax.validation.metadata;

/**
 * Describes a single constraint and its composing constraints.
 * &lt;code&gt;T&lt;/code&gt; is the constraint's annotation type.
 *
 * @author Emmanuel Bernard
 * @author Hardy Ferentschik
 */
public interface ConstraintDescriptor&lt;T extends Annotation&gt; {
    /**
     * Returns the annotation describing the constraint declaration.
     * If a composing constraint, attribute values are reflecting
     * the overridden attributes of the composing constraint
     *
     * @return The annotation for this constraint.
     */
    T getAnnotation();

    /**
     * The set of groups the constraint is applied on.
     * If the constraint declares no group, a set with only the &lt;code&gt;Default&lt;/code&gt;
     * group is returned.
     *
     * @return The groups the constraint is applied on.
     */
    Set&lt;Class&lt;?&gt;&gt; getGroups();

    /**
     * The set of payload the constraint hosts.
     *
     * @return payload classes hosted on the constraint or an empty set if none.
     */
    Set&lt;Class&lt;? extends Payload&gt;&gt; getPayload();

    /**
     * List of the constraint validation implementation classes.
     *
     * @return list of the constraint validation implementation classes.
     */
    List&lt;Class&lt;? extends ConstraintValidator&lt;T, ?&gt;&gt;&gt;
    getConstraintValidatorClasses();

    /**
     * Returns a map containing the annotation attribute names as keys and the
     * annotation attribute values as value.
     * If this constraint is used as part of a composed constraint, attribute
     * values are reflecting the overridden attribute of the composing constraint.
     *
     * @return a map containing the annotation attribute names as keys
     *         and the annotation attribute values as value.
     */
    Map&lt;String, Object&gt; getAttributes();

    /**
     * Return a set of composing &lt;code&gt;ConstraintDescriptor&lt;/code&gt;s where each
     * descriptor describes a composing constraint. &lt;code&gt;ConstraintDescriptor&lt;/code&gt;
     * instances of composing constraints reflect overridden attribute values in
     * {@link #getAttributes()}  and {@link #getAnnotation()}.
     *
     * @return a set of &lt;code&gt;ConstraintDescriptor&lt;code&gt; objects or an empty set
     *         in case there are no composing constraints.
     */
    Set&lt;ConstraintDescriptor&lt;?&gt;&gt; getComposingConstraints();

    /**
     * @return true if the constraint is annotated with &lt;code&gt;@ReportAsSingleViolation&lt;/code&gt;
     */
    boolean isReportAsSingleViolation();
}</programlisting>

      <para><methodname>getAnnotation</methodname> returns the annotation
      instance (or an annotation instance representing the given constraint
      declaration). If <classname>ConstraintDescriptor</classname> represents
      a composing annotation (see <xref
      linkend="constraintsdefinitionimplementation-constraintcomposition" />),
      the returned annotation must reflect parameter overriding. In other
      words, the annotation parameter values are the overridden values.</para>

      <para><methodname>getAttributes</methodname> returns a map containing
      the annotation attribute names as a key, and the annotation attribute
      values as a value (this API is anticipated to be simpler to use by tools
      than reflection over the annotation instance). If
      <classname>ConstraintDescriptor</classname> represents a composing
      annotation (see <xref
      linkend="constraintsdefinitionimplementation-constraintcomposition" />),
      the returned <classname>Map</classname> must reflect attribute
      overriding.</para>

      <para><methodname>getGroups</methodname> returns the groups the
      constraint is supposed to be applied upon. If no group is set on the
      constraint declaration, the <classname>Default</classname> group is
      returned. The groups of a composing constraint are the groups of the
      composed constraint.</para>

      <para><literal>getPayload</literal> returns the payloads associated to
      the constraint or an empty set if none.</para>

      <para><methodname>getConstraintValidatorClasses</methodname> returns the
      <classname>ConstraintValidator</classname> classes associated with the
      constraint.</para>
    </section>

    <section>
      <title>Example</title>

      <para>Assuming the following <classname>@NotEmpty</classname>
      definition</para>

      <programlisting>package com.acme.constraint;

@Documented
@NotNull
@Size(min=1)
@ReportAsSingleViolation
@Constraint(validatedBy = NotEmpty.NotEmptyValidator.class)
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
public @interface NotEmpty {
    String message() default "{com.acme.constraint.NotEmpty.message}"
    Class&lt;?&gt; groups() default {};

    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        NotEmpty[] value();
    }

    class NotEmptyValidator implements ConstraintValidator&lt;NotEmpty, String&gt; {
        public void initialize(NotEmpty constraintAnnotation) {}

        public boolean isValid(String value, ConstraintValidatorContext context) {
            return true;
        }
    }
}</programlisting>

      <para>and the following class definitions</para>

      <programlisting>public class Author {
    private String firstName;
    
    @NotEmpty(message="lastname must not be null")
    private String lastName;

    @Size(max=30)
    private String company;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        this.company = company;
    }
}

public class Book {
    private String title;
    private String description;

    @Valid
    @NotNull
    private Author author;

    @NotEmpty(groups={FirstLevelCheck.class, Default.class})
    @Size(max=30)
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Author getAuthor() {
        return author;
    }

    public void setAuthor(Author author) {
        this.author = author;
    }

    public String getDescription() {
        return description;
    }

    public void setAuthor(String description) {
        this.description = description;
    }
}</programlisting>

      <para>The following assertions are true.</para>

      <programlisting>BeanDescriptor bookDescriptor = validator.getConstraintsForClass(Book.class);

assert ! bookDescriptor.hasConstraints();

assert bookDescriptor.isBeanConstrained();

assert bookDescriptor.getConstraintDescriptors().size() == 0 //no bean-level constraint

//more specifically "author" and "title"
assert bookDescriptor.getConstrainedProperties().size() == 2;

//not a property
assert bookDescriptor.getConstraintsForProperty("doesNotExist") == null; 

//property with no constraint
assert bookDescriptor.getConstraintsForProperty("description") == null; 

ElementDescriptor propertyDescriptor = bookDescriptor.getConstraintsForProperty("title");
assert propertyDescriptor.getConstraintDescriptors().size() == 2
assert "title".equals( propertyDescriptor.getPropertyName() );

//assuming the implementation returns the @NotEmpty constraint first
ConstraintDescriptor&lt;?&gt; constraintDescriptor = propertyDescriptor.getConstraintDescriptors()
                                                              .iterator().next();
assert constraintDescriptor.getAnnotation().getAnnotationType().equals( NotEmpty.class );
assert constraintDescriptor.getGroups().size() == 2; //FirstLevelCheck and Default
assert constraintDescriptor.getComposingConstraints().size() == 2;
assert constraintDescriptor.isReportAsSingleViolation() == true

//@NotEmpty cannot be null
boolean notNullPresence = false;
for ( ConstraintDescriptor&lt;?&gt; composingDescriptor : constraintDescriptor.getComposingConstraints() ) {
    if ( composingDescriptor.getAnnotation().getAnnotationType().equals( NotNull.class ) ) {
        notNullPresence = true;
    }
}
assert notNullPresence; 

//assuming the implementation returns the Size constraint second
constraintDescriptor = propertyDescriptor.getConstraintDescriptors().iterator().next().next();
assert constraintDescriptor.getAnnotation().getAnnotationType().equals( Size.class );
assert constraintDescriptor.getAttributes().get("max") == 30; 
assert constraintDescriptor.getGroups().size() == 1;

propertyDescriptor = bookDescriptor.getConstraintsForProperty("author");
assert propertyDescriptor.getConstraintDescriptors().size() == 1
assert propertyDescriptor.isCascaded()</programlisting>
    </section>
  </chapter>

  <chapter>
    <title>Built-in Constraint definitions</title>

    <para>The specification defines a small set of built-in constraints. Their
    usage is encouraged both in regular constraint declarations and as
    composing constraints. Using this set of constraints will enhance
    portability of your constraints across constraint-consuming frameworks
    relying on the metadata API (such as client side validation frameworks or
    database schema generation frameworks).</para>

    <para>Built-in annotations are annotated with an empty
    <classname>@Constraint</classname> annotation to avoid any dependency
    between the specification API and a specific implementation. Each Bean
    Validation provider must recognize built-in constraint annotations as
    valid constraint definitions and provide compliant constraint
    implementations for each. The built-in constraint validation
    implementation is having a lower priority than an XML mapping definition.
    In other words <classname>ConstraintValidator</classname> implementations
    for built-in constraints can be overridden by using the XML mapping (see
    <xref linkend="xml-mapping-constraintdefinition" />).</para>

    <para>All built-in constraints are in the
    <classname>javax.validation.constraints</classname> package. Here is the
    list of constraints and their declaration.</para>

    <example>
      <title>@Null constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be &lt;code&gt;null&lt;/code&gt;.
 * Accepts any type.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Null {
    String message() default "{javax.validation.constraints.Null.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@Null&lt;/code&gt; annotations on the same element
     * @see javax.validation.constraints.Null
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Null[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@NotNull constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must not be &lt;code&gt;null&lt;/code&gt;.
 * Accepts any type.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface NotNull {
    String message() default "{javax.validation.constraints.NotNull.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@NotNull&lt;/code&gt; annotations on the same element
     * @see javax.validation.constraints.NotNull
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        NotNull[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@AssertTrue constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be true.
 * Supported types are &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;Boolean&lt;/code&gt;
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface AssertTrue {
    String message() default "{javax.validation.constraints.AssertTrue.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@AssertTrue&lt;/code&gt; annotations on the same element
     * @see AssertTrue
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        AssertTrue[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@AssertFalse constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be false.
 * Supported types are &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;Boolean&lt;/code&gt;
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface AssertFalse {
    String message() default "{javax.validation.constraints.AssertFalse.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@AssertFalse&lt;/code&gt; annotations on the same element
     * @see javax.validation.constraints.AssertFalse
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        AssertFalse[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Min constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a number whose value must be higher or
 * equal to the specified minimum.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;,
 * and their respective wrappers&lt;/li&gt;
 * &lt;/ul&gt;
 * Note that &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; are not supported due to rounding errors
 * (some providers might provide some approximative support)
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Min {
    String message() default "{javax.validation.constraints.Min.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * @return value the element must be higher or equal to
     */
    long value();

    /**
     * Defines several &lt;code&gt;@Min&lt;/code&gt; annotations on the same element
     * @see Min
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Min[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Max constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a number whose value must be lower or
 * equal to the specified maximum.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, 
 * and their respective wrappers&lt;/li&gt;
 * &lt;/ul&gt;
 * Note that &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; are not supported due to rounding errors
 * (some providers might provide some approximative support)
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Max {
    String message() default "{javax.validation.constraints.Max.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * @return value the element must be lower or equal to
     */
    long value();

    /**
     * Defines several &lt;code&gt;@Max&lt;/code&gt; annotations on the same element
     * @see Max
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Max[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@DecimalMin constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a number whose value must be higher or
 * equal to the specificed minimum.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;,
 * and their respective wrappers&lt;/li&gt;
 * &lt;/ul&gt;
 * Note that &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; are not supported due to rounding errors
 * (some providers might provide some approximative support)
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface DecimalMin {
    String message() default "{javax.validation.constraints.DecimalMin.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * The &lt;code&gt;String&lt;/code&gt; representation of the min value according to the
     * &lt;code&gt;BigDecimal&lt;/code&gt; string representation
     * @return value the element must be higher or equal to
     */
    String value();

    /**
     * Defines several &lt;code&gt;@DecimalMin&lt;/code&gt; annotations on the same element
     * @see DecimalMin
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        DecimalMin[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@DecimalMax constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a number whose value must be lower or
 * equal to the specified maximum.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;,
 * and their respective wrappers&lt;/li&gt;
 * &lt;/ul&gt;
 * Note that &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; are not supported due to rounding errors
 * (some providers might provide some approximative support)
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = { })
public @interface DecimalMax {
    String message() default "{javax.validation.constraints.DecimalMax.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * The &lt;code&gt;String&lt;/code&gt; representation of the max value according to the
     * &lt;code&gt;BigDecimal&lt;/code&gt; string representation
     *
     * @return value the element must be lower or equal to
     */
    String value();

    /**
     * Defines several &lt;code&gt;@DecimalMax&lt;/code&gt; annotations on the same element
     *
     * @author Emmanuel Bernard
     * @see DecimalMax
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
            @interface List {
        DecimalMax[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Size constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element size must be between the specified boundaries (included).
 *
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;String&lt;/code&gt; (string length is evaludated)&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;Collection&lt;/code&gt; (collection size is evaluated)&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;Map&lt;/code&gt; (map size is evaluated)&lt;/li&gt;
 * &lt;li&gt;Array (array length is evaluated)&lt;/li&gt;
 *
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Size {
    String message() default "{javax.validation.constraints.Size.message}";
    
    Class&lt;?&gt;[] groups() default {};

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * @return size the element must be higher or equal to
     */
    int min() default 0;

    /**
     * @return size the element must be lower or equal to
     */
    int max() default Integer.MAX_VALUE;

    /**
     * Defines several &lt;code&gt;@Size&lt;/code&gt; annotations on the same element
     * @see Size
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Size[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Digits constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a number within accepted range
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;,
 * and their respective wrapper types&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Digits {
    String message() default "{javax.validation.constraints.Digits.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * @return maximum number of integral digits accepted for this number.
     */
    int integer();

    /**
     * @return maximum number of fractional digits accepted for this number.
     */
    int fraction();

    /**
     * Defines several &lt;code&gt;@Digits&lt;/code&gt; annotations on the same element
     * @see Digits
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Digits[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Past constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a date in the past.
 * Now is defined as the current time according to the virtual machine
 * The calendar used if the compared type is of type &lt;code&gt;Calendar&lt;/code&gt;
 * is the calendar based on the current timezone and the current locale.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;java.util.Date&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;java.util.Calendar&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Past {
    String message() default "{javax.validation.constraints.Past.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@Past&lt;/code&gt; annotations on the same element
     * @see Past
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Past[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Future constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a date in the future.
 * Now is defined as the current time according to the virtual machine
 * The calendar used if the compared type is of type &lt;code&gt;Calendar&lt;/code&gt;
 * is the calendar based on the current timezone and the current locale.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;java.util.Date&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;java.util.Calendar&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Future {
    String message() default "{javax.validation.constraints.Future.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@Future&lt;/code&gt; annotations on the same element
     * @see Future
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Future[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Pattern constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated String must match the following regular expression.
 * The regular expression follows the Java regular expression conventions
 * see {@link java.util.regex.Pattern}.
 *
 * Accepts String. &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Pattern {
    /**
     * @return The regular expression to match.
     */
    String regexp();

    /**
     * @return Array of &lt;code&gt;Flag&lt;/code&gt;s considered when resolving the regular expression.
     */
    Flag[] flags() default {};

    /**
     * @return The error message template.
     */
    String message() default "{javax.validation.constraints.Pattern.message}";

    /**
     * @return The groups the constraint belongs to.
     */
    Class&lt;?&gt;[] groups() default { };

    /**
     * @return The payload associated to the constraint
     */
    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Possible Regexp flags
     */
    public static enum Flag {

        /**
         * Enables Unix lines mode
         * @see java.util.regex.Pattern#UNIX_LINES
         */
        UNIX_LINES(java.util.regex.Pattern.UNIX_LINES),

        /** 
         * Enables case-insensitive matching
         * @see java.util.regex.Pattern#CASE_INSENSITIVE
         */
        CASE_INSENSITIVE(java.util.regex.Pattern.CASE_INSENSITIVE),

        /**
         * Permits whitespace and comments in pattern
         * @see java.util.regex.Pattern#COMMENTS
         */
        COMMENTS(java.util.regex.Pattern.COMMENTS),

        /**
         * Enables multiline mode
         * @see java.util.regex.Pattern#MULTILINE
         */
        MULTILINE(java.util.regex.Pattern.MULTILINE),

        /**
         * Enables dotall mode
         * @see java.util.regex.Pattern#DOTALL
         */
        DOTALL(java.util.regex.Pattern.DOTALL),

        /**
         * Enables Unicode-aware case folding
         * @see java.util.regex.Pattern#UNICODE_CASE
         */
        UNICODE_CASE(java.util.regex.Pattern.UNICODE_CASE),

        /**
         * Enables canonical equivalence
         * @see java.util.regex.Pattern#CANON_EQ
         */
        CANON_EQ(java.util.regex.Pattern.CANON_EQ);

        //JDK flag value
        private final int value;

        private Flag(int value) {
            this.value = value;
        }

        /**
         * @return flag value as defined in {@link java.util.regex.Pattern}
         */
        public int getValue() {
            return value;
        }
    }

    /**
     * Defines several &lt;code&gt;@Pattern&lt;/code&gt; annotations on the same element
     * @see Pattern
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Pattern[] value();
    }
}</programlisting>
    </example>
  </chapter>

  <chapter id="xml">
    <title>XML deployment descriptor</title>

    <para>Two kind of XML descriptors are used by Bean Validation. The first
    one describes the Bean Validation configuration provided as
    <filename>META-INF/validation.xml</filename>. The second one describes
    constraints declarations and closely matches the annotations declaration
    approach.</para>

    <section id="xml-mapping">
      <title>Constraint definition and declaration</title>

      <para>Bean Validation lets you declare constraints via XML rather than
      annotations. You can either ignore constraints declared via annotations
      or consider XML as adding additional constraints on top of annotation
      constraints. While it is not possible to define a new constraint via
      XML, you can redefine the list of
      <classname>ConstraintValidator</classname> classes associated to a given
      constraint definition.</para>

      <para>There is no distinction between an annotation based constraint
      declaration and an XML based constraint declaration: they are considered
      equivalent and should be treated as such by the Bean Validation
      provider. The rest of the specification only refers to annotations as
      validation metadata: it should be read as annotation or their XML
      descriptor equivalent.</para>

      <para>Specifically when exploring metadata, the Bean Validation provider
      must ensure that an annotation instance corresponding to the XML
      declaration is provided via
      <classname>ConstraintDescriptor.getAnnnotation()</classname>. The
      annotation elements as well as
      <methodname>ConstraintValidator.getAttributes()</methodname> must
      reflect the values described in the XML declaration (see <xref
      linkend="xml-mapping-typeconversion" />). Likewise,
      <methodname>ConstraintDescriptor.getConstraintValidatorClasses()</methodname>
      must reflect XML based constraint definition overriding (see <xref
      linkend="xml-mapping-constraintdefinition" />).</para>

      <para>A given class must not be described more than once amongst all the
      XML mapping descriptors. A given field or getter must not be described
      more than once on a given class description. A given constraint
      definition must not be overridden more than once amongst all the XML
      mapping descriptors. If any of these rule is violated in a given
      validation deployment, a <classname>ValidationException</classname> is
      raised during the creation of the
      <classname>ValidatorFactory</classname>.</para>

      <para>The schema is provided in <xref
      linkend="xml-mapping-xsd" />.</para>

      <section>
        <title>Constraint declaration in XML</title>

        <para>If <literal>default-package</literal> is set, all unqualified
        class names (including annotations) are considered part of the package
        described by <literal>default-package</literal>.</para>

        <para>A given JavaBean is described by the <classname>bean</classname>
        element. The name of the class is mandatory. By default, all
        constraint declarations expressed via annotation are ignored for
        classes described in XML. You can force Bean Validation to consider
        both annotations and XML constraint declarations by using
        <code>ignore-annotation="false"</code> on
        <literal>bean</literal>.</para>

        <note>
          <para>The <literal>ignore-annotation</literal> setting is not
          inherited from nor by the class hierarchy. In other words, it only
          applies to the current bean only.</para>
        </note>

        <para>If the name of the class does refer to a class not present in in
        the classpath, a <classname>ValidationException</classname> is
        raised.</para>

        <example>
          <title>Example of bean XML declaration</title>

          <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;

    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;

    &lt;bean class="Customer" ignore-annotations="false"&gt;
        [...]
    &lt;/bean&gt;
    &lt;bean class="com.acme.common.model.Address"&gt;
        [...]
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>

        <section>
          <title>Class-level overriding</title>

          <para>Class level annotations are described via the
          <literal>class</literal> element. If
          <literal>ignore-annotations</literal> is declared, Bean Validation
          must honor the explicit value for this element. If not declared, the
          default value defined in the encapsulating
          <classname>bean</classname> element is considered.</para>

          <para>When <literal>ignore-annotations</literal> is true,
          class-level Bean Validation annotations are ignored for this class
          (including the <classname>@GroupSequence</classname>). When
          <literal>ignore-annotations</literal> is false:</para>

          <itemizedlist>
            <listitem>
              <para>Constraints declared in XML and constraints declared in
              annotations are added and form the list of class-level declared
              constraints.</para>
            </listitem>

            <listitem>
              <para><classname>@GroupSequence</classname> is considered unless
              <literal>group-sequence</literal> element is explicitly
              used.</para>
            </listitem>
          </itemizedlist>

          <example>
            <title>Example of class-level declaration</title>

            <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;class ignore-annotations="true"&gt;
            [...]
        &lt;/class&gt;
    &lt;/bean&gt;
    &lt;bean class="com.acme.common.model.Address"&gt;
        &lt;class&gt;
            [...]
        &lt;/class&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
          </example>
        </section>

        <section>
          <title>Field-level overriding</title>

          <para>Field level annotations are described via the
          <literal>field</literal> element. The <literal>name</literal>
          attribute correspond to the name of the field considered. If
          <literal>ignore-annotations</literal> is declared, Bean Validation
          must honor the explicit value for this element. If not declared, the
          default value defined in the encapsulating
          <classname>bean</classname> element is considered.</para>

          <para>When <literal>ignore-annotations</literal> is true,
          field-level Bean Validation annotations on the targeted field are
          ignored (including the <classname>@Valid</classname>). When
          <literal>ignore-annotations</literal> is false:</para>

          <itemizedlist>
            <listitem>
              <para>Constraints declared in XML and constraints declared in
              annotations are added and form the list of field-level declared
              constraints.</para>
            </listitem>

            <listitem>
              <para><classname>@Valid</classname> is considered unless the
              <literal>valid</literal> element is explicitly used. Note that
              the only way to disable cascading on a field marked as
              <classname>@Valid</classname> is to use
              <code>ignore-annotations=true</code>.</para>
            </listitem>
          </itemizedlist>

          <para>If the name of the field does not correspond to a field in the
          given bean a <classname>ValidationException</classname> is
          raised.</para>

          <example>
            <title>Field-level declaration</title>

            <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;field name="firstName"&gt;
            [...]
        &lt;/field&gt;
        &lt;field name="orders"&gt;
            &lt;valid/&gt;
            [...]
        &lt;/field&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
          </example>
        </section>

        <section>
          <title>Property-level overriding</title>

          <para>Property-level annotations are described via the
          <literal>getter</literal> element. The <literal>name</literal>
          attribute correspond to the name of the property considered as
          defined in <xref
          linkend="constraintdeclarationvalidationprocess-requirements-property" />
          (for example a getter <code>String getAge()</code> would have
          <code>&lt;getter name="age"/&gt;</code> as a corresponding
          descriptor). If <literal>ignore-annotations</literal> is declared,
          Bean Validation must honor the explicit value for this element. If
          not declared, the default value defined in the encapsulating
          <classname>bean</classname> element is considered.</para>

          <para>When <literal>ignore-annotations</literal> is true,
          property-level Bean Validation annotations on the targeted property
          are ignored (including the <classname>@Valid</classname>). When
          <literal>ignore-annotations</literal> is false:</para>

          <itemizedlist>
            <listitem>
              <para>Constraints declared in XML and constraints declared in
              annotations are added and form the list of property-level
              declared constraints.</para>
            </listitem>

            <listitem>
              <para><classname>@Valid</classname> is considered unless the
              <literal>valid</literal> element is explicitly used. Note that
              the only way to disable cascading on a property marked as
              <classname>@Valid</classname> is to use
              <code>ignore-annotations=true</code>.</para>
            </listitem>
          </itemizedlist>

          <para>If the name of the property does not correspond to a property
          in the given bean a <classname>ValidationException</classname> is
          raised.</para>

          <example>
            <title>Property-level declaration</title>

            <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;getter name="firstName"&gt;
            [...]
        &lt;/getter&gt;
        &lt;getter name="orders"&gt;
            &lt;valid/&gt;
            [...]
        &lt;/getter&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
          </example>
        </section>

        <section>
          <title>Constraint declaration</title>

          <para>A new constraint declaration is represented by the
          <literal>constraint</literal> element. The
          <literal>annotation</literal> attribute is the class name of the
          annotation representing the constraint. Message and groups are
          defined respectively by the <literal>message</literal> and
          <literal>groups</literal> elements.</para>

          <para>Other custom elements of an annotation are represented by
          <literal>element</literal>. The <literal>name</literal> attribute is
          mandatory and represents the name of the element in the constraint
          declaration. <quote>message</quote>, <quote>groups</quote> and
          <quote>payload</quote> are not permitted names, use the
          <literal>message</literal>, <literal>groups</literal> or
          <literal>payload</literal> elements instead. Otherwise a
          <classname>ValidationException</classname> is raised.</para>

          <para>If the element represents a primitive type, a class or an
          enum, the string representation of its value is placed in the
          element itself. See <xref linkend="xml-mapping-typeconversion" />
          for a detailed explanation of the conversion rules from string to
          the type.</para>

          <para>If the element represents a primitive type array, a class
          array or an enum array, the string representation of each value is
          placed in a <literal>value</literal> element placed under the
          element itself.</para>

          <para>If the element represents an annotation, the
          <literal>annotation</literal> element is used to represent the
          annotation and placed under <literal>element</literal>. An
          <literal>annotation</literal> element contains
          <literal>element</literal> elements.</para>

          <para>If the element represents an array of annotations, one or more
          <literal>annotation</literal> elements are placed under
          <literal>element</literal>.</para>

          <para>Elements with default values in the annotation definition do
          not have to be represented in XML: the default value will be used in
          this case. If an XML constraint declaration is missing mandatory
          elements, or if it contains elements not part of the constraint
          definition, a <classname>ValidationException</classname> is
          raised.</para>

          <example>
            <title>Constraint declaration</title>

            <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;

        &lt;field name="firstName"&gt;


            &lt;!-- @LooksLike(patterns={
                      @Pattern(value="myRegExp", flag=PatternFlag.INSENSITIVE),
                      @Pattern(value="my2ndRegExp")}
                  )
             --&gt;
            &lt;constraint annotation="com.acme.app.constraint.LooksLike"&gt;
                &lt;element name="patterns"&gt;
                    &lt;annotation&gt;
                        &lt;element name="value"&gt;myRegExp&lt;/element&gt;
                        &lt;element name="flag"&gt;
                            &lt;value&gt;INSENSITIVE&lt;/value&gt;
                        &lt;/element&gt;
                    &lt;/annotation&gt;
                    &lt;annotation&gt;
                        &lt;element name="value"&gt;my2ndRegExp&lt;/element&gt;
                    &lt;/annotation&gt;
                &lt;/element&gt;
            &lt;/constraint&gt;


        &lt;/field&gt;
        &lt;field name="orders"&gt;
            &lt;valid/&gt;


            &lt;!-- @DiscreteSize(value={ 0, 20 } )
             --&gt;
            &lt;constraint annotation="com.acme.app.constraint.DiscreteSize"&gt;
                &lt;element name="value"&gt;
                    &lt;value&gt;0&lt;/value&gt;
                    &lt;value&gt;20&lt;/value&gt;
                &lt;/element&gt;
            &lt;/constraint&gt;


        &lt;/field&gt;

        &lt;getter name="orders"&gt;
            &lt;valid/&gt;


            &lt;!-- @Size(message="Size is limited",
                       groups={Default.class, LightValidation.class},
                       max=30
                 )
            --&gt;
            &lt;constraint annotation="javax.validation.constraint.Size"&gt;
                &lt;message&gt;Size is limited&lt;/message&gt;
                &lt;groups&gt;
                    &lt;value&gt;com.acme.app.model.LightValidation&lt;/value&gt;
                    &lt;value&gt;javax.persistence.Default&lt;/value&gt;
                &lt;/groups&gt;
                &lt;payload&gt;
                    &lt;value&gt;com.acme.app.model.WARN&lt;/value&gt;
                &lt;/payload&gt;
                &lt;element name="max"&gt;30&lt;/element&gt;
            &lt;/constraint&gt;


        &lt;/getter&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
          </example>
        </section>
      </section>

      <section id="xml-mapping-constraintdefinition">
        <title>Overriding constraint definitions in XML</title>

        <para>A constraint definition (ie. the annotation representing a
        constraint), cannot be fully expressed in XML but the list of
        <classname>ConstraintValidator</classname> associated to a given
        constraint can be altered.</para>

        <para>A constraint definition is represented by a
        <literal>constraint-definition</literal> element. The
        <literal>annotation</literal> attribute represents the constraint
        annotation being altered. The <literal>validated-by</literal> elements
        represent the (ordered) list of
        <classname>ConstraintValidator</classname> implementations associated
        to the constraint.</para>

        <para>If <literal>include-existing-validator</literal> is set to
        false, <classname>ConstraintValidator</classname> defined on the
        constraint annotation are ignored. If set to true, the list of
        <classname>ConstraintValidator</classname>s described in XML are
        concatenated to the list of <classname>ConstraintValidator</classname>
        described on the annotation to form a new array of
        <classname>ConstraintValidator</classname> evaluated. Annotation based
        <classname>ConstraintValidator</classname> come before XML based
        <classname>ConstraintValidatot</classname> in the array. The new list
        is returned by
        <methodname>ConstraintDescriptor.getConstraintValidatorClasses()</methodname>.</para>

        <example>
          <title>Overriding constraint definitions</title>

          <programlisting>&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.0.xsd"&gt;
   &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
   &lt;bean class="com.acme.common.model.Address"&gt;
       [...]
    &lt;/bean&gt;

    &lt;constraint-definition annotation="javax.validation.constraint.Size"&gt;
        &lt;validated-by include-existing-validators="true"&gt;
            &lt;value&gt;com.acme.app.constraint.SizeValidatorForDictionary&lt;/value&gt;
        &lt;/validated-by&gt;
    &lt;/constraint-definition&gt;
    &lt;constraint-definition annotation="AcmeOrderNumber"&gt;
        [...]
    &lt;/constraint-definition&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>
      </section>

      <section id="xml-mapping-typeconversion">
        <title>Converting the string representation of a value</title>

        <para>Primitive types, <classname>Class</classname> and
        <classname>Enum</classname> are represented as strings in the XML
        descriptor. Elements of an array are represented by the
        <literal>value</literal> element.</para>

        <para><classname>byte</classname> are represented according to the
        rules defined in
        <methodname>Byte.parseByte(String)</methodname>.</para>

        <para><classname>short</classname> are represented according to the
        rules defined in
        <methodname>Short.parseShort(String)</methodname>.</para>

        <para><classname>int</classname> are represented according to the
        rules defined in
        <methodname>Integer.parseInt(String)</methodname>.</para>

        <para><classname>long</classname> are represented according to the
        rules defined in
        <methodname>Long.parseLong(String)</methodname>.</para>

        <para><classname>float</classname> are represented according to the
        rules defined in
        <methodname>Float.parseFloat(String)</methodname>.</para>

        <para><classname>double</classname> are represented according to the
        rules defined in
        <methodname>Double.parseDouble(String)</methodname>.</para>

        <para><classname>boolean</classname> are represented according to the
        rules defined in
        <methodname>Boolean.parseBoolean(String)</methodname>.</para>

        <para><classname>char</classname> are represented according to the
        following rules:</para>

        <itemizedlist>
          <listitem>
            <para>the string must be of one character long</para>
          </listitem>

          <listitem>
            <para>the character extracted from the string is the returned
            <classname>char</classname></para>
          </listitem>
        </itemizedlist>

        <para>A <classname>Class</classname> is represented by the fully
        qualified class name of the class. Note that if the raw string is
        unqualified, default package is taken into account.</para>

        <para>An enum is represented by its <code>enum.name()</code>
        value.</para>

        <para>If any of the string representation does not match its type
        counterpart, a <classname>ValidationException</classname> is
        raised.</para>
      </section>

      <section id="xml-mapping-xsd">
        <title>XML Schema</title>

        <para>This section contains the XML schema used for constraint
        mapping.</para>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema attributeFormDefault="unqualified"
           elementFormDefault="qualified"
           targetNamespace="http://jboss.org/xml/ns/javax/validation/mapping"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           version="1.0"&gt;
    &lt;xs:element name="constraint-mappings"
                type="map:constraint-mappingsType"
                xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;

    &lt;xs:complexType name="payloadType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="groupsType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="groupSequenceType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="constraint-mappingsType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="default-package" minOccurs="0"/&gt;
            &lt;xs:element type="map:beanType"
                        name="bean"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
            &lt;xs:element type="map:constraint-definitionType"
                        name="constraint-definition"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="validated-byType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:boolean" name="include-existing-validators" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="constraintType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="message" minOccurs="0"/&gt;
            &lt;xs:element type="map:groupsType"
                        name="groups"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
            &lt;xs:element type="map:payloadType"
                        name="payload"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;            
            &lt;xs:element type="map:elementType"
                        name="element"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="annotation" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="elementType" mixed="true"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
            &lt;xs:element type="map:annotationType"
                        name="annotation"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="name" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="classType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:groupSequenceType" 
                        name="group-sequence" 
                        minOccurs="0" 
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="beanType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:classType"
                        name="class"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"&gt;
            &lt;/xs:element&gt;
            &lt;xs:element type="map:fieldType"
                        name="field"
                        minOccurs="0"
                        maxOccurs="unbounded"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
            &lt;xs:element type="map:getterType"
                        name="getter"
                        minOccurs="0"
                        maxOccurs="unbounded"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="class" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="annotationType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:elementType"
                        name="element"
                        maxOccurs="unbounded"
                        minOccurs="0"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="getterType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="valid" minOccurs="0" fixed=""/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        minOccurs="0"
                        maxOccurs="unbounded"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="name" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="constraint-definitionType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:validated-byType"
                        name="validated-by"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="annotation" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="fieldType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="valid" minOccurs="0" fixed=""/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        minOccurs="0"
                        maxOccurs="unbounded"
                        xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="name" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</programlisting>
      </section>
    </section>

    <section id="xml-config-xsd">
      <title>Configuration schema</title>

      <para>XML Configuration is set in
      <filename>META-INF/validation.xml</filename>. The file is optional. The
      XML schema followed by the configuration file is as followed.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema attributeFormDefault="unqualified"
           elementFormDefault="qualified"
           targetNamespace="http://jboss.org/xml/ns/javax/validation/configuration"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           version="1.0"&gt;
    &lt;xs:element name="validation-config" type="config:validation-configType" xmlns:config="http://jboss.org/xml/ns/javax/validation/configuration"/&gt;
    &lt;xs:complexType name="validation-configType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="default-provider" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="message-interpolator" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="traversable-resolver" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="constraint-validator-factory" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="constraint-mapping" maxOccurs="unbounded" minOccurs="0"/&gt;
            &lt;xs:element type="config:propertyType" name="property" maxOccurs="unbounded" minOccurs="0" xmlns:config="http://jboss.org/xml/ns/javax/validation/configuration"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="propertyType"&gt;
        &lt;xs:simpleContent&gt;
            &lt;xs:extension base="xs:string"&gt;
                &lt;xs:attribute name="name" use="required" type="xs:string"/&gt;
            &lt;/xs:extension&gt;
        &lt;/xs:simpleContent&gt;
    &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</programlisting>

      <para>See <xref linkend="xml-config" /> for more information on XML
      based configuration.</para>
    </section>
  </chapter>

  <chapter id="exception">
    <title>Exception model</title>

    <para>Illegal arguments passed to the Bean Validation APIs generally lead
    to a <classname>IllegalArgumentException</classname> (see the JavaDoc for
    specific details). Other exceptions raised by Bean Validation are or
    inherit from the runtime exception
    <classname>javax.validation.ValidationException</classname>. Exception
    cases are described in their respective sections but include (non
    exhaustive list):</para>

    <itemizedlist>
      <listitem>
        <para>invalid constraint definitions (missing mandatory elements,
        illegal composition cycle, illegal attribute overriding, etc)</para>
      </listitem>

      <listitem>
        <para>invalid constraint declarations
        (<classname>ConstraintValidator</classname> implementation matching
        failure, etc)</para>
      </listitem>

      <listitem>
        <para>invalid group definition (circularity)</para>
      </listitem>

      <listitem>
        <para>invalid <classname>Default</classname> group redefinition for
        classes (missing class group etc)</para>
      </listitem>

      <listitem>
        <para>error when retrieving, initializing, executing
        <classname>ConstraintValidator</classname>s</para>
      </listitem>

      <listitem>
        <para>error when parsing the XML configuration or mappings</para>
      </listitem>

      <listitem>
        <para>multiple XML configuration files found</para>
      </listitem>

      <listitem>
        <para>missing expected provider or no default provider found</para>
      </listitem>

      <listitem>
        <para>missing no-arg constructor on extension implementations
        described in XML configuration files</para>
      </listitem>

      <listitem>
        <para>same entity described more than once across the XML mapping
        files</para>
      </listitem>

      <listitem>
        <para>same property or field described more than once for a given
        entity in the XML mapping files</para>
      </listitem>

      <listitem>
        <para>class, field or getter declared in XML mapping files but not
        found</para>
      </listitem>

      <listitem>
        <para>illegal XML constraint definition</para>
      </listitem>

      <listitem>
        <para>illegal XML constraint declaration</para>
      </listitem>

      <listitem>
        <para>exception raised either at initialization time or execution time
        by any of the extension interfaces</para>
      </listitem>
    </itemizedlist>

    <para>Each of these error cases lead to a
    <classname>ValidationException</classname> or a subclass of
    <classname>ValidationException</classname> (see following
    subsections).</para>

    <para>Every (runtime) exception raised either at initialization time or
    execution time by any of the extension interfaces
    (<classname>ConstraintValidator</classname>,
    <classname>ConstraintValidatorFactory</classname>,
    <classname>MessageInterpolator</classname>,
    <classname>TraversableResolver</classname>,
    <classname>ValidationProviderResolver</classname>) is wrapped in a
    <classname>ValidationException</classname>.</para>

    <para>If a constraint definition or constraint declaration is invalid for
    a given class, the metadata API should raise the according
    exception.</para>

    <section>
      <title>Error report:
      <classname>ConstraintViolationException</classname></title>

      <para>Some frameworks or applications need to convey the result of a
      validation by raising an exception if the validation returns constraint
      violations.</para>

      <para>Bean Validation provides a reference exception for such cases.
      Frameworks and applications are encouraged to use
      <classname>ConstraintViolationException</classname> as opposed to a
      custom exception to increase consistency of the Java platform. The
      exception can be raised directly or wrapped into the framework or
      application specific parent exception.</para>

      <programlisting>/**
 * Reports the result of constraint violations
 *                                                    `
 * @author Emmanuel Bernard
 */
public class ConstraintViolationException extends ValidationException {
    private final Set&lt;ConstraintViolation&lt;?&gt;&gt; constraintViolations;

    /**
     * Creates a constraint violation report
     *
     * @param message error message
     * @param constraintViolations &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;ConstraintViolation&lt;/code&gt;
     */
    public ConstraintViolationException(String message,
                                        Set&lt;ConstraintViolation&lt;?&gt;&gt; constraintViolations) {
        super( message );
        this.constraintViolations = constraintViolations;
    }

    /**
     * Creates a constraint violation report
     *
     * @param constraintViolations &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;ConstraintViolation&lt;/code&gt;
     */
    public ConstraintViolationException(Set&lt;ConstraintViolation&lt;?&gt;&gt; constraintViolations) {
        super();
        this.constraintViolations = constraintViolations;
    }

    /**
     * Set of constraint violations reported during a validation
     *
     * @return &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;ConstraintViolation&lt;/code&gt;
     */
    public Set&lt;ConstraintViolation&lt;?&gt;&gt; getConstraintViolations() {
        return constraintViolations;
    }
}</programlisting>

      <para>The <classname>ConstraintViolationException</classname> carries a
      <classname>Set</classname> of
      <classname>ConstraintViolation</classname>.</para>

      <note>
        <para>Bean Validation never raises this exception itself. Other
        frameworks like Java Persistence 2 do.</para>
      </note>

      <note>
        <para>If this exception is meant to be send remotely,
        <classname>ConstraintViolation</classname> objects should be
        <classname>Serializable</classname> as defined in <xref
        linkend="validationapi-constraintviolation" />.</para>
      </note>
    </section>

    <section>
      <title>Constraint definition:
      <classname>ConstraintDefinitionException</classname></title>

      <para>If a constraint definition does not respect the Bean Validation
      rules or is inconsistent, a
      <classname>ConstraintDefinitionException</classname> is raised.
      <classname>ConstraintDefinitionException</classname> is a subclass of
      <classname>ValidationException</classname>.</para>

      <para>This exception can be raised during validation or when the
      metadata model for the class hosting this constraint is
      requested.</para>

      <note>
        <para>These exception cases can be determined at compile time by a
        tool such as an annotation processor.</para>
      </note>
    </section>

    <section>
      <title>Constraint declaration:
      <classname>ConstraintDeclarationException</classname> and
      <classname>UnexpectedTypeException</classname></title>

      <para>When a constraint declaration is illegal,
      <classname>ConstraintDeclarationException</classname> is raised.</para>

      <para><classname>ConstraintDeclarationException</classname> is a
      subclass of <classname>ValidationException</classname>.</para>

      <para>When the return type of a property cannot be processed for a given
      constraint, an <classname>UnexpectedTypeException</classname> is raised.
      This problem typically arise when either no
      <classname>ConstraintValidator</classname> or too many
      <classname>ConstraintValidator</classname>s match the return type (see
      <xref linkend="typevalidatorresolution" />).</para>

      <para><classname>UnexpectedTypeException</classname> is a subclass of
      <classname>ConstraintDeclarationException</classname>.</para>

      <para>This exception can be raised during validation or when the
      metadata model for the class hosting this constraint is
      requested.</para>

      <note>
        <para>These exception cases can be determined at compile time by
        tooling (such as an annotation processor).</para>
      </note>
    </section>

    <section>
      <title>Group definition:
      <classname>GroupDefinitionException</classname></title>

      <para>When a group definition is illegal,
      <classname>GroupDefinitionException</classname> is raised. This
      typically arises when a cyclic group dependency is discovered, an
      illegal attribute overriding is defined etc.</para>

      <para><classname>GroupDefinitionException</classname> is a subclass of
      <classname>ValidationException</classname>.</para>

      <note>
        <para>These exception cases can generally be determined at compile
        time by tooling (such as an annotation processor).</para>
      </note>
    </section>
  </chapter>

  <appendix id="terminology">
    <title>Terminology</title>

    <para>This appendix aims at giving an overview on the different key terms
    used through this specification. They are not to be considered formal
    definitions. Formal definitions are to be inferred from the core
    specification.</para>

    <table>
      <title>terminology</title>

      <tgroup cols="2">
        <colspec align="center" colnum="3" />

        <thead>
          <row>
            <entry>Term</entry>

            <entry colsep="" spanname="">Definition</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Constraint</entry>

            <entry>A restriction on a bean instance, the value of a field or
            the value of a JavaBean property</entry>
          </row>

          <row>
            <entry>Constraint declaration</entry>

            <entry>Assignment of a constraint to a target (bean, field,
            property) for a specific class. Typically by declaring an
            annotation on the target but can also be done through a XML
            deployment descriptor</entry>
          </row>

          <row>
            <entry>Validation routine</entry>

            <entry><para>Sequence of operations executed by the Bean
            Validation provider to validate a given object
            graph</para></entry>
          </row>

          <row>
            <entry>Constraint definition</entry>

            <entry>Defines a type of constraint, its attributes and the actual
            constraint validation implementations. Done through annotations.
            The list of constraint validation implementations can be provided
            via XML</entry>
          </row>

          <row>
            <entry>group</entry>

            <entry>Constraints can belong to one or more group or context.
            Useful to apply a subset of the constraints for a given use case.
            By default, the <literal>Default</literal> group is used.</entry>
          </row>

          <row>
            <entry>group sequence</entry>

            <entry>Define a group ordering in the validation process. If a
            given group in the sequence contains one or more failure, the
            following groups in the sequence must be ignored.</entry>
          </row>

          <row>
            <entry>Constraint validation</entry>

            <entry>Constraint logic algorithm used to determine whether a
            given value passes a constraint or not.</entry>
          </row>

          <row>
            <entry>Constraint validation implementation</entry>

            <entry>Class implementing the constraint logic and used to
            determine whether a given value pass a constraint or not.</entry>
          </row>

          <row>
            <entry>Bean validation provider</entry>

            <entry>Product implementing this specification</entry>
          </row>

          <row>
            <entry>Message interpolator</entry>

            <entry>Algorithm used to build the end user message associated to
            a constraint failure. Typically useful for i18n</entry>
          </row>

          <row>
            <entry>Constraint metadata API</entry>

            <entry>API exposing the constraints applied to a given bean type.
            Also considered one of the integration points with other JSR or
            frameworks.</entry>
          </row>

          <row>
            <entry>Bootstrap API</entry>

            <entry>Bootstrapping part of the Bean Validation API producing a
            <classname>ValidatorFactory</classname>.</entry>
          </row>

          <row>
            <entry>javax.validation.ConstraintValidator</entry>

            <entry>Interface implemented by a constraint validation
            implementation</entry>
          </row>

          <row>
            <entry>Composing constraint</entry>

            <entry>Constraint declared on another constraint definition. When
            the main constraint is validated, the composing constraints are
            validated too.</entry>
          </row>

          <row>
            <entry>javax.validation.Validator</entry>

            <entry>Main API. Holds contracts to validate object graphs</entry>
          </row>

          <row>
            <entry>javax.validation.ConstraintViolation</entry>

            <entry>Interface describing a given constraint failure on a given
            bean</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para></para>
  </appendix>

  <appendix id="standard-resolver-messages">
    <title>Standard ResourceBundle messages</title>

    <para>The properties listed below are resolved by the default message
    interpolator.</para>

    <programlisting>javax.validation.constraints.Null.message=must be null
javax.validation.constraints.NotNull.message=must not be null
javax.validation.constraints.AssertTrue.message=must be true
javax.validation.constraints.AssertFalse.message=must be false
javax.validation.constraints.Min.message=must be greater than or equal to {value}
javax.validation.constraints.Max.message=must be less than or equal to {value}
javax.validation.constraints.Size.message=size must be between {min} and {max}
javax.validation.constraints.Digits.message= \
    numeric value out of bounds (&lt;{integer} digits&gt;.&lt;{fraction} digits&gt; expected)
javax.validation.constraints.Past.message=must be a past date
javax.validation.constraints.Future.message=must be a future date
javax.validation.constraints.Pattern.message=must match the following regular expression: {regexp}</programlisting>
  </appendix>

  <appendix id="appendix-methodlevelvalidation">
    <title>Proposal for method-level validation</title>

    <para>This proposition has not been integrated into the core specification
    and is not part of it. It remains here for archaeological purposes and
    will be seriously considered for a future revision of this
    specification.</para>

    <note>
      <para>Bean Validation providers are free to implement this proposal as a
      specific extension. Such specific extension could for example be
      accessed via the use of the <methodname>Validator.unwrap</methodname>
      method.</para>
    </note>

    <para>A popular demand was to provide a method and parameter level
    validation mechanism reusing the constraint descriptions of the
    specification. This set of APIs is meant to be used by interceptor
    frameworks such as:</para>

    <itemizedlist>
      <listitem>
        <para>application frameworks like JSR-299</para>
      </listitem>

      <listitem>
        <para>component frameworks like Enterprise Java Beans</para>
      </listitem>

      <listitem>
        <para>aspect based frameworks</para>
      </listitem>
    </itemizedlist>

    <para>These frameworks can call the validation APIs to validate either the
    parameter list or the returned value of a method when such method is
    called. More precisely, validation occurs around a method
    invocation.</para>

    <para>This extension of the Bean Validation API allows to reuse the core
    engine as well as the constraint definition and declaration for such
    method level validations.</para>

    <para>The following APIs are added to
    <classname>Validator</classname>.</para>

    <programlisting>public interface Validator {
    // [...]
    
    
    /**
     * Validate each parameter value based on the constraints described on
     * the parameters of &lt;code&gt;method&lt;/code&gt;.
     *
     * @param clazz class hosting the method
     * @param method the method whose parameters are currectly validated
     * @param parameterValues the parameter values passed to the method for invocation
     * @param groups groups targeted for validation
     *
     * @return set of constraint violations
     *
     * @throws IllegalArgumentException if the method does not belong to &lt;code&gt;T&lt;/code&gt;
     *         or if the Object[] does not match the method signature
     */
    &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateParameters(Class&lt;T&gt; clazz, Method method,
                                                       Object[] parameterValues,
                                                       Class&lt;?&gt;... groups);

    /**
     * Validate the parameter value based on the constraints described on
     * the parameterIndex-th parameter of &lt;code&gt;method&lt;/code&gt;.
     *
     * @param clazz class hosting the method
     * @param method the method whose parameters are currectly validated
     * @param parameterValue the parameter value passed to the parameterIndex-t parameter of method
     * @param parameterIndex parameter index of the parameter validated in method
     * @param groups groups targeted for validation
     *
     * @return set of constraint violations
     *
     * @throws IllegalArgumentException if the method does not belong to &lt;code&gt;T&lt;/code&gt;
     *         or if prameterIndex is out of bound
     */
    &lt;T&gt; Set&lt;ConstraintViolation&gt; validateParameter(Class&lt;T&gt; clazz, Method method,
                                                   Object parameterValue,
                                                   int parameterIndex, Class&lt;?&gt;... groups);

    /**
     * Validate each parameter value based on the constraints described on
     * &lt;code&gt;method&lt;/code&gt;.
     *
     * @param clazz class hosting the method
     * @param method the method whose result is validated
     * @param returnedValue the value returned by the method invocation
     * @param groups groups targeted for validation
     *
     * @return set of constraint violations
     *
     * @throws IllegalArgumentException if the method does not belong to &lt;code&gt;T&lt;/code&gt;
     */
    &lt;T&gt; Set&lt;ConstraintViolation&gt; validateReturnedValue(Class&lt;T&gt; clazz, Method method,
                                                       Object returnedValue, Class&lt;?&gt;... groups);

    /**
     * Validate each parameter value based on the constraints described on
     * the parameters of &lt;code&gt;constructor&lt;/code&gt;.
     *
     * @param clazz class hosting the constructor
     * @param constructor the constructor whose parameters are currectly validated
     * @param parameterValues the parameter values passed to the constructor for invocation
     * @param groups groups targeted for validation
     *
     * @return set of constraint violations
     *
     * @throws IllegalArgumentException if the constructor does not belong to &lt;code&gt;T&lt;/code&gt;
     *         or if the Object[] does not match the constructor signature
     */
    &lt;T&gt; Set&lt;ConstraintViolation&gt; validateParameters(Class&lt;T&gt; clazz, Constructor constructor,
                                                    Object[] parameterValues, Class&lt;?&gt;... groups);

    /**
     * Validate the parameter value based on the constraints described on
     * the parameterIndex-th parameter of &lt;code&gt;constructor&lt;/code&gt;.
     *
     * @param clazz class hosting the constructor
     * @param constructor the method whose parameters are currectly validated
     * @param parameterValue the parameter value passed to the
     *                       parameterIndex-th parameter of constructor
     * @param parameterIndex parameter index of the parameter validated in constructor
     * @param groups groups targeted for validation
     *
     * @return set of constraint violations
     *
     * @throws IllegalArgumentException if the constructor does not belong to &lt;code&gt;T&lt;/code&gt;
     *         or if prameterIndex is out of bound
     */
    &lt;T&gt; Set&lt;ConstraintViolation&gt; validateParameter(Class&lt;T&gt; clazz, Constructor constructor,
                                                   Object parameterValue, int parameterIndex,
                                                   Class&lt;?&gt;... groups);</programlisting>

    <para>The constraints declarations evaluated are the constraints hosted on
    the parameters of the method or constructor. If
    <classname>@Valid</classname> is placed on a parameter, constraints
    declared on the object itself are considered.</para>

    <para><methodname>validateReturnedValue</methodname> evaluates the
    constraints hosted on the method itself. If <classname>@Valid</classname>
    is placed on the method, the constraints declared on the object itself are
    considered.</para>

    <programlisting>public @NotNull String saveItem(@Valid @NotNull Item item, @Max(23) BigDecimal price)</programlisting>

    <para>In the previous example,</para>

    <itemizedlist>
      <listitem>
        <para><literal>item</literal> is validated against
        <classname>@NotNull</classname> and all the constraints it
        hosts</para>
      </listitem>

      <listitem>
        <para><literal>price</literal> is validated against
        <classname>@Max(23)</classname></para>
      </listitem>

      <listitem>
        <para>the result of <methodname>saveItem</methodname> is validated
        against <classname>@NotNull</classname></para>
      </listitem>
    </itemizedlist>

    <para>Note that the Bean Validation specification does not trigger the
    validation call. An external framework is responsible for calling one of
    the <methodname>validateParameters</methodname>,
    <methodname>validateParameter</methodname> and
    <methodname>validateReturnedValue</methodname> methods at the appropriate
    time.</para>

    <para>For completeness, Bean Validation exposes metadata for constraints
    hosted on parameters and methods.</para>

    <programlisting>public interface ParameterDescriptor extends ElementDescriptor { 
    boolean isCascaded(); 
    int getIndex(); 
} 

public interface MethodDescriptor extends ElementDescriptor { 
    List&lt;ParameterDescriptor&gt; getParameterDescriptors(); //index aligned 
    boolean isCascaded(); 
} 

public interface ConstructorDescriptor extends ElementDescriptor { 
    List&lt;ParameterDescriptor&gt; getParameterDescriptors(); //index aligned 
} 

public interface BeanDescriptor { 
    MethodDescriptor getConstraintsForMethod(Method); 
    MethodDescriptor getConstraintsForConstructor(Constructor); 
    Set&lt;String&gt; getConstrainedProperties(); 
    Set&lt;Method&gt; getConstrainedMethods(); 
    Set&lt;Constructor&gt; getConstrainedConstructors(); 
} </programlisting>
  </appendix>

  <appendix id="appendix-jpa">
    <title>Java Persistence 2.0 integration</title>

    <para>Integration with Java Persistence is described in the Java
    Persistence 2 specification (JSR-317). Persistence frameworks are
    encouraged to mimic the integration work done with Java
    Persistence.</para>

    <para>While not specified by this specification or the Java Persistence
    2.0 specification, Persistence Providers are encouraged to make use of
    Bean Validation constraint metadata when generating DDL schemas. The
    proposal is as followed.</para>

    <programlisting>Ideas explored and not standardized

Java Persistence consumes Bean Validation (BV) metadata to enhance persistence property 
metadata.

A Persistence provider must use the BV metadata of a given list of groups. 
The default group evaluated is Default (default BV group). Groups evaluated 
can be overridden by a property. 
This property contains the comma separated groups (fully qualified class name).

For each entity, apply the following algorithm. 
For each persistent property in a given entity: 
 - extract the list of BV constraints (including the composing constraints) 
 - determine the subset of applicable constraints 
    (ie constraints understood by the persistence provider)
 - apply these constraints on the persistent property metadata 
 - if the property type is an embeddable object or a collection 
of embeddable objects, apply the algorithm on the embeddable object properties

The list of constraints that must be understood by persistence providers are
as followed:
 - @NotNull should be considered equivalent to @Column(nullable=false) / 
     @JoinColumn(nullable=false)
 - @Size.max should be considered equivalent to @Column.length 
     for String properties 
 - @Digits (which contains integer and fraction) should be considered 
     equivalent to @Column.precision = integer+fraction, 
     @Column.scale = fraction for decimal columns

The BV annotation metadata should have priority over JPA metadata 
(JPA has no sensible "unset" values on their annotations).

Question: should we add @Unique that would map to @Column(unique=true)? 
@Unique cannot be tested at the Java level reliably but could generate
a database unique constraint generation. @Unique is not part 
of the BV spec today.

Persistence Provider should optionally recognize and try to apply the 
following constraints as well:
 - @Min / @Max on numeric columns (TODO String too?)
 - @Future / @Past on temporal columns
 - @Size for collections and array (not sure it is feasible).

Persistence Providers can also apply non standard constraints to their metadata model. 
For example, provider ACME might recognize and understand @com.acme.validation.Email 
and apply it to the database model.

While most high level constraints will not be recognize, the BV built-in constraints 
will be the common language spoken by Persistence Providers. Any high level constraint 
can be composed of more modular constraints (constraint composition).

* additional proposal
In case of a constraint violation report detected and generated by the database 
(not null, etc), the Java persistence provider catches this report and translates 
it into a BV error report. From the perspective of the application, constraint 
errors are viewed through a unified layer. BV must provide some API to create a 
constraint violation error (constraintDescriptor.createConstraintViolation(...)).

While this proposal has a lot of value-add, I wonder how difficult it can be to 
implement this in persistence providers.

Provide a way to disable BV metadata use by a persistence provider (property based).</programlisting>

    <para>This is not an endorsement of the Java Persistence expert group or
    the Bean Validation expert group. Such approach may nor may not be
    standardized in the future. Such integration should not be considered
    portable.</para>
  </appendix>

  <appendix id="appendix-jsf">
    <title>Java Server Faces 2.0 integration</title>

    <para>Integration with Java Server Faces is described in the Java Server
    Faces 2 specification (JSR-314). Presentation frameworks are encouraged to
    study the integration work done with JSF 2.</para>
  </appendix>

  <appendix id="appendix-ee">
    <title>Proposal for Java EE integration</title>

    <para>This proposal is being discussed with the EE expert group. It
    proposes a way to smoothly integrates Bean Validation to the platform.
    This proposition is the result of the work done on JSF and JPA
    integrations.</para>

    <para>Java Persistence and Java Server Faces have deep integration
    proposals with Bean Validation. Java EE Connector Architecture uses Bean
    Validation to validate particular artifacts.</para>

    <para></para>

    <para></para>

    <para>TODO: This section needs update as the Java EE spec has included
    some wording already.</para>

    <para></para>

    <para><classname>Validator</classname> and
    <classname>ValidatorFactory</classname> are very good candidates for
    injectable Java EE resources (<classname>ValidatorFactory</classname> is
    responsible for providing <classname>Validator</classname> instances which
    executes the validation logic). To tie everything together in a unified
    way for the Java EE application developer, some integration at the Java EE
    level would be beneficial.</para>

    <para>A <classname>ValidatorFactory</classname> is built by the EE
    container and exposed to applications as well as services like JPA, JSF
    and Java EE Connectors (this imply a
    <classname>ValidatorFactory</classname> must be built and ready before
    these services). While not required, it is recommended to cache and share
    the same <classname>ValidatorFactory</classname> for a given deployment
    unit. <emphasis>Should we mandate it?</emphasis>.</para>

    <para>The container passes the <classname>ValidatorFactory</classname>
    instance to the JPA provider via the configuration Map of
    <code>PersistenceProvider.createContainerEntityManagerFactory(PersistenceUnitInfo,
    Map)</code>. The property name is
    <literal>javax.persistence.validation.factory</literal>
    (<literal>Persistence.VALIDATOR_FACTORY</literal>).</para>

    <para>The container places the <classname>ValidatorFactory</classname>
    instance under the following JNDI name. JSF 2 implementations are required
    to look in this entry for any <classname>ValidatorFactory</classname> and
    use it.</para>

    <para>In addition, <classname>Validator</classname> and
    <classname>ValidatorFactory</classname> should be considered as Java EE
    resources: injection aware services should allow injection of
    <classname>Validator</classname> instances as well as
    <classname>ValidatorFactory</classname> instances.
    <classname>@Resource</classname> is used for this. If
    <classname>Validator</classname> instances are injected, the default
    validation context is used. In other words,
    <classname>Validator</classname> are provided by
    <code>validatorFactory.getValidator()</code>. The factory is available for
    the lifetime of the deployment.</para>
  </appendix>

  <appendix id="changelog">
    <title>Changelog</title>

    <programlisting>1.0.0 final (2009-10-05)
------------------------

** Bug
    * [BVAL-181] - Fix some namespace issues in validation-configuration-1.0.xsd


** Improvement
    * [BVAL-182] - Add getDefaultTraversableResolver and getDefaultConstraintValidatorFactory to Configuration
    * [BVAL-183] - Add getTraversableResolver and getConstraintValidatorFactory to ValidatorFactory
    * [BVAL-184] - Replace Red Hat Middleware LLC to Red Hat, Inc. and/or its affiliates
    * [BVAL-186] - Clarify method names on the constraint violation builder DSL of ConstraintValidatorContext
    * [BVAL-187] - Imply that ConstraintViolation is serializable if entities are serializable

** New Feature
    * [BVAL-185] - Allow overriding of ConstraintValidatorFactory when creating a Validator
    * [BVAL-190] - Add methods to filter ConstraintDescriptor per groups, target and scope


** Task
    * [BVAL-132] - Define behaviour for BeanDescriptor.getConstraintsForProperty(null)



1.0.CR5 (2009-08-27)
--------------------

** Bug
    * [BVAL-173] - Fix typo getUnorderdConstraintDescriptorsMatchingGroups =&gt; getUnorderedConstraintDescriptorsMatchingGroups
    * [BVAL-177] - Payload of composed constraints are ignored, the main constraint payload is propagated
    * [BVAL-178] - Add payload to the XML schema
    * [BVAL-180] - ConstraintDescriptor.getPayload() should return Set&lt;Class&lt;? extends Payload&gt;&gt; not Set&lt;Class&lt;Payload&gt;&gt;


** Improvement
    * [BVAL-174] - clearer default message for assertTrue and assertFalse
    * [BVAL-179] - Rename ConstraintPayload to Payload



1.0.CR4 Unpublished release
---------------------------



1.0.CR3 Proposed Final Draft 2 (2009-07-08)
-------------------------------------------

** Bug
    * [BVAL-144] - validation-configuration.xsd property element does not extend basic string type preventing Oxygen to be happy
    * [BVAL-159] - Fix example 3.8 on object graph validation 


** Improvement
    * [BVAL-143] - Describe path with an object model
    * [BVAL-147] - Support for unbounded wildcards in ConstraintValidator
    * [BVAL-148] - Built-in constraints annotations now annotated with @Constraint(validatedBy={})
    * [BVAL-151] - TraversableResolver#isTraversable can receive null traversableObject when valudateValue is called
    * [BVAL-152] - TraversableResolver should differentiate reachability and cascadability
    * [BVAL-153] - Generify ConstraintValidatorException
    * [BVAL-154] - Iterable is a superclass of all collection, clarify it's interaction with @Valid
    * [BVAL-155] - ignore-annotation is not inherited hierarchically: make that explicit
    * [BVAL-156] - Pattern.Flag takes the JDK flag int at construction time
    * [BVAL-157] - Add [] to non-indexed iterable path 
    * [BVAL-158] - Clarify that @Valid is orthogonal to the idea of group
    * [BVAL-160] - rename message template key as [f.q.c.n of the constraint].message
    * [BVAL-162] - Move metadata classes to the metadata package (BeanDescriptor, ElementDescriptor, PropertyDescriptor, ConstraintDescriptor)
    * [BVAL-164] - Validation.byProvider now accept the provider implementation class
    * [BVAL-166] - IllegalArgumentException raised on BeanDescriptor.getConstraintsForProperty and Validator.getConstraintsForClass
    * [BVAL-167] - Recommend f.q.c.n.message for resource bundle keys and migrate examples
    * [BVAL-169] - Rename ElementDescriptor.getType to getElementClass
    * [BVAL-170] - Let built-in annotations to support ElementType.PARAMETER and ElementType.CONSTRUCTOR

** New Feature
    * [BVAL-149] - Provide access to the ValidationProviderResolver via BootstrapState
    * [BVAL-150] - Add ConstraintViolation.getRootBeanClass
    * [BVAL-161] - Add unwrap methods to ValidatorFactory and Validator
    * [BVAL-163] - Add support for constraint payload
    * [BVAL-168] - Return the list of matching ConstraintDescriptor for a given set of groups
    * [BVAL-172] - Provide ConstraintDescriptor#getPayload



1.0.CR2 Unpublished release
---------------------------



1.0.CR1 Proposed Final Draft (2009-03-16)
-----------------------------------------


** Bug
    * [BVAL-118] - ConstraintDescriptor.getGroups() returns Default if no group is declared on the constraint
    * [BVAL-125] - @Size.min default value should be 0


** Improvement
    * [BVAL-32] - Describe what is happening when a composition is not consistent
    * [BVAL-50] - Be consistent in the spec, use @author or not
    * [BVAL-54] - Specify that constraints on non getter methods are ignored (if BVAL-36 is not accepted)
    * [BVAL-72] - Validating an object multiple times if in a different branch of the graph
    * [BVAL-86] - Default TraversableResolver is JPA aware
    * [BVAL-88] - Improvement on MessageInterpolator
    * [BVAL-91] - Rename Constraint related classes to improve readability
    * [BVAL-95] - @Size should support Map
    * [BVAL-96] - Support byte in @Min/@Max
    * [BVAL-106] - Constraintdescriptor.getConstraintValidatorClasses() should return a List, not an array
    * [BVAL-114] - Relax property names in ConstraintValidatorContext
    * [BVAL-120] - Rename ConstraintViolation getRawMessage=&gt;getMessageTemplate, getInterpolatedMessage=&gt;getMessage
    * [BVAL-122] - Rename @GroupSequence.sequence to @GroupSequence.value
    * [BVAL-126] - Define group sequence logic more formally and eliminate corner cases
    * [BVAL-129] - Clarify ConstraintValidatorContext propertyPath generation
    * [BVAL-130] - Make ConstraintDescriptor generic: ConstraintDescriptor&lt;T extends Annotation&gt;
    * [BVAL-131] - Provide object graph navigation determinism
    * [BVAL-134] - @Valid accepts objects implementing Iterable 
    * [BVAL-135] - Remove DefaultValidationProviderResolver from the public API
    * [BVAL-136] - Add Context object for MessageInterpolator
    * [BVAL-137] - prefix for message template key is constraint. instead of validator.
    * [BVAL-138] - Rename OverridesParameter to OverridesAttribute
    * [BVAL-139] - Remove @OverridesParameters and use the inner class mode (OverridesAttribute.LIst)
    * [BVAL-140] - BeanDescriptor.getConstrainedProperties() returns Set&lt;PropertyDescriptor&gt;
    * [BVAL-141] - Rename ConstraintDescriptor.getParameters() to getAttributes()

** New Feature
    * [BVAL-52] - Define the exception hierarchy and rules
    * [BVAL-55] - Exception policy
    * [BVAL-65] - Additional built-in constraints
    * [BVAL-98] - Type-safe ConstraintValidator
    * [BVAL-100] - Support XML mapping overriding
    * [BVAL-102] - Support META-INF/validation.xml
    * [BVAL-119] - Introduce @Pattern for regexp
    * [BVAL-121] - Define built-in constraints plural forms
    * [BVAL-123] - Add ConstraintViolationException
    * [BVAL-124] - Introduce backslash as escaping character
    * [BVAL-142] - @Min/@max no longer accept float/double and introduce @DecimalMin/@DecimalMax


** Task
    * [BVAL-24] - What should be done when multiple META-INF/validation.xml are found?
    * [BVAL-117] - Specify behaviour of ConstraintValidator.initalize in the case of inconsistent values in constraint parameters
    * [BVAL-127] - Remove ConstraintViolation.getGroups()
    * [BVAL-128] - Clarify invalid cases for validateProperty / validateValue on proeprtyName being empty or null
    * [BVAL-133] - Remove JPA and JSF integration proposals




1.0.Beta2 Public Draft (2008-12-15)
-----------------------------------


** Bug
    * [BVAL-6] - Wrong example in validation methods section
    * [BVAL-17] - Validator&lt;A&gt;.validate(b) where b:B and B extends A should validate B. Metadata APIs are specific to A
    * [BVAL-42] - Names of message keys in spec inconsistent
    * [BVAL-45] - Typo at ConstraintDescriptor.getContstraintClass()


** Improvement
    * [BVAL-29] - Types should be determined at runtime
    * [BVAL-33] - Should ConstraintDescriptor.getConstraintImplementation() replaced by .getConstraintImplementationClass()?
    * [BVAL-40] - Rename InvalidConstraint to ConstraintViolation
    * [BVAL-48] - Add a way to access the default message resolver
    * [BVAL-49] - Mark metadata classes as immutable
    * [BVAL-59] - Rethink the group sequence inheritance rules
    * [BVAL-60] - ConstraintViolation points to the corresponding ConstraintDescriptor
    * [BVAL-68] - Specify that static methods and fields are not validated
    * [BVAL-73] - Rename ConstraintViolation.getBeanClass() to CV. getRootClass() or simply remove it
    * [BVAL-78] - Forbid a Validation implementation to modify the state of the object being validated

** New Feature
    * [BVAL-30] - Define validation Context to be passed to constraint implementation calls
    * [BVAL-36] - Validation of method parameters and returned values
    * [BVAL-67] - Allow MessageResolver to be Localizable
    * [BVAL-71] - Should we have group aggregation?
    * [BVAL-76] - Expose the raw message to ConstraintViolation
    * [BVAL-79] - Groups are now Type based rather than String based
    * [BVAL-81] - Provide a TraversableResolver contract


** Task
    * [BVAL-1] - Remove references to 'beancheck' in the spec
    * [BVAL-3] - Replace array return types with Sets
    * [BVAL-4] - Return value for @NotEmpty for null values
    * [BVAL-5] - Change order of exmaple classes in Book/Author example
    * [BVAL-7] - Use of example in ConstraintFactory section (2.4)
    * [BVAL-8] - StandardConstraint description (2.5)
    * [BVAL-23] - Make Validator&lt;T&gt; thread-safe</programlisting>
  </appendix>
</book>