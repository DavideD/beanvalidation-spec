<chapter id="builtinconstraints">
    <title>Built-in Constraint definitions</title>

    <para>The specification defines a small set of built-in constraints. Their
    usage is encouraged both in regular constraint declarations and as
    composing constraints. Using this set of constraints will enhance
    portability of your constraints across constraint-consuming frameworks
    relying on the metadata API (such as client side validation frameworks or
    database schema generation frameworks).</para>

    <para>Built-in annotations are annotated with an empty
    <classname>@Constraint</classname> annotation to avoid any dependency
    between the specification API and a specific implementation. Each Bean
    Validation provider must recognize built-in constraint annotations as
    valid constraint definitions and provide compliant constraint
    implementations for each. The built-in constraint validation
    implementation is having a lower priority than an XML mapping definition.
    In other words <classname>ConstraintValidator</classname> implementations
    for built-in constraints can be overridden by using the XML mapping (see
    <xref linkend="xml-mapping-constraintdefinition" />).</para>

    <para>All built-in constraints are in the
    <classname>javax.validation.constraints</classname> package. Here is the
    list of constraints and their declaration.</para>

    <example>
      <title>@Null constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be &lt;code&gt;null&lt;/code&gt;.
 * Accepts any type.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Null {
    String message() default "{javax.validation.constraints.Null.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@Null&lt;/code&gt; annotations on the same element
     * @see javax.validation.constraints.Null
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Null[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@NotNull constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must not be &lt;code&gt;null&lt;/code&gt;.
 * Accepts any type.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface NotNull {
    String message() default "{javax.validation.constraints.NotNull.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@NotNull&lt;/code&gt; annotations on the same element
     * @see javax.validation.constraints.NotNull
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        NotNull[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@AssertTrue constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be true.
 * Supported types are &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;Boolean&lt;/code&gt;
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface AssertTrue {
    String message() default "{javax.validation.constraints.AssertTrue.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@AssertTrue&lt;/code&gt; annotations on the same element
     * @see AssertTrue
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        AssertTrue[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@AssertFalse constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be false.
 * Supported types are &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;Boolean&lt;/code&gt;
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface AssertFalse {
    String message() default "{javax.validation.constraints.AssertFalse.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@AssertFalse&lt;/code&gt; annotations on the same element
     * @see javax.validation.constraints.AssertFalse
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        AssertFalse[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Min constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a number whose value must be higher or
 * equal to the specified minimum.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;,
 * and their respective wrappers&lt;/li&gt;
 * &lt;/ul&gt;
 * Note that &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; are not supported due to rounding errors
 * (some providers might provide some approximative support)
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Min {
    String message() default "{javax.validation.constraints.Min.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * @return value the element must be higher or equal to
     */
    long value();

    /**
     * Defines several &lt;code&gt;@Min&lt;/code&gt; annotations on the same element
     * @see Min
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Min[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Max constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a number whose value must be lower or
 * equal to the specified maximum.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, 
 * and their respective wrappers&lt;/li&gt;
 * &lt;/ul&gt;
 * Note that &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; are not supported due to rounding errors
 * (some providers might provide some approximative support)
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Max {
    String message() default "{javax.validation.constraints.Max.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * @return value the element must be lower or equal to
     */
    long value();

    /**
     * Defines several &lt;code&gt;@Max&lt;/code&gt; annotations on the same element
     * @see Max
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Max[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@DecimalMin constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a number whose value must be higher or
 * equal to the specificed minimum.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;,
 * and their respective wrappers&lt;/li&gt;
 * &lt;/ul&gt;
 * Note that &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; are not supported due to rounding errors
 * (some providers might provide some approximative support)
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface DecimalMin {
    String message() default "{javax.validation.constraints.DecimalMin.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * The &lt;code&gt;String&lt;/code&gt; representation of the min value according to the
     * &lt;code&gt;BigDecimal&lt;/code&gt; string representation
     * @return value the element must be higher or equal to
     */
    String value();

    /**
     * Defines several &lt;code&gt;@DecimalMin&lt;/code&gt; annotations on the same element
     * @see DecimalMin
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        DecimalMin[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@DecimalMax constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a number whose value must be lower or
 * equal to the specified maximum.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;,
 * and their respective wrappers&lt;/li&gt;
 * &lt;/ul&gt;
 * Note that &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; are not supported due to rounding errors
 * (some providers might provide some approximative support)
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = { })
public @interface DecimalMax {
    String message() default "{javax.validation.constraints.DecimalMax.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * The &lt;code&gt;String&lt;/code&gt; representation of the max value according to the
     * &lt;code&gt;BigDecimal&lt;/code&gt; string representation
     *
     * @return value the element must be lower or equal to
     */
    String value();

    /**
     * Defines several &lt;code&gt;@DecimalMax&lt;/code&gt; annotations on the same element
     *
     * @author Emmanuel Bernard
     * @see DecimalMax
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
            @interface List {
        DecimalMax[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Size constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element size must be between the specified boundaries (included).
 *
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;String&lt;/code&gt; (string length is evaludated)&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;Collection&lt;/code&gt; (collection size is evaluated)&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;Map&lt;/code&gt; (map size is evaluated)&lt;/li&gt;
 * &lt;li&gt;Array (array length is evaluated)&lt;/li&gt;
 *
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Size {
    String message() default "{javax.validation.constraints.Size.message}";
    
    Class&lt;?&gt;[] groups() default {};

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * @return size the element must be higher or equal to
     */
    int min() default 0;

    /**
     * @return size the element must be lower or equal to
     */
    int max() default Integer.MAX_VALUE;

    /**
     * Defines several &lt;code&gt;@Size&lt;/code&gt; annotations on the same element
     * @see Size
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Size[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Digits constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a number within accepted range
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;,
 * and their respective wrapper types&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Digits {
    String message() default "{javax.validation.constraints.Digits.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * @return maximum number of integral digits accepted for this number.
     */
    int integer();

    /**
     * @return maximum number of fractional digits accepted for this number.
     */
    int fraction();

    /**
     * Defines several &lt;code&gt;@Digits&lt;/code&gt; annotations on the same element
     * @see Digits
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Digits[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Past constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a date in the past.
 * Now is defined as the current time according to the virtual machine
 * The calendar used if the compared type is of type &lt;code&gt;Calendar&lt;/code&gt;
 * is the calendar based on the current timezone and the current locale.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;java.util.Date&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;java.util.Calendar&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Past {
    String message() default "{javax.validation.constraints.Past.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@Past&lt;/code&gt; annotations on the same element
     * @see Past
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Past[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Future constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated element must be a date in the future.
 * Now is defined as the current time according to the virtual machine
 * The calendar used if the compared type is of type &lt;code&gt;Calendar&lt;/code&gt;
 * is the calendar based on the current timezone and the current locale.
 * &lt;p/&gt;
 * Supported types are:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;java.util.Date&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;java.util.Calendar&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p/&gt;
 * &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Future {
    String message() default "{javax.validation.constraints.Future.message}";

    Class&lt;?&gt;[] groups() default { };

    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Defines several &lt;code&gt;@Future&lt;/code&gt; annotations on the same element
     * @see Future
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Future[] value();
    }
}</programlisting>
    </example>

    <example>
      <title>@Pattern constraint</title>

      <programlisting>package javax.validation.constraints;

/**
 * The annotated String must match the following regular expression.
 * The regular expression follows the Java regular expression conventions
 * see {@link java.util.regex.Pattern}.
 *
 * Accepts String. &lt;code&gt;null&lt;/code&gt; elements are considered valid.
 *
 * @author Emmanuel Bernard
 */
@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
public @interface Pattern {
    /**
     * @return The regular expression to match.
     */
    String regexp();

    /**
     * @return Array of &lt;code&gt;Flag&lt;/code&gt;s considered when resolving the regular expression.
     */
    Flag[] flags() default {};

    /**
     * @return The error message template.
     */
    String message() default "{javax.validation.constraints.Pattern.message}";

    /**
     * @return The groups the constraint belongs to.
     */
    Class&lt;?&gt;[] groups() default { };

    /**
     * @return The payload associated to the constraint
     */
    Class&lt;? extends Payload&gt;[] payload() default {};

    /**
     * Possible Regexp flags
     */
    public static enum Flag {

        /**
         * Enables Unix lines mode
         * @see java.util.regex.Pattern#UNIX_LINES
         */
        UNIX_LINES(java.util.regex.Pattern.UNIX_LINES),

        /** 
         * Enables case-insensitive matching
         * @see java.util.regex.Pattern#CASE_INSENSITIVE
         */
        CASE_INSENSITIVE(java.util.regex.Pattern.CASE_INSENSITIVE),

        /**
         * Permits whitespace and comments in pattern
         * @see java.util.regex.Pattern#COMMENTS
         */
        COMMENTS(java.util.regex.Pattern.COMMENTS),

        /**
         * Enables multiline mode
         * @see java.util.regex.Pattern#MULTILINE
         */
        MULTILINE(java.util.regex.Pattern.MULTILINE),

        /**
         * Enables dotall mode
         * @see java.util.regex.Pattern#DOTALL
         */
        DOTALL(java.util.regex.Pattern.DOTALL),

        /**
         * Enables Unicode-aware case folding
         * @see java.util.regex.Pattern#UNICODE_CASE
         */
        UNICODE_CASE(java.util.regex.Pattern.UNICODE_CASE),

        /**
         * Enables canonical equivalence
         * @see java.util.regex.Pattern#CANON_EQ
         */
        CANON_EQ(java.util.regex.Pattern.CANON_EQ);

        //JDK flag value
        private final int value;

        private Flag(int value) {
            this.value = value;
        }

        /**
         * @return flag value as defined in {@link java.util.regex.Pattern}
         */
        public int getValue() {
            return value;
        }
    }

    /**
     * Defines several &lt;code&gt;@Pattern&lt;/code&gt; annotations on the same element
     * @see Pattern
     *
     * @author Emmanuel Bernard
     */
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        Pattern[] value();
    }
}</programlisting>
    </example>
  </chapter>